/*
 * ProteinMatcher.java
 *
 * Created on September 26, 2008, 4:54 AM
 */
import java.awt.Color;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;
import java.io.*;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.LinkedHashSet;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JFileChooser;

/**
 *
 * @author Pisitkun
 */
public class ProteinMatcher extends javax.swing.JFrame {

    String gpffFilePath = null;
    String newFileName = null;
    String saveFilePath = null;
    long gpffFileSize = 0;
    String pmFilePath = new String();
    Object selectItem = "Protein/mRNA sequence";
    Object selectVerb = "contains";
    int item = 5;
    Object outputFormat = "single line";
    Object inputMethod = "paste";
    String inputFilePath = null;
    long inputFileSize = 0;
    Object multipleLineOutput = "Without sequence";
    private ArrayList<ArrayList<String>> pm2DArrayList;
    private boolean samePmFilePath;

    /**
     * Creates new form ProteinMatcher
     */
    public ProteinMatcher() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jProgressBar = new javax.swing.JProgressBar();
        saveButton = new javax.swing.JButton();
        copyButton = new javax.swing.JButton();
        clearOutputButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        outputTextArea = new javax.swing.JTextArea();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        databaseInputTextField = new javax.swing.JTextField();
        browseSelectGpffButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        saveNewDatabaseTextField = new javax.swing.JTextField();
        browseSaveButton = new javax.swing.JButton();
        createDatabaseButton = new javax.swing.JButton();
        createProgressBar = new javax.swing.JProgressBar();
        createProgressLabel = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        submitButton = new javax.swing.JButton();
        clearInputButton = new javax.swing.JButton();
        resetButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        inputTextField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        selectDatabaseTextField = new javax.swing.JTextField();
        selectDatabaseButton = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        singleLineRadioButton = new javax.swing.JRadioButton();
        multipleLineRadioButton = new javax.swing.JRadioButton();
        enterSequenceButton = new javax.swing.JButton();
        pasteCheckBox = new javax.swing.JCheckBox();
        matchParameterComboBox = new javax.swing.JComboBox();
        jLabel9 = new javax.swing.JLabel();
        multiWithoutCheckBox = new javax.swing.JCheckBox();
        multiWithCheckBox = new javax.swing.JCheckBox();
        matchVerbComboBox = new javax.swing.JComboBox();
        progressLabel = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("NHLBI Pro-Match");
        setIconImage(Toolkit.getDefaultToolkit().getImage(
            ProteinMatcher.class.getResource("NHLBI.jpg")));

    saveButton.setText("Save");
    saveButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            saveButtonActionPerformed(evt);
        }
    });

    copyButton.setText("Copy");
    copyButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            copyButtonActionPerformed(evt);
        }
    });

    clearOutputButton.setText("Clear");
    clearOutputButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            clearOutputButtonActionPerformed(evt);
        }
    });

    outputTextArea.setColumns(20);
    outputTextArea.setRows(5);
    jScrollPane1.setViewportView(outputTextArea);

    jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Create new Pro-Match database"));

    jLabel2.setText("Enter RefSeq database [.protein.gpff or .rna.gbff]: ");

    browseSelectGpffButton.setText("Browse");
    browseSelectGpffButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            browseSelectGpffButtonActionPerformed(evt);
        }
    });

    jLabel3.setText("Save Pro-Match [.pm] database in:");

    browseSaveButton.setText("Browse");
    browseSaveButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            browseSaveButtonActionPerformed(evt);
        }
    });

    createDatabaseButton.setText("Create");
    createDatabaseButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            createDatabaseButtonActionPerformed(evt);
        }
    });

    createProgressLabel.setText("Progress");

    jLabel5.setText("or UniProt database [.uniprot.gpff]:");

    jLabel10.setText("or FASTA database [.fasta]:");

    javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
    jPanel1.setLayout(jPanel1Layout);
    jPanel1Layout.setHorizontalGroup(
        jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel1Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel2)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(createDatabaseButton)
                            .addGap(18, 18, 18)
                            .addComponent(createProgressLabel))
                        .addComponent(jLabel3))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(saveNewDatabaseTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 464, Short.MAX_VALUE)
                                .addComponent(databaseInputTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 464, Short.MAX_VALUE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(browseSaveButton, javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(browseSelectGpffButton, javax.swing.GroupLayout.Alignment.TRAILING)))
                        .addComponent(createProgressBar, javax.swing.GroupLayout.DEFAULT_SIZE, 537, Short.MAX_VALUE)))
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel5)
                        .addComponent(jLabel10))
                    .addGap(0, 0, Short.MAX_VALUE)))
            .addContainerGap())
    );
    jPanel1Layout.setVerticalGroup(
        jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel1Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel2)
                .addComponent(browseSelectGpffButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(databaseInputTextField))
            .addGap(1, 1, 1)
            .addComponent(jLabel5)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jLabel10)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(browseSaveButton)
                .addComponent(jLabel3)
                .addComponent(saveNewDatabaseTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                .addComponent(createDatabaseButton)
                .addComponent(createProgressLabel)
                .addComponent(createProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addContainerGap())
    );

    jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Pro-Match"));

    submitButton.setText("Submit");
    submitButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            submitButtonActionPerformed(evt);
        }
    });

    clearInputButton.setText("Clear");
    clearInputButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            clearInputButtonActionPerformed(evt);
        }
    });

    resetButton.setText("Reset");
    resetButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            resetButtonActionPerformed(evt);
        }
    });

    jLabel1.setText("Select match parameter:");

    jLabel4.setText("Select Pro-Match [.pm] database:         ");

    selectDatabaseButton.setText("Browse");
    selectDatabaseButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            selectDatabaseButtonActionPerformed(evt);
        }
    });

    jLabel6.setText("Output format:");

    buttonGroup1.add(singleLineRadioButton);
    singleLineRadioButton.setSelected(true);
    singleLineRadioButton.setText("Single line");
    singleLineRadioButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            singleLineRadioButtonActionPerformed(evt);
        }
    });

    buttonGroup1.add(multipleLineRadioButton);
    multipleLineRadioButton.setText("Multiple line");
    multipleLineRadioButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            multipleLineRadioButtonActionPerformed(evt);
        }
    });

    enterSequenceButton.setText("Browse");
    enterSequenceButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            enterSequenceButtonActionPerformed(evt);
        }
    });

    pasteCheckBox.setSelected(true);
    pasteCheckBox.setText("Paste/Type");
    pasteCheckBox.addItemListener(new java.awt.event.ItemListener() {
        public void itemStateChanged(java.awt.event.ItemEvent evt) {
            pasteCheckBoxItemStateChanged(evt);
        }
    });

    matchParameterComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Protein/mRNA sequence", "RefSeq/UniProt number", "Gene symbol", "DEFINITION", "Amino acid/bp number", "mRNA RefSeq/UniProt locus" }));
    matchParameterComboBox.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            matchParameterComboBoxActionPerformed(evt);
        }
    });

    jLabel9.setText("Enter input list (space delimited)");

    buttonGroup2.add(multiWithoutCheckBox);
    multiWithoutCheckBox.setSelected(true);
    multiWithoutCheckBox.setText("Without sequence");
    multiWithoutCheckBox.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            multiWithoutCheckBoxActionPerformed(evt);
        }
    });

    buttonGroup2.add(multiWithCheckBox);
    multiWithCheckBox.setText("With sequence");
    multiWithCheckBox.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            multiWithCheckBoxActionPerformed(evt);
        }
    });

    matchVerbComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "contains", "equals", "starts with", "ends with", "matches (regex)", "matches", "matches (shows cleavage sites)" }));
    matchVerbComboBox.addItemListener(new java.awt.event.ItemListener() {
        public void itemStateChanged(java.awt.event.ItemEvent evt) {
            matchVerbComboBoxItemStateChanged(evt);
        }
    });

    javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
    jPanel3.setLayout(jPanel3Layout);
    jPanel3Layout.setHorizontalGroup(
        jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel3Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel3Layout.createSequentialGroup()
                    .addComponent(submitButton)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(clearInputButton)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(resetButton))
                .addGroup(jPanel3Layout.createSequentialGroup()
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel1)
                        .addGroup(jPanel3Layout.createSequentialGroup()
                            .addComponent(matchParameterComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(matchVerbComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jLabel4)
                        .addGroup(jPanel3Layout.createSequentialGroup()
                            .addComponent(jLabel6)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(multipleLineRadioButton)
                                .addComponent(singleLineRadioButton))))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel3Layout.createSequentialGroup()
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(inputTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 373, Short.MAX_VALUE)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                                    .addComponent(jLabel9)
                                    .addGap(18, 18, 18)
                                    .addComponent(pasteCheckBox))
                                .addComponent(selectDatabaseTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 373, Short.MAX_VALUE))
                            .addGap(6, 6, 6)
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(enterSequenceButton)
                                .addComponent(selectDatabaseButton)))
                        .addGroup(jPanel3Layout.createSequentialGroup()
                            .addComponent(multiWithoutCheckBox)
                            .addGap(2, 2, 2)
                            .addComponent(multiWithCheckBox)
                            .addGap(2, 2, 2)))))
            .addContainerGap())
    );
    jPanel3Layout.setVerticalGroup(
        jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel3Layout.createSequentialGroup()
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(selectDatabaseButton)
                .addComponent(jLabel4)
                .addComponent(selectDatabaseTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(18, 18, 18)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                .addComponent(jLabel1)
                .addComponent(jLabel9)
                .addComponent(pasteCheckBox))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(enterSequenceButton)
                .addComponent(matchParameterComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(inputTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(matchVerbComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(18, 18, 18)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel6)
                .addComponent(singleLineRadioButton))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(multipleLineRadioButton)
                .addComponent(multiWithoutCheckBox)
                .addComponent(multiWithCheckBox))
            .addGap(9, 9, 9)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(clearInputButton)
                .addComponent(submitButton)
                .addComponent(resetButton))
            .addContainerGap())
    );

    progressLabel.setText("Progress");

    jLabel7.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
    jLabel7.setText("Created by LKEM Bioinformatics Group, NHLBI, NIH");

    jLabel8.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
    jLabel8.setText("Contact us at PISITKUT@NHLBI.NIH.GOV");

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 825, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(progressLabel, javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jProgressBar, javax.swing.GroupLayout.DEFAULT_SIZE, 825, Short.MAX_VALUE)
                .addGroup(layout.createSequentialGroup()
                    .addComponent(saveButton)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(copyButton)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(clearOutputButton)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 398, Short.MAX_VALUE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel8)
                        .addComponent(jLabel7))))
            .addContainerGap())
    );
    layout.setVerticalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(progressLabel)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 189, Short.MAX_VALUE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(saveButton)
                .addComponent(copyButton)
                .addComponent(clearOutputButton)
                .addComponent(jLabel7))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jLabel8)
            .addGap(26, 26, 26))
    );

    pack();
    }// </editor-fold>//GEN-END:initComponents

    @SuppressWarnings("empty-statement")
private void browseSelectGpffButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseSelectGpffButtonActionPerformed
        JFileChooser fcSelect = new JFileChooser();
        int returnVal = fcSelect.showDialog(ProteinMatcher.this, "Select");
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File gpffFile = fcSelect.getSelectedFile();
            gpffFileSize = gpffFile.length() / 1024;
            gpffFilePath = gpffFile.getPath();
            boolean haveDotGpff = gpffFilePath.endsWith(".protein.gpff") || gpffFilePath.endsWith(".rna.gbff") || gpffFilePath.endsWith(".uniprot.gpff") || gpffFilePath.endsWith(".fasta");
            if (haveDotGpff == true) {
                databaseInputTextField.setForeground(Color.blue);
                databaseInputTextField.setText(gpffFilePath);
                long lastModified = gpffFile.lastModified();
                DateFormat formatter = new SimpleDateFormat("MM_dd_yyyy");
                Calendar calendar = Calendar.getInstance();
                calendar.setTimeInMillis(lastModified);
                newFileName = gpffFile.getName().replace("gpff", "gpff.").replace("gbff", "gbff.").replace("fasta", "fasta.") + formatter.format(calendar.getTime()) + ".pm";
            } else {
                databaseInputTextField.setForeground(Color.red);
                databaseInputTextField.setText("Select only .protein.gpff or .rna.gbff or .uniprot.gpff or .fasta file");
            }
        }
}//GEN-LAST:event_browseSelectGpffButtonActionPerformed

private void submitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitButtonActionPerformed
    if (pmFilePath.equals(selectDatabaseTextField.getText())) {
        samePmFilePath = true;
    } else {
        pmFilePath = selectDatabaseTextField.getText();
        samePmFilePath = false;
    }
    if (pmFilePath.endsWith(".pm")) {
        selectDatabaseTextField.setForeground(Color.blue);
        selectDatabaseTextField.setText(pmFilePath);
        progressLabel.setForeground(Color.blue);
        progressLabel.setText("Matching...");
        jProgressBar.setValue(0);
        new Thread() {

            @Override
            public void run() {
                try {
                    submit();
                } catch (IOException ex) {
                    Logger.getLogger(ProteinMatcher.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }.start();
    } else {
        selectDatabaseTextField.setForeground(Color.red);
        selectDatabaseTextField.setText("Select .pm file");
    }
}//GEN-LAST:event_submitButtonActionPerformed

private void browseSaveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseSaveButtonActionPerformed
    JFileChooser fcSavePM = new JFileChooser();
    fcSavePM.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
    int returnVal = fcSavePM.showSaveDialog(ProteinMatcher.this);
    if (returnVal == JFileChooser.APPROVE_OPTION) {
        File newPmFile = fcSavePM.getSelectedFile();
        saveFilePath = newPmFile.getPath() + "\\" + newFileName;
        if (newFileName != null) {
            saveNewDatabaseTextField.setForeground(Color.blue);
            saveNewDatabaseTextField.setText(saveFilePath);
        } else {
            saveNewDatabaseTextField.setForeground(Color.red);
            saveNewDatabaseTextField.setText("Enter .protein.gpff or .rna.gbff or .uniprot.gpff or .fasta file");
        }
    }
}//GEN-LAST:event_browseSaveButtonActionPerformed

private void createDatabaseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createDatabaseButtonActionPerformed
    createProgressLabel.setForeground(Color.blue);
    createProgressLabel.setText("Processing...");
    createProgressBar.setValue(0);
    new Thread() {

        @Override
        public void run() {
            try {
                if (gpffFilePath.endsWith(".protein.gpff")) {
                    createProteinDatabase();
                } else if (gpffFilePath.endsWith(".rna.gbff")) {
                    createRnaDatabase();
                } else if (gpffFilePath.endsWith(".uniprot.gpff")) {
                    createUniProtDatabase();
                } else if (gpffFilePath.endsWith(".fasta")) {
                    createFastaDatabase();
                }
            } catch (IOException ex) {
                Logger.getLogger(ProteinMatcher.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }.start();
}//GEN-LAST:event_createDatabaseButtonActionPerformed

    private void createProteinDatabase() throws IOException {
        //Initialize 2DArrayList for storing ProMatch [.pm] database
        ArrayList<ArrayList<String>> pmDatabase = new ArrayList<ArrayList<String>>();
        ArrayList<String> pmArrayList = new ArrayList<String>();

        BufferedReader createInputStream = null;
        ObjectOutputStream createOutputStream = null;

        try {
            createInputStream
                    = new BufferedReader(
                            new FileReader(gpffFilePath));
            createOutputStream
                    = new ObjectOutputStream(
                            new BufferedOutputStream(
                                    new FileOutputStream(saveFilePath, false)));

            String gpffLine;
            boolean haveEnd = false;
            int lineSize;
            int totalLineSize = 0;
            while ((gpffLine = createInputStream.readLine()) != null) {
                lineSize = gpffLine.getBytes().length;
                boolean haveLocus = gpffLine.startsWith("LOCUS");
                boolean haveDefinition = gpffLine.startsWith("DEFINITION");
                boolean haveSource = gpffLine.startsWith("DBSOURCE");
                boolean haveGeneSymbol = gpffLine.contains("/gene=");
                boolean haveSequence = gpffLine.startsWith("ORIGIN");
                if (haveLocus) {
                    if (haveEnd) {
                        pmArrayList = new ArrayList<String>();
                    }
                    String[] arrayLocus = gpffLine.split("\\s+");
                    pmArrayList.add(arrayLocus[1]);
                    pmArrayList.add(arrayLocus[2]);
                } else if (haveDefinition) {
                    lineSize = 0;
                    StringBuilder cleanDefinition = new StringBuilder();
                    do {
                        lineSize = lineSize + gpffLine.getBytes().length;
                        boolean haveEndDefinition = gpffLine.contains("ACCESSION");
                        if (haveEndDefinition) {
                            break;
                        }
                        cleanDefinition.append(gpffLine.trim()).append(" ");
                    } while ((gpffLine = createInputStream.readLine()) != null);
                    if (cleanDefinition.toString().endsWith("]. ")) {
                        pmArrayList.add(cleanDefinition.substring(0, cleanDefinition.lastIndexOf("[") - 1).replace("DEFINITION  ", ""));
                    } else if (cleanDefinition.toString().endsWith(". ")) {
                        pmArrayList.add(cleanDefinition.substring(0, cleanDefinition.length() - 2).replace("DEFINITION  ", ""));
                    } else {
                        pmArrayList.add(cleanDefinition.toString().trim().replace("DEFINITION  ", ""));
                    }
                } else if (haveSource) {
                    pmArrayList.add(gpffLine.replaceAll("DBSOURCE.+accession ", ""));
                } else if (haveGeneSymbol) {
                    pmArrayList.add(gpffLine.trim().replace("/gene=", "").replace("\"", ""));
                } else if (haveSequence) {
                    StringBuilder sequence = new StringBuilder();
                    lineSize = 0;
                    do {
                        lineSize = lineSize + gpffLine.getBytes().length;
                        boolean haveEndSequence = gpffLine.contains("//");
                        if (haveEndSequence) {
                            haveEnd = true;
                            break;
                        }
                        if (!gpffLine.startsWith("ORIGIN")) {
                            sequence.append(gpffLine.replaceAll("[\\s\\d]+", ""));
                        }
                    } while ((gpffLine = createInputStream.readLine()) != null);
                    pmArrayList.add(sequence.toString().toUpperCase());
                    pmDatabase.add(pmArrayList);
                }
                totalLineSize = totalLineSize + lineSize;
                System.out.println(totalLineSize);
                int percentCreateProgress = (int) (((totalLineSize / 1024) * 100) / gpffFileSize);
                createProgressBar.setValue(percentCreateProgress);
            }
            createOutputStream.writeObject(pmDatabase);
        } finally {
            if (createInputStream != null) {
                createInputStream.close();
            }
            if (createOutputStream != null) {
                createOutputStream.close();
            }
        }
        createProgressLabel.setForeground(Color.red);
        createProgressLabel.setText("Completed");
        createProgressBar.setValue(100);
        System.out.println(gpffFileSize);
    }

    private void createRnaDatabase() throws IOException {
        //Initialize 2DArrayList for storing ProMatch [.pm] database
        ArrayList<ArrayList<String>> pmDatabase = new ArrayList<ArrayList<String>>();
        ArrayList<String> pmArrayList = new ArrayList<String>();

        BufferedReader createInputStream = null;
        ObjectOutputStream createOutputStream = null;

        try {
            createInputStream
                    = new BufferedReader(
                            new FileReader(gpffFilePath));
            createOutputStream
                    = new ObjectOutputStream(
                            new BufferedOutputStream(
                                    new FileOutputStream(saveFilePath, false)));

            String gpffLine;
            boolean haveEnd = false;
            int lineSize;
            int totalLineSize = 0;
            while ((gpffLine = createInputStream.readLine()) != null) {
                lineSize = gpffLine.getBytes().length;
                boolean haveLocus = gpffLine.startsWith("LOCUS");
                boolean haveDefinition = gpffLine.startsWith("DEFINITION");
                boolean haveSource = gpffLine.startsWith("VERSION");
                boolean haveGeneSymbol = gpffLine.startsWith("     gene");
                boolean haveSequence = gpffLine.startsWith("ORIGIN");
                if (haveLocus) {
                    if (haveEnd) {
                        pmArrayList = new ArrayList<String>();
                    }
                    String[] arrayLocus = gpffLine.split("\\s+");
                    pmArrayList.add(arrayLocus[1]);
                    pmArrayList.add(arrayLocus[2]);
                } else if (haveDefinition) {
                    lineSize = 0;
                    StringBuilder cleanDefinition = new StringBuilder();
                    do {
                        lineSize = lineSize + gpffLine.getBytes().length;
                        boolean haveEndDefinition = gpffLine.contains("ACCESSION");
                        if (haveEndDefinition) {
                            break;
                        }
                        cleanDefinition.append(gpffLine.trim()).append(" ");
                    } while ((gpffLine = createInputStream.readLine()) != null);
                    if (cleanDefinition.toString().endsWith("]. ")) {
                        pmArrayList.add(cleanDefinition.substring(0, cleanDefinition.lastIndexOf("[") - 1).replace("DEFINITION  ", ""));
                    } else if (cleanDefinition.toString().endsWith(". ")) {
                        pmArrayList.add(cleanDefinition.substring(0, cleanDefinition.length() - 2).replace("DEFINITION  ", ""));
                    } else {
                        pmArrayList.add(cleanDefinition.toString().trim().replace("DEFINITION  ", ""));
                    }
                } else if (haveSource) {
                    pmArrayList.add(gpffLine.replace("VERSION     ", ""));
                } else if (haveGeneSymbol) {
                    lineSize = 0;
                    int i = 0;
                    do {
                        lineSize = lineSize + gpffLine.getBytes().length;
                        if (i == 1) {
                            pmArrayList.add(gpffLine.trim().replace("/gene=", "").replace("\"", ""));
                            break;
                        }
                        i++;
                    } while ((gpffLine = createInputStream.readLine()) != null);
                } else if (haveSequence) {
                    StringBuilder sequence = new StringBuilder();
                    lineSize = 0;
                    do {
                        lineSize = lineSize + gpffLine.getBytes().length;
                        boolean haveEndSequence = gpffLine.contains("//");
                        if (haveEndSequence) {
                            haveEnd = true;
                            break;
                        }
                        if (!gpffLine.startsWith("ORIGIN")) {
                            sequence.append(gpffLine.replaceAll("[\\s\\d]+", ""));
                        }
                    } while ((gpffLine = createInputStream.readLine()) != null);
                    pmArrayList.add(sequence.toString().toUpperCase());
                    pmDatabase.add(pmArrayList);
                }
                totalLineSize = totalLineSize + lineSize;
                System.out.println(totalLineSize);
                int percentCreateProgress = (int) (((totalLineSize / 1024) * 100) / gpffFileSize);
                createProgressBar.setValue(percentCreateProgress);
            }
            createOutputStream.writeObject(pmDatabase);
        } finally {
            if (createInputStream != null) {
                createInputStream.close();
            }
            if (createOutputStream != null) {
                createOutputStream.close();
            }
        }
        createProgressLabel.setForeground(Color.red);
        createProgressLabel.setText("Completed");
        createProgressBar.setValue(100);
        System.out.println(gpffFileSize);
    }

    private void createUniProtDatabase() throws IOException {
        //Initialize 2DArrayList for storing ProMatch [.pm] database
        ArrayList<ArrayList<String>> pmDatabase = new ArrayList<ArrayList<String>>();
        ArrayList<String> pmArrayList = new ArrayList<String>();

        BufferedReader createInputStream = null;
        ObjectOutputStream createOutputStream = null;
        PrintWriter printWriter = null;

        try {
            createInputStream
                    = new BufferedReader(
                            new FileReader(gpffFilePath));
            createOutputStream
                    = new ObjectOutputStream(
                            new BufferedOutputStream(
                                    new FileOutputStream(saveFilePath, false)));
            printWriter
                    = new PrintWriter(new BufferedWriter(new FileWriter(saveFilePath + ".txt", false)));

            String gpffLine;
            boolean haveEnd = false;
            int lineSize;
            int totalLineSize = 0;
            while ((gpffLine = createInputStream.readLine()) != null) {
                lineSize = gpffLine.getBytes().length;
                boolean haveLocus = gpffLine.startsWith("LOCUS");
                boolean haveDefinition = gpffLine.startsWith("DEFINITION");
                boolean haveSource = gpffLine.startsWith("DBSOURCE");
                boolean haveGeneSymbol = gpffLine.startsWith("     Protein");
                boolean haveSequence = gpffLine.startsWith("ORIGIN");
                if (haveLocus) {
                    if (haveEnd) {
                        pmArrayList = new ArrayList<String>();
                    }
                    String[] arrayLocus = gpffLine.split("\\s+");
                    pmArrayList.add(arrayLocus[2]);
                } else if (haveDefinition) {
                    lineSize = 0;
                    StringBuilder cleanDefinition = new StringBuilder();
                    do {
                        lineSize = lineSize + gpffLine.getBytes().length;
                        boolean haveEndDefinition = gpffLine.contains("ACCESSION");
                        if (haveEndDefinition) {
                            pmArrayList.add(0, gpffLine.split("\\s+")[1]);
                            break;
                        }
                        cleanDefinition.append(gpffLine.trim()).append(" ");
                    } while ((gpffLine = createInputStream.readLine()) != null);
                    if (cleanDefinition.toString().endsWith("]. ")) {
                        pmArrayList.add(cleanDefinition.substring(0, cleanDefinition.lastIndexOf("[") - 1).replace("DEFINITION  ", ""));
                    } else if (cleanDefinition.toString().endsWith(". ")) {
                        pmArrayList.add(cleanDefinition.substring(0, cleanDefinition.length() - 2).replace("DEFINITION  ", ""));
                    } else {
                        pmArrayList.add(cleanDefinition.toString().trim().replace("DEFINITION  ", ""));
                    }
                } else if (haveSource) {
                    pmArrayList.add(gpffLine.split("\\s+")[3].replace(",", ""));
                } else if (haveGeneSymbol) {
                    lineSize = 0;
                    String gene = "#null";
                    gpffLine = createInputStream.readLine();
                    do {
                        lineSize = lineSize + gpffLine.getBytes().length;
                        if (!gpffLine.startsWith("                     ")) {
                            break;
                        }
                        if (gpffLine.startsWith("                     /gene=")) {
                            gene = gpffLine.replace("                     /gene=", "").replace("\"", "");
                        }
                    } while ((gpffLine = createInputStream.readLine()) != null);
                    pmArrayList.add(gene);
                } else if (haveSequence) {
                    StringBuilder sequence = new StringBuilder();
                    lineSize = 0;
                    do {
                        lineSize = lineSize + gpffLine.getBytes().length;
                        boolean haveEndSequence = gpffLine.contains("//");
                        if (haveEndSequence) {
                            haveEnd = true;
                            break;
                        }
                        if (!gpffLine.startsWith("ORIGIN")) {
                            sequence.append(gpffLine.replaceAll("[\\s\\d]+", ""));
                        }
                    } while ((gpffLine = createInputStream.readLine()) != null);
                    pmArrayList.add(sequence.toString().toUpperCase());
                    for (String string : pmArrayList) {
                        printWriter.print(string + "\t");
                    }
                    printWriter.print("\n");
                    pmDatabase.add(pmArrayList);
                }
                totalLineSize = totalLineSize + lineSize;
                System.out.println(totalLineSize);
                int percentCreateProgress = (int) (((totalLineSize / 1024) * 100) / gpffFileSize);
                createProgressBar.setValue(percentCreateProgress);
            }
            createOutputStream.writeObject(pmDatabase);
        } finally {
            if (createInputStream != null) {
                createInputStream.close();
            }
            if (createOutputStream != null) {
                createOutputStream.close();
            }
            if (printWriter != null) {
                printWriter.close();
            }
        }
        createProgressLabel.setForeground(Color.red);
        createProgressLabel.setText("Completed");
        createProgressBar.setValue(100);
        System.out.println(gpffFileSize);
    }

    private void createFastaDatabase() throws IOException {
        //Initialize 2DArrayList for storing ProMatch [.pm] database
        ArrayList<ArrayList<String>> pmDatabase = new ArrayList<ArrayList<String>>();
        ArrayList<String> pmArrayList = new ArrayList<String>();
        StringBuilder sequence = new StringBuilder();

        BufferedReader createInputStream = null;
        ObjectOutputStream createOutputStream = null;
        PrintWriter printWriter = null;

        try {
            createInputStream
                    = new BufferedReader(
                            new FileReader(gpffFilePath));
            createOutputStream
                    = new ObjectOutputStream(
                            new BufferedOutputStream(
                                    new FileOutputStream(saveFilePath, false)));
            printWriter
                    = new PrintWriter(new BufferedWriter(new FileWriter(saveFilePath + ".txt", false)));

            String gpffLine;
            boolean haveEnd = false;
            int lineSize;
            int totalLineSize = 0;
            while ((gpffLine = createInputStream.readLine()) != null) {
                lineSize = gpffLine.getBytes().length;
                boolean haveDescription = gpffLine.startsWith(">");
                if (haveDescription) {
                    if (pmArrayList.size() == 4) {
                        int sequenceLength = sequence.length();
                        pmArrayList.add(1, Integer.toString(sequenceLength));
                        pmArrayList.add(sequence.toString());
                        for (String string : pmArrayList) {
                            printWriter.print(string + "\t");
                        }
                        printWriter.print("\n");
                        pmDatabase.add(pmArrayList);
                    }
                    pmArrayList = new ArrayList<String>();
//                    String[] arrayDescription = gpffLine.split("\\|");
                    int whitespace = gpffLine.indexOf(" ");
                    pmArrayList.add(gpffLine.substring(1, whitespace));
                    pmArrayList.add(gpffLine.substring(whitespace + 1));
                    pmArrayList.add("#null");
                    pmArrayList.add("#null");
                    sequence = new StringBuilder();
                } else {
                    sequence.append(gpffLine);
                }
                totalLineSize = totalLineSize + lineSize;
                System.out.println(totalLineSize);
                int percentCreateProgress = (int) (((totalLineSize / 1024) * 100) / gpffFileSize);
                createProgressBar.setValue(percentCreateProgress);
            }
            int sequenceLength = sequence.length();
            pmArrayList.add(1, Integer.toString(sequenceLength));
            pmArrayList.add(sequence.toString());
            for (String string : pmArrayList) {
                printWriter.print(string + "\t");
            }
            printWriter.print("\n");
            if (pmArrayList.size() == 6) {
                pmDatabase.add(pmArrayList);
            }
            createOutputStream.writeObject(pmDatabase);
        } finally {
            if (createInputStream != null) {
                createInputStream.close();
            }
            if (createOutputStream != null) {
                createOutputStream.close();
            }
            if (printWriter != null) {
                printWriter.close();
            }
        }
        createProgressLabel.setForeground(Color.red);
        createProgressLabel.setText("Completed");
        createProgressBar.setValue(100);
        System.out.println(gpffFileSize);
    }

private void selectDatabaseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectDatabaseButtonActionPerformed
    JFileChooser fcSelectPM = new JFileChooser();
    int returnVal = fcSelectPM.showDialog(ProteinMatcher.this, "Select");
    if (returnVal == JFileChooser.APPROVE_OPTION) {
        File pmFile = fcSelectPM.getSelectedFile();
        selectDatabaseTextField.setText(pmFile.getPath());
    }
}//GEN-LAST:event_selectDatabaseButtonActionPerformed

private void clearInputButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearInputButtonActionPerformed
    inputTextField.setText("");
    progressLabel.setForeground(Color.black);
    progressLabel.setText("Progress");
    jProgressBar.setValue(0);
}//GEN-LAST:event_clearInputButtonActionPerformed

private void resetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetButtonActionPerformed
    inputTextField.setText("");
    outputTextArea.setText("");
    progressLabel.setForeground(Color.black);
    progressLabel.setText("Progress");
    jProgressBar.setValue(0);
}//GEN-LAST:event_resetButtonActionPerformed

private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
    JFileChooser fcSaveOutput = new JFileChooser();
    int returnVal = fcSaveOutput.showSaveDialog(ProteinMatcher.this);
    if (returnVal == JFileChooser.APPROVE_OPTION) {
        PrintStream p = null;
        try {
            File file = fcSaveOutput.getSelectedFile();
            p = new PrintStream(new BufferedOutputStream(new FileOutputStream(file)));
            p.println(outputTextArea.getText());
            progressLabel.setForeground(Color.blue);
            progressLabel.setText(file + " saved");
        } catch (FileNotFoundException ex) {
            Logger.getLogger(ProteinMatcher.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            p.close();
        }
    }
}//GEN-LAST:event_saveButtonActionPerformed

private void copyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyButtonActionPerformed
    outputTextArea.requestFocusInWindow();
    outputTextArea.selectAll();
    Clipboard cb
            = Toolkit.getDefaultToolkit().
            getSystemClipboard();
    String s = outputTextArea.getText();
    StringSelection contents
            = new StringSelection(s);
    cb.setContents(contents, null);
}//GEN-LAST:event_copyButtonActionPerformed

private void clearOutputButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearOutputButtonActionPerformed
    outputTextArea.setText("");
    progressLabel.setForeground(Color.black);
    progressLabel.setText("Progress");
    jProgressBar.setValue(0);
}//GEN-LAST:event_clearOutputButtonActionPerformed

private void enterSequenceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enterSequenceButtonActionPerformed
    JFileChooser fcSelectInput = new JFileChooser();
    int returnVal = fcSelectInput.showDialog(ProteinMatcher.this, "Select");
    if (returnVal == JFileChooser.APPROVE_OPTION) {
        File inputFile = fcSelectInput.getSelectedFile();
        inputFileSize = inputFile.length();
        System.out.println(inputFileSize);
        inputFilePath = inputFile.getPath();
        inputTextField.setForeground(Color.blue);
        inputTextField.setText(inputFilePath);
        inputMethod = "file";
        pasteCheckBox.setSelected(false);
    }
}//GEN-LAST:event_enterSequenceButtonActionPerformed

private void singleLineRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_singleLineRadioButtonActionPerformed
    outputFormat = "single line";
}//GEN-LAST:event_singleLineRadioButtonActionPerformed

private void multipleLineRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_multipleLineRadioButtonActionPerformed
    outputFormat = "multiple line";
}//GEN-LAST:event_multipleLineRadioButtonActionPerformed

private void pasteCheckBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_pasteCheckBoxItemStateChanged
    if (evt.getStateChange() == java.awt.event.ItemEvent.SELECTED) {
        inputMethod = "paste";
        inputTextField.setForeground(Color.black);
    } else {
        inputMethod = "file";
    }
}//GEN-LAST:event_pasteCheckBoxItemStateChanged

private void matchParameterComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_matchParameterComboBoxActionPerformed
    selectItem = matchParameterComboBox.getSelectedItem();
    if (selectItem == "RefSeq/UniProt number") {
        item = 0;
    } else if (selectItem == "Amino acid/bp number") {
        item = 1;
    } else if (selectItem == "DEFINITION") {
        item = 2;
    } else if (selectItem == "mRNA RefSeq/UniProt locus") {
        item = 3;
    } else if (selectItem == "Gene symbol") {
        item = 4;
    } else if (selectItem == "Protein/mRNA sequence") {
        item = 5;
    }
}//GEN-LAST:event_matchParameterComboBoxActionPerformed

private void multiWithoutCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_multiWithoutCheckBoxActionPerformed
    multipleLineOutput = "Without sequence";
}//GEN-LAST:event_multiWithoutCheckBoxActionPerformed

private void multiWithCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_multiWithCheckBoxActionPerformed
    multipleLineOutput = "With sequence";
}//GEN-LAST:event_multiWithCheckBoxActionPerformed

private void matchVerbComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_matchVerbComboBoxItemStateChanged
    selectVerb = matchVerbComboBox.getSelectedItem();
    matchParameterComboBox.setEnabled(true);
    if (selectVerb.toString().contains("matches")) {
        singleLineRadioButton.setEnabled(false);
        multipleLineRadioButton.setSelected(true);
        outputFormat = "multiple line";
        if (selectVerb == "matches (shows cleavage sites)") {
            matchParameterComboBox.setSelectedItem("Protein/mRNA sequence");
            item = 5;
            matchParameterComboBox.setEnabled(false);
        }
    } else {
        singleLineRadioButton.setEnabled(true);
    }
}//GEN-LAST:event_matchVerbComboBoxItemStateChanged

    private void submit() throws IOException {
        if (!samePmFilePath) {
            //Create an input stream from ProMatch [.pm] database file
            ObjectInputStream inputStream
                    = new ObjectInputStream(
                            new BufferedInputStream(
                                    new FileInputStream(pmFilePath)));
            try {
                pm2DArrayList = (ArrayList<ArrayList<String>>) inputStream.readObject();
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(ProteinMatcher.class.getName()).log(Level.SEVERE, null, ex);
            }
            //Close the stream
            inputStream.close();
        }
        //Create inputArrayList
        ArrayList<String> inputArrayList = new ArrayList<String>();
        if (inputMethod == "paste") {
            String[] inputArray = inputTextField.getText().split("\\s+");
            inputArrayList.addAll(Arrays.asList(inputArray));
        } else {
            Scanner s = null;
            try {
                s = new Scanner(new BufferedReader(new FileReader(inputFilePath)));
                while (s.hasNext()) {
                    inputArrayList.add(s.next());
                }
            } finally {
                if (s != null) {
                    s.close();
                }
            }
        }
        int inputNumber = inputArrayList.size();
        int progress = 0;
        //Print Header
        if (outputFormat == "single line") {
            outputTextArea.append("#\t" + "Input\t" + "Match number\t" + "All RefSeq/UniProt number\t" + "All gene symbol\n");
            outputTextArea.setCaretPosition(outputTextArea.getDocument().getLength());
        } else {
            if (multipleLineOutput == "Without sequence") {
                if (selectVerb.toString().contains("matches")) {
                    outputTextArea.append("#\t" + "Input\t" + "Match number\t" + "RefSeq/UniProt number\t" + "Gene symbol\t" + "DEFINITION\t" + "Amino acid/bp number\t" + "mRNA RefSeq/UniProt locus\t" + "Matched string\n");
                    outputTextArea.setCaretPosition(outputTextArea.getDocument().getLength());
                } else {
                    outputTextArea.append("#\t" + "Input\t" + "Match number\t" + "All RefSeq/UniProt number\t" + "All gene symbol\t" + "Each RefSeq/UniProt number\t" + "Each gene symbol\t" + "DEFINITION\t" + "Amino acid/bp number\t" + "mRNA RefSeq/UniProt locus\n");
                    outputTextArea.setCaretPosition(outputTextArea.getDocument().getLength());
                }
            } else {
                if (selectVerb.toString().contains("matches")) {
                    outputTextArea.append("#\t" + "Input\t" + "Match number\t" + "RefSeq/UniProt number\t" + "Gene symbol\t" + "DEFINITION\t" + "Amino acid/bp number\t" + "mRNA RefSeq/UniProt locus\t" + "Matched string\t" + "Protein/mRNA sequence\n");
                    outputTextArea.setCaretPosition(outputTextArea.getDocument().getLength());
                } else {
                    outputTextArea.append("#\t" + "Input\t" + "Match number\t" + "All RefSeq/UniProt number\t" + "All gene symbol\t" + "Each RefSeq/UniProt number\t" + "Each gene symbol\t" + "DEFINITION\t" + "Amino acid/bp number\t" + "mRNA RefSeq/UniProt locus\t" + "Protein/mRNA sequence\n");
                    outputTextArea.setCaretPosition(outputTextArea.getDocument().getLength());
                }
            }
        }
        //Process each input
        for (int i = 0; i < inputArrayList.size(); i++) {
            String input = inputArrayList.get(i);
            String cleanInput;
            if (item == 5) {
                cleanInput = input.replaceAll("\\W", "").toUpperCase();
            } else {
                cleanInput = input.toUpperCase();
            }
            Pattern pattern = null;
            Matcher matcher = null;
            if (selectVerb == "matches (regex)") {
                pattern = Pattern.compile(input.toUpperCase());
            } else if (selectVerb == "matches" || selectVerb == "matches (shows cleavage sites)") {
                pattern = Pattern.compile(input.replaceAll("\\W", "").toUpperCase());
            }
            StringBuilder allRefSeqOutput = new StringBuilder();
            LinkedHashSet<String> allGeneSymbolOutput = new LinkedHashSet<String>();
            ArrayList<String> allOutput = new ArrayList<String>();
            int matchNumber = 0;
            for (ArrayList<String> arrayList : pm2DArrayList) {
                boolean match = false;
                if (selectVerb == "contains") {
                    match = arrayList.get(item).toUpperCase().contains(cleanInput);
                } else if (selectVerb == "equals") {
                    match = arrayList.get(item).toUpperCase().equals(cleanInput);
                } else if (selectVerb == "starts with") {
                    match = arrayList.get(item).toUpperCase().startsWith(cleanInput);
                } else if (selectVerb == "ends with") {
                    match = arrayList.get(item).toUpperCase().endsWith(cleanInput);
                } else if (selectVerb.toString().contains("matches")) {
                    matcher = pattern.matcher(arrayList.get(item).toUpperCase());
                    match = matcher.find();
                }
                if (match == true) {
                    String output = arrayList.get(0) + "\t"
                            + arrayList.get(4) + "\t"
                            + arrayList.get(2) + "\t"
                            + arrayList.get(1) + "\t"
                            + arrayList.get(3);
                    if (selectVerb == "matches (regex)" || selectVerb == "matches") {
                        output = output + "\t";
                        int matcherStart = 0;
                        while (matcher.find(matcherStart)) {
                            matcherStart = matcher.start() + 1;
                            output = output + matcherStart + "-" + matcher.end() + ":" + matcher.group() + ";";
                        }
                    } else if (selectVerb == "matches (shows cleavage sites)") {
                        output = output + "\t";
                        int matcherStart = 0;
                        while (matcher.find(matcherStart)) {
                            matcherStart = matcher.start() + 1;
                            output = output + matcherStart + "-" + matcher.end() + ":"
                                    + ((matcher.start() != 0) ? arrayList.get(5).charAt(matcher.start() - 1) : "_") + "."
                                    + matcher.group()
                                    + "." + ((matcher.end() != arrayList.get(5).length()) ? arrayList.get(5).charAt(matcher.end()) : "_")
                                    + ";";
                        }
                    }
                    if (multipleLineOutput == "With sequence") {
                        output = output + "\t" + arrayList.get(5);
                    }
                    allRefSeqOutput.append(arrayList.get(0)).append(";");
                    allGeneSymbolOutput.add(arrayList.get(4));
                    allOutput.add(output);
                    matchNumber++;
                }
            }
            //Print Output
            if (!allRefSeqOutput.toString().isEmpty()) {
                StringBuilder allEachGeneSymbolOutput = new StringBuilder();
                for (String string : allGeneSymbolOutput) {
                    allEachGeneSymbolOutput.append(string).append(";");
                }
                if (outputFormat == "single line") {
                    outputTextArea.append((i + 1) + "\t" + input + "\t" + matchNumber + "\t" + allRefSeqOutput + "\t" + allEachGeneSymbolOutput + "\n");
                    outputTextArea.setCaretPosition(outputTextArea.getDocument().getLength());
                } else {
                    for (int j = 0; j < allOutput.size(); j++) {
                        if (selectVerb.toString().contains("matches")) {
                            outputTextArea.append((i + 1) + "\t" + input + "\t" + matchNumber + "\t" + allOutput.get(j) + "\n");
                            outputTextArea.setCaretPosition(outputTextArea.getDocument().getLength());
                        } else {
                            outputTextArea.append((i + 1) + "\t" + input + "\t" + matchNumber + "\t" + allRefSeqOutput + "\t" + allEachGeneSymbolOutput + "\t" + allOutput.get(j) + "\n");
                            outputTextArea.setCaretPosition(outputTextArea.getDocument().getLength());
                        }
                    }
                }
            } else {
                outputTextArea.append((i + 1) + "\t" + input + "\t" + matchNumber + "\tno match found" + "\n");
                outputTextArea.setCaretPosition(outputTextArea.getDocument().getLength());
            }

            //Progress bar
            progress++;
            int percentProgress = (progress * 100) / inputNumber;
            jProgressBar.setValue(percentProgress);
        }

        progressLabel.setForeground(Color.red);
        progressLabel.setText("Completed");
        jProgressBar.setValue(100);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                new ProteinMatcher().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton browseSaveButton;
    private javax.swing.JButton browseSelectGpffButton;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JButton clearInputButton;
    private javax.swing.JButton clearOutputButton;
    private javax.swing.JButton copyButton;
    private javax.swing.JButton createDatabaseButton;
    private javax.swing.JProgressBar createProgressBar;
    private javax.swing.JLabel createProgressLabel;
    private javax.swing.JTextField databaseInputTextField;
    private javax.swing.JButton enterSequenceButton;
    private javax.swing.JTextField inputTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JProgressBar jProgressBar;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox matchParameterComboBox;
    private javax.swing.JComboBox matchVerbComboBox;
    private javax.swing.JCheckBox multiWithCheckBox;
    private javax.swing.JCheckBox multiWithoutCheckBox;
    private javax.swing.JRadioButton multipleLineRadioButton;
    private javax.swing.JTextArea outputTextArea;
    private javax.swing.JCheckBox pasteCheckBox;
    private javax.swing.JLabel progressLabel;
    private javax.swing.JButton resetButton;
    private javax.swing.JButton saveButton;
    private javax.swing.JTextField saveNewDatabaseTextField;
    private javax.swing.JButton selectDatabaseButton;
    private javax.swing.JTextField selectDatabaseTextField;
    private javax.swing.JRadioButton singleLineRadioButton;
    private javax.swing.JButton submitButton;
    // End of variables declaration//GEN-END:variables
}
