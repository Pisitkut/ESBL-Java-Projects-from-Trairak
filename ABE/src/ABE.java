
/*
 * ABE.java
 *
 * Created on July 29, 2008, 12:20 PM
 */
import java.awt.Color;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;
import java.io.*;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 *
 * @author pisitkut
 */
public class ABE extends javax.swing.JFrame {

    Object selectInput = "Accession Number";
    Object selectSpecies = "Human";
    Object generalInformation = "All";
    Object proteinName = "selected";
    Object geneSymbol = "selected";
    Object aaNumber = "selected";
    Object speciesBox = "selected";
    Object accessionNumber = null;
    Object FASTA = null;
    Object goDomain = null;
    //GO variables
    ArrayList<String> poolComponent = null;
    ArrayList<String> poolFunction = null;
    ArrayList<String> poolProcess = null;
    //CDD variables
    ArrayList<String> poolCDD = null;
    private String api_key;

    /**
     * Creates new form ABE
     */
    public ABE() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        inputButtonGroup = new javax.swing.ButtonGroup();
        accessionbuttonGroup = new javax.swing.ButtonGroup();
        FASTAbuttonGroup = new javax.swing.ButtonGroup();
        GObuttonGroup = new javax.swing.ButtonGroup();
        selectInputLabel = new javax.swing.JLabel();
        selectInputPanel = new javax.swing.JPanel();
        accessionInputButton = new javax.swing.JRadioButton();
        geneInputButton = new javax.swing.JRadioButton();
        speciesComboBox = new javax.swing.JComboBox();
        selectOutputLabel = new javax.swing.JLabel();
        generalInformationPanel = new javax.swing.JPanel();
        allGenRadioButton = new javax.swing.JRadioButton();
        noneGenRadioButton = new javax.swing.JRadioButton();
        proteinNameCheckBox = new javax.swing.JCheckBox();
        speciesCheckBox = new javax.swing.JCheckBox();
        aaNumberCheckBox = new javax.swing.JCheckBox();
        geneSymbolCheckBox = new javax.swing.JCheckBox();
        accessionNumberPanel = new javax.swing.JPanel();
        refRadioButton = new javax.swing.JRadioButton();
        spRadioButton = new javax.swing.JRadioButton();
        noneAccRadioButton = new javax.swing.JRadioButton();
        fastaPanel = new javax.swing.JPanel();
        withMetadataButton = new javax.swing.JRadioButton();
        withoutMetadataButton = new javax.swing.JRadioButton();
        noneFastaRadioButton = new javax.swing.JRadioButton();
        enterInputLabel = new javax.swing.JLabel();
        inputTextField = new javax.swing.JTextField();
        submitInputButton = new javax.swing.JButton();
        clearInputButton = new javax.swing.JButton();
        resetButton = new javax.swing.JButton();
        progressLabel = new javax.swing.JLabel();
        jProgressBar = new javax.swing.JProgressBar();
        jScrollPane1 = new javax.swing.JScrollPane();
        outputTextArea = new javax.swing.JTextArea();
        saveOutputButton = new javax.swing.JButton();
        copyOutputButton = new javax.swing.JButton();
        clearOutputButton = new javax.swing.JButton();
        GOPanel = new javax.swing.JPanel();
        GOButton = new javax.swing.JRadioButton();
        CDDButton = new javax.swing.JRadioButton();
        noneGORadioButton = new javax.swing.JRadioButton();
        timeLabel = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        apiLabel = new javax.swing.JLabel();
        apiKeyTextField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        accountLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("NHLBI Automated Bioinformatics Extractor - ABE");
        setIconImage(Toolkit.getDefaultToolkit().getImage(
            ABE.class.getResource("NHLBI.jpg"))
    );

    selectInputLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
    selectInputLabel.setText("Select Input Type");

    selectInputPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

    inputButtonGroup.add(accessionInputButton);
    accessionInputButton.setSelected(true);
    accessionInputButton.setText("Accession Number");
    accessionInputButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            accessionInputButtonActionPerformed(evt);
        }
    });

    inputButtonGroup.add(geneInputButton);
    geneInputButton.setText("Gene Symbol");
    geneInputButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            geneInputButtonActionPerformed(evt);
        }
    });

    speciesComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Human", "Rat", "Mouse" }));
    speciesComboBox.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            speciesComboBoxActionPerformed(evt);
        }
    });

    javax.swing.GroupLayout selectInputPanelLayout = new javax.swing.GroupLayout(selectInputPanel);
    selectInputPanel.setLayout(selectInputPanelLayout);
    selectInputPanelLayout.setHorizontalGroup(
        selectInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(selectInputPanelLayout.createSequentialGroup()
            .addContainerGap()
            .addGroup(selectInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(accessionInputButton, javax.swing.GroupLayout.DEFAULT_SIZE, 284, Short.MAX_VALUE)
                .addGroup(selectInputPanelLayout.createSequentialGroup()
                    .addComponent(geneInputButton)
                    .addGap(18, 18, 18)
                    .addComponent(speciesComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addContainerGap())
    );
    selectInputPanelLayout.setVerticalGroup(
        selectInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(selectInputPanelLayout.createSequentialGroup()
            .addContainerGap()
            .addComponent(accessionInputButton)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(selectInputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(geneInputButton)
                .addComponent(speciesComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );

    selectOutputLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
    selectOutputLabel.setText("Select Output Type");

    generalInformationPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "General Information", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 13), new java.awt.Color(0, 0, 255))); // NOI18N

    allGenRadioButton.setSelected(true);
    allGenRadioButton.setText("All");
    allGenRadioButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            allGenRadioButtonActionPerformed(evt);
        }
    });

    noneGenRadioButton.setText("None");
    noneGenRadioButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            noneGenRadioButtonActionPerformed(evt);
        }
    });

    proteinNameCheckBox.setSelected(true);
    proteinNameCheckBox.setText("Protein Name");
    proteinNameCheckBox.addItemListener(new java.awt.event.ItemListener() {
        public void itemStateChanged(java.awt.event.ItemEvent evt) {
            proteinNameCheckBoxItemStateChanged(evt);
        }
    });

    speciesCheckBox.setSelected(true);
    speciesCheckBox.setText("Species");
    speciesCheckBox.addItemListener(new java.awt.event.ItemListener() {
        public void itemStateChanged(java.awt.event.ItemEvent evt) {
            speciesCheckBoxItemStateChanged(evt);
        }
    });

    aaNumberCheckBox.setSelected(true);
    aaNumberCheckBox.setText("Amino Acid Number");
    aaNumberCheckBox.addItemListener(new java.awt.event.ItemListener() {
        public void itemStateChanged(java.awt.event.ItemEvent evt) {
            aaNumberCheckBoxItemStateChanged(evt);
        }
    });

    geneSymbolCheckBox.setSelected(true);
    geneSymbolCheckBox.setText("Gene Symbol");
    geneSymbolCheckBox.addItemListener(new java.awt.event.ItemListener() {
        public void itemStateChanged(java.awt.event.ItemEvent evt) {
            geneSymbolCheckBoxItemStateChanged(evt);
        }
    });

    javax.swing.GroupLayout generalInformationPanelLayout = new javax.swing.GroupLayout(generalInformationPanel);
    generalInformationPanel.setLayout(generalInformationPanelLayout);
    generalInformationPanelLayout.setHorizontalGroup(
        generalInformationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(generalInformationPanelLayout.createSequentialGroup()
            .addContainerGap()
            .addGroup(generalInformationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(allGenRadioButton)
                .addComponent(noneGenRadioButton))
            .addGap(18, 18, 18)
            .addGroup(generalInformationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(speciesCheckBox)
                .addComponent(aaNumberCheckBox)
                .addComponent(proteinNameCheckBox)
                .addComponent(geneSymbolCheckBox))
            .addGap(23, 23, 23))
    );
    generalInformationPanelLayout.setVerticalGroup(
        generalInformationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(generalInformationPanelLayout.createSequentialGroup()
            .addGroup(generalInformationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(allGenRadioButton)
                .addComponent(proteinNameCheckBox))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(generalInformationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(noneGenRadioButton)
                .addComponent(geneSymbolCheckBox))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(aaNumberCheckBox)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(speciesCheckBox)
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );

    accessionNumberPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Accession Number", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 13), new java.awt.Color(0, 0, 255))); // NOI18N

    accessionbuttonGroup.add(refRadioButton);
    refRadioButton.setText("RefSeq");
    refRadioButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            refRadioButtonActionPerformed(evt);
        }
    });

    accessionbuttonGroup.add(spRadioButton);
    spRadioButton.setText("Swiss-Prot");
    spRadioButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            spRadioButtonActionPerformed(evt);
        }
    });

    accessionbuttonGroup.add(noneAccRadioButton);
    noneAccRadioButton.setSelected(true);
    noneAccRadioButton.setText("None");
    noneAccRadioButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            noneAccRadioButtonActionPerformed(evt);
        }
    });

    javax.swing.GroupLayout accessionNumberPanelLayout = new javax.swing.GroupLayout(accessionNumberPanel);
    accessionNumberPanel.setLayout(accessionNumberPanelLayout);
    accessionNumberPanelLayout.setHorizontalGroup(
        accessionNumberPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(accessionNumberPanelLayout.createSequentialGroup()
            .addContainerGap()
            .addGroup(accessionNumberPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(refRadioButton)
                .addComponent(spRadioButton)
                .addComponent(noneAccRadioButton))
            .addContainerGap(195, Short.MAX_VALUE))
    );
    accessionNumberPanelLayout.setVerticalGroup(
        accessionNumberPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(accessionNumberPanelLayout.createSequentialGroup()
            .addComponent(refRadioButton)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(spRadioButton)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(noneAccRadioButton)
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );

    fastaPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "FASTA Amino Acid Sequence", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 13), new java.awt.Color(0, 0, 255))); // NOI18N

    FASTAbuttonGroup.add(withMetadataButton);
    withMetadataButton.setText("with Metadata");
    withMetadataButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            withMetadataButtonActionPerformed(evt);
        }
    });

    FASTAbuttonGroup.add(withoutMetadataButton);
    withoutMetadataButton.setText("without Metadata");
    withoutMetadataButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            withoutMetadataButtonActionPerformed(evt);
        }
    });

    FASTAbuttonGroup.add(noneFastaRadioButton);
    noneFastaRadioButton.setSelected(true);
    noneFastaRadioButton.setText("None");
    noneFastaRadioButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            noneFastaRadioButtonActionPerformed(evt);
        }
    });

    javax.swing.GroupLayout fastaPanelLayout = new javax.swing.GroupLayout(fastaPanel);
    fastaPanel.setLayout(fastaPanelLayout);
    fastaPanelLayout.setHorizontalGroup(
        fastaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(fastaPanelLayout.createSequentialGroup()
            .addContainerGap()
            .addGroup(fastaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(withMetadataButton)
                .addComponent(withoutMetadataButton)
                .addComponent(noneFastaRadioButton))
            .addContainerGap(157, Short.MAX_VALUE))
    );
    fastaPanelLayout.setVerticalGroup(
        fastaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(fastaPanelLayout.createSequentialGroup()
            .addComponent(withMetadataButton)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(withoutMetadataButton)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(noneFastaRadioButton)
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );

    enterInputLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
    enterInputLabel.setText("Enter Input List (space delimited)");

    inputTextField.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            inputTextFieldActionPerformed(evt);
        }
    });

    submitInputButton.setText("Submit");
    submitInputButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            submitInputButtonActionPerformed(evt);
        }
    });

    clearInputButton.setText("Clear");
    clearInputButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            clearInputButtonActionPerformed(evt);
        }
    });

    resetButton.setText("Reset");
    resetButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            resetButtonActionPerformed(evt);
        }
    });

    progressLabel.setText("Progress");

    outputTextArea.setColumns(20);
    outputTextArea.setRows(5);
    jScrollPane1.setViewportView(outputTextArea);

    saveOutputButton.setText("Save");
    saveOutputButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            saveOutputButtonActionPerformed(evt);
        }
    });

    copyOutputButton.setText("Copy");
    copyOutputButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            copyOutputButtonActionPerformed(evt);
        }
    });

    clearOutputButton.setText("Clear");
    clearOutputButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            clearOutputButtonActionPerformed(evt);
        }
    });

    GOPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Ontology and Domain", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 13), new java.awt.Color(0, 0, 255))); // NOI18N

    GObuttonGroup.add(GOButton);
    GOButton.setText("GO Term");
    GOButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            GOButtonActionPerformed(evt);
        }
    });

    GObuttonGroup.add(CDDButton);
    CDDButton.setText("Conserved Domain");
    CDDButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            CDDButtonActionPerformed(evt);
        }
    });

    GObuttonGroup.add(noneGORadioButton);
    noneGORadioButton.setSelected(true);
    noneGORadioButton.setText("None");
    noneGORadioButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            noneGORadioButtonActionPerformed(evt);
        }
    });

    javax.swing.GroupLayout GOPanelLayout = new javax.swing.GroupLayout(GOPanel);
    GOPanel.setLayout(GOPanelLayout);
    GOPanelLayout.setHorizontalGroup(
        GOPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(GOPanelLayout.createSequentialGroup()
            .addContainerGap()
            .addGroup(GOPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(GOButton)
                .addComponent(CDDButton)
                .addComponent(noneGORadioButton))
            .addContainerGap(149, Short.MAX_VALUE))
    );
    GOPanelLayout.setVerticalGroup(
        GOPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(GOPanelLayout.createSequentialGroup()
            .addComponent(GOButton)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(CDDButton)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(noneGORadioButton)
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );

    jLabel1.setText("Created by Trairak Pisitkun, NHLBI, NIH");

    jLabel2.setText("Contact us at PISITKUT@NHLBI.NIH.GOV");

    apiLabel.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
    apiLabel.setText("Enter your NCBI API Key");

    jLabel3.setText("Users can obtain an API key from the Settings page of their NCBI account");

    accountLabel.setText("<HTML>To create an account, visit <a href=\"http://www.ncbi.nlm.nih.gov/account/\" >http://www.ncbi.nlm.nih.gov/account/</a></HTML>");

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(generalInformationPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(selectInputLabel, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(selectInputPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(selectOutputLabel, javax.swing.GroupLayout.Alignment.LEADING))
                    .addGap(9, 9, 9))
                .addGroup(layout.createSequentialGroup()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(GOPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(fastaPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(accessionNumberPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane1)
                .addComponent(inputTextField)
                .addComponent(jProgressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(apiKeyTextField, javax.swing.GroupLayout.Alignment.TRAILING)
                .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createSequentialGroup()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(saveOutputButton)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(copyOutputButton)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(clearOutputButton)
                            .addGap(18, 18, 18)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel2)
                                .addComponent(jLabel1)))
                        .addComponent(enterInputLabel)
                        .addComponent(apiLabel)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addComponent(progressLabel)
                                    .addGap(18, 18, 18)
                                    .addComponent(timeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addComponent(submitInputButton)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(clearInputButton)))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(resetButton)))
                    .addGap(0, 0, Short.MAX_VALUE))
                .addComponent(accountLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 448, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addContainerGap())
    );

    layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {GOPanel, accessionNumberPanel, fastaPanel, generalInformationPanel, selectInputPanel});

    layout.setVerticalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(selectInputLabel)
                .addComponent(apiLabel))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(selectInputPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createSequentialGroup()
                    .addComponent(apiKeyTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(accountLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(selectOutputLabel)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addComponent(enterInputLabel)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(inputTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(clearInputButton)
                        .addComponent(resetButton)
                        .addComponent(submitInputButton))
                    .addGap(18, 18, 18)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(progressLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(timeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGap(4, 4, 4)
                    .addComponent(jProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addComponent(generalInformationPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                .addGroup(layout.createSequentialGroup()
                    .addComponent(accessionNumberPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(fastaPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(GOPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addComponent(jScrollPane1))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(saveOutputButton)
                .addComponent(copyOutputButton)
                .addComponent(clearOutputButton)
                .addComponent(jLabel1))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jLabel2)
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );

    pack();
    }// </editor-fold>//GEN-END:initComponents

private void accessionInputButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_accessionInputButtonActionPerformed
    selectInput = "Accession Number";
}//GEN-LAST:event_accessionInputButtonActionPerformed

private void geneInputButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_geneInputButtonActionPerformed
    selectInput = "Gene Symbol";
}//GEN-LAST:event_geneInputButtonActionPerformed

private void submitInputButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitInputButtonActionPerformed
    String key = apiKeyTextField.getText();
    if (key.isEmpty()) {
        JOptionPane.showMessageDialog(new JFrame(), "Enter your NCBI API Key");
    } else if (isInvalid(key)) {
        JOptionPane.showMessageDialog(new JFrame(), "API key invalid");
    } else {
        progressLabel.setForeground(Color.blue);
        progressLabel.setText("Searching...");
        jProgressBar.setValue(0);
        new Thread() {
            @Override
            public void run() {
                try {
                    submit();
                } catch (IOException ex) {
                    Logger.getLogger(ABE.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }.start();
    }
}//GEN-LAST:event_submitInputButtonActionPerformed

private void speciesComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_speciesComboBoxActionPerformed
    selectSpecies = speciesComboBox.getSelectedItem();
    geneInputButton.setSelected(true);
    selectInput = "Gene Symbol";
}//GEN-LAST:event_speciesComboBoxActionPerformed

private void allGenRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_allGenRadioButtonActionPerformed
    generalInformation = "All";
    proteinNameCheckBox.setSelected(true);
    geneSymbolCheckBox.setSelected(true);
    aaNumberCheckBox.setSelected(true);
    speciesCheckBox.setSelected(true);
    noneGenRadioButton.setSelected(false);
}//GEN-LAST:event_allGenRadioButtonActionPerformed

private void noneGenRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_noneGenRadioButtonActionPerformed
    generalInformation = null;
    proteinNameCheckBox.setSelected(false);
    geneSymbolCheckBox.setSelected(false);
    aaNumberCheckBox.setSelected(false);
    speciesCheckBox.setSelected(false);
    allGenRadioButton.setSelected(false);
}//GEN-LAST:event_noneGenRadioButtonActionPerformed

private void withMetadataButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_withMetadataButtonActionPerformed
    FASTA = "withMetaData";
}//GEN-LAST:event_withMetadataButtonActionPerformed

private void withoutMetadataButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_withoutMetadataButtonActionPerformed
    FASTA = "withoutMetaData";
}//GEN-LAST:event_withoutMetadataButtonActionPerformed

private void noneFastaRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_noneFastaRadioButtonActionPerformed
    FASTA = null;
}//GEN-LAST:event_noneFastaRadioButtonActionPerformed

private void refRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refRadioButtonActionPerformed
    accessionNumber = "RefSeq";
}//GEN-LAST:event_refRadioButtonActionPerformed

private void spRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_spRadioButtonActionPerformed
    accessionNumber = "Swiss-Prot";
}//GEN-LAST:event_spRadioButtonActionPerformed

private void noneAccRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_noneAccRadioButtonActionPerformed
    accessionNumber = null;
}//GEN-LAST:event_noneAccRadioButtonActionPerformed

private void clearInputButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearInputButtonActionPerformed
    inputTextField.setText("");
    progressLabel.setForeground(Color.black);
    progressLabel.setText("Progress");
    jProgressBar.setValue(0);
}//GEN-LAST:event_clearInputButtonActionPerformed

private void clearOutputButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearOutputButtonActionPerformed
    outputTextArea.setText("");
    progressLabel.setForeground(Color.black);
    progressLabel.setText("Progress");
    jProgressBar.setValue(0);
}//GEN-LAST:event_clearOutputButtonActionPerformed

private void copyOutputButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyOutputButtonActionPerformed
    outputTextArea.requestFocusInWindow();
    outputTextArea.selectAll();
    Clipboard cb
            = Toolkit.getDefaultToolkit().
                    getSystemClipboard();
    String s = outputTextArea.getText();
    StringSelection contents
            = new StringSelection(s);
    cb.setContents(contents, null);
}//GEN-LAST:event_copyOutputButtonActionPerformed

private void saveOutputButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveOutputButtonActionPerformed
    JFileChooser fc = new JFileChooser();
    int returnVal = fc.showSaveDialog(ABE.this);
    if (returnVal == JFileChooser.APPROVE_OPTION) {
        PrintStream p = null;
        try {
            File file = fc.getSelectedFile();
            p = new PrintStream(new BufferedOutputStream(new FileOutputStream(file)));
            p.println(outputTextArea.getText());
            progressLabel.setForeground(Color.blue);
            progressLabel.setText(file + " saved");
        } catch (FileNotFoundException ex) {
            Logger.getLogger(ABE.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            p.close();
        }
    }
}//GEN-LAST:event_saveOutputButtonActionPerformed

private void GOButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GOButtonActionPerformed
    goDomain = "GO Term";
    allGenRadioButton.setSelected(false);
    proteinNameCheckBox.setSelected(false);
    geneSymbolCheckBox.setSelected(false);
    aaNumberCheckBox.setSelected(false);
    speciesCheckBox.setSelected(false);
    allGenRadioButton.setEnabled(false);
    proteinNameCheckBox.setEnabled(false);
    geneSymbolCheckBox.setEnabled(false);
    aaNumberCheckBox.setEnabled(false);
    speciesCheckBox.setEnabled(false);
    noneGenRadioButton.setSelected(true);
    generalInformation = null;
    refRadioButton.setEnabled(false);
    spRadioButton.setEnabled(false);
    noneAccRadioButton.setSelected(true);
    accessionNumber = null;
    withMetadataButton.setEnabled(false);
    withoutMetadataButton.setEnabled(false);
    noneFastaRadioButton.setSelected(true);
    FASTA = null;
}//GEN-LAST:event_GOButtonActionPerformed

private void CDDButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CDDButtonActionPerformed
    goDomain = "Conserved Domain";
    allGenRadioButton.setSelected(false);
    proteinNameCheckBox.setSelected(false);
    geneSymbolCheckBox.setSelected(false);
    aaNumberCheckBox.setSelected(false);
    speciesCheckBox.setSelected(false);
    allGenRadioButton.setEnabled(false);
    proteinNameCheckBox.setEnabled(false);
    geneSymbolCheckBox.setEnabled(false);
    aaNumberCheckBox.setEnabled(false);
    speciesCheckBox.setEnabled(false);
    noneGenRadioButton.setSelected(true);
    generalInformation = null;
    refRadioButton.setEnabled(false);
    spRadioButton.setEnabled(false);
    noneAccRadioButton.setSelected(true);
    accessionNumber = null;
    withMetadataButton.setEnabled(false);
    withoutMetadataButton.setEnabled(false);
    noneFastaRadioButton.setSelected(true);
    FASTA = null;
}//GEN-LAST:event_CDDButtonActionPerformed

private void noneGORadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_noneGORadioButtonActionPerformed
    goDomain = null;
    allGenRadioButton.setEnabled(true);
    proteinNameCheckBox.setEnabled(true);
    geneSymbolCheckBox.setEnabled(true);
    aaNumberCheckBox.setEnabled(true);
    speciesCheckBox.setEnabled(true);
    refRadioButton.setEnabled(true);
    spRadioButton.setEnabled(true);
    withMetadataButton.setEnabled(true);
    withoutMetadataButton.setEnabled(true);
}//GEN-LAST:event_noneGORadioButtonActionPerformed

private void resetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetButtonActionPerformed
    inputTextField.setText("");
    outputTextArea.setText("");
    progressLabel.setForeground(Color.black);
    progressLabel.setText("Progress");
    jProgressBar.setValue(0);
}//GEN-LAST:event_resetButtonActionPerformed

private void proteinNameCheckBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_proteinNameCheckBoxItemStateChanged
    if (evt.getStateChange() == java.awt.event.ItemEvent.SELECTED) {
        proteinName = "selected";
        noneGenRadioButton.setSelected(false);
        generalInformation = "All";
    } else {
        proteinName = null;
        allGenRadioButton.setSelected(false);
    }
}//GEN-LAST:event_proteinNameCheckBoxItemStateChanged

private void geneSymbolCheckBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_geneSymbolCheckBoxItemStateChanged
    if (evt.getStateChange() == java.awt.event.ItemEvent.SELECTED) {
        geneSymbol = "selected";
        noneGenRadioButton.setSelected(false);
        generalInformation = "All";
    } else {
        geneSymbol = null;
        allGenRadioButton.setSelected(false);
    }
}//GEN-LAST:event_geneSymbolCheckBoxItemStateChanged

private void aaNumberCheckBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_aaNumberCheckBoxItemStateChanged
    if (evt.getStateChange() == java.awt.event.ItemEvent.SELECTED) {
        aaNumber = "selected";
        noneGenRadioButton.setSelected(false);
        generalInformation = "All";
    } else {
        aaNumber = null;
        allGenRadioButton.setSelected(false);
    }
}//GEN-LAST:event_aaNumberCheckBoxItemStateChanged

private void speciesCheckBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_speciesCheckBoxItemStateChanged
    if (evt.getStateChange() == java.awt.event.ItemEvent.SELECTED) {
        speciesBox = "selected";
        noneGenRadioButton.setSelected(false);
        generalInformation = "All";
    } else {
        speciesBox = null;
        allGenRadioButton.setSelected(false);
    }
}//GEN-LAST:event_speciesCheckBoxItemStateChanged

private void inputTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputTextFieldActionPerformed
    progressLabel.setForeground(Color.blue);
    progressLabel.setText("Searching...");
    jProgressBar.setValue(0);
    new Thread() {
        @Override
        public void run() {
            try {
                submit();
            } catch (IOException ex) {
                Logger.getLogger(ABE.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }.start();
}//GEN-LAST:event_inputTextFieldActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(() -> {
            new ABE().setVisible(true);
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton CDDButton;
    private javax.swing.ButtonGroup FASTAbuttonGroup;
    private javax.swing.JRadioButton GOButton;
    private javax.swing.JPanel GOPanel;
    private javax.swing.ButtonGroup GObuttonGroup;
    private javax.swing.JCheckBox aaNumberCheckBox;
    private javax.swing.JRadioButton accessionInputButton;
    private javax.swing.JPanel accessionNumberPanel;
    private javax.swing.ButtonGroup accessionbuttonGroup;
    private javax.swing.JLabel accountLabel;
    private javax.swing.JRadioButton allGenRadioButton;
    private javax.swing.JTextField apiKeyTextField;
    private javax.swing.JLabel apiLabel;
    private javax.swing.JButton clearInputButton;
    private javax.swing.JButton clearOutputButton;
    private javax.swing.JButton copyOutputButton;
    private javax.swing.JLabel enterInputLabel;
    private javax.swing.JPanel fastaPanel;
    private javax.swing.JRadioButton geneInputButton;
    private javax.swing.JCheckBox geneSymbolCheckBox;
    private javax.swing.JPanel generalInformationPanel;
    private javax.swing.ButtonGroup inputButtonGroup;
    private javax.swing.JTextField inputTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JProgressBar jProgressBar;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JRadioButton noneAccRadioButton;
    private javax.swing.JRadioButton noneFastaRadioButton;
    private javax.swing.JRadioButton noneGORadioButton;
    private javax.swing.JRadioButton noneGenRadioButton;
    private javax.swing.JTextArea outputTextArea;
    private javax.swing.JLabel progressLabel;
    private javax.swing.JCheckBox proteinNameCheckBox;
    private javax.swing.JRadioButton refRadioButton;
    private javax.swing.JButton resetButton;
    private javax.swing.JButton saveOutputButton;
    private javax.swing.JLabel selectInputLabel;
    private javax.swing.JPanel selectInputPanel;
    private javax.swing.JLabel selectOutputLabel;
    private javax.swing.JRadioButton spRadioButton;
    private javax.swing.JCheckBox speciesCheckBox;
    private javax.swing.JComboBox speciesComboBox;
    private javax.swing.JButton submitInputButton;
    private javax.swing.JLabel timeLabel;
    private javax.swing.JRadioButton withMetadataButton;
    private javax.swing.JRadioButton withoutMetadataButton;
    // End of variables declaration//GEN-END:variables

    private void submit() throws IOException {
        api_key = "&api_key=" + apiKeyTextField.getText();
        String allInputID = inputTextField.getText();
        //Count allInputID
        String[] arrayInputID = allInputID.split("\\s");
        int numberInputID = arrayInputID.length;

        //Print header
        String inputIDHead = "Input";
        String nameHead = new String();
        String geneHead = new String();
        String aaHead = new String();
        String speciesHead = new String();
        String accessionHead = new String();
        String sequenceHead = new String();
        if (generalInformation != null) {
            if (proteinName == "selected") {
                nameHead = "Protein Name" + "\t";
            }
            if (geneSymbol == "selected") {
                geneHead = "Gene Symbol" + "\t";
            }
            if (aaNumber == "selected") {
                aaHead = "Amino Acid Number" + "\t";
            }
            if (speciesBox == "selected") {
                speciesHead = "Species" + "\t";
            }
        }
        if (accessionNumber != null) {
            if (accessionNumber == "RefSeq") {
                accessionHead = "RefSeq Number" + "\t";
            }
            if (accessionNumber == "Swiss-Prot") {
                accessionHead = "Swiss-Prot Number" + "\t";
            }
        }
        if (FASTA != null) {
            sequenceHead = "Sequence";
        }
        if (goDomain == null) {
            outputTextArea.append(inputIDHead + "\t" + nameHead + geneHead + aaHead + speciesHead + accessionHead + sequenceHead + "\n");
            outputTextArea.setCaretPosition(outputTextArea.getDocument().getLength());
        } else {
            if (goDomain == "GO Term") {
                outputTextArea.append("Input" + "\tGene Symbol" + "\tProtein Name" + "\tGO category" + "\tGO Term" + "\n");
                outputTextArea.setCaretPosition(outputTextArea.getDocument().getLength());
            }
            if (goDomain == "Conserved Domain") {
                outputTextArea.append("Input" + "\tCDD Id" + "\tName/Type" + "\tNote" + "\n");
                outputTextArea.setCaretPosition(outputTextArea.getDocument().getLength());
            }
        }

        poolComponent = new ArrayList<>();
        poolFunction = new ArrayList<>();
        poolProcess = new ArrayList<>();
        poolCDD = new ArrayList<>();
        int progress = 0;
        int numberInputIDLeft;
        long startTime;
        long endTime;
        long time;
        long sumTime = 0;
        long averageTime;
        long timeLeft;

        for (String inputID : arrayInputID) {
            String[] generalInformationArray;
            String name = new String();
            String gene = new String();
            String aa = new String();
            String species = new String();
            String accession = new String();
            String sequence = new String();

            startTime = System.currentTimeMillis();

            if (selectInput == "Accession Number") {
                if (generalInformation != null) {
                    generalInformationArray = callNCBI(inputID);
                    //Acquire data
                    if (proteinName == "selected") {
                        name = generalInformationArray[1] + "\t";
                    }
                    if (geneSymbol == "selected") {
                        gene = generalInformationArray[3] + "\t";
                    }
                    if (aaNumber == "selected") {
                        aa = generalInformationArray[0] + "\t";
                    }
                    if (speciesBox == "selected") {
                        species = generalInformationArray[2] + "\t";
                    }
                }
                if (accessionNumber != null) {
                    generalInformationArray = callNCBI(inputID);
                    if (accessionNumber == "RefSeq") {
                        if (generalInformationArray[3] != null) {
                            accession = callRefSeq(generalInformationArray[3], generalInformationArray[2].replace(" ", "+")) + "\t";
                        } else {
                            accession = null;
                        }
                    }
                    if (accessionNumber == "Swiss-Prot") {
                        if (generalInformationArray[3] != null) {
                            accession = callSwissProt(generalInformationArray[3], generalInformationArray[2].replace(" ", "+")) + "\t";
                        } else {
                            accession = null;
                        }
                    }
                }
                if (FASTA != null) {
                    String[] fastaArray = callFASTA(inputID);
                    if (FASTA == "withMetaData") {
                        sequence = fastaArray[0] + " " + fastaArray[1];
                    }
                    if (FASTA == "withoutMetaData") {
                        sequence = fastaArray[1];
                    }
                }
                if (goDomain != null) {
                    if (goDomain == "GO Term") {
                        String str = callGo(callNCBI(inputID)[4]);
                        String geneProtein = getGeneProtein(str);
                        getComponent(str, inputID, geneProtein);
                        getFunction(str, inputID, geneProtein);
                        getProcess(str, inputID, geneProtein);
                    }
                    if (goDomain == "Conserved Domain") {
                        String str = callCDD(inputID);
                        getCDD(str, inputID);
                    }
                }
            } else { //if (selectInput == "Gene Symbol")
                String accessionRefSeq = callRefSeq(inputID, selectSpecies);
                if (generalInformation != null) {
                    generalInformationArray = callNCBI(accessionRefSeq);
                    //Acquire data
                    if (proteinName == "selected") {
                        name = generalInformationArray[1] + "\t";
                    }
                    if (geneSymbol == "selected") {
                        gene = generalInformationArray[3] + "\t";
                    }
                    if (aaNumber == "selected") {
                        aa = generalInformationArray[0] + "\t";
                    }
                    if (speciesBox == "selected") {
                        species = generalInformationArray[2] + "\t";
                    }
                }
                if (accessionNumber != null) {
                    if (accessionNumber == "RefSeq") {
                        accession = accessionRefSeq + "\t";
                    }
                    if (accessionNumber == "Swiss-Prot") {
                        accession = callSwissProt(inputID, selectSpecies) + "\t";
                    }
                }
                if (FASTA != null) {
                    String[] fastaArray = callFASTA(accessionRefSeq);
                    if (FASTA == "withMetaData") {
                        sequence = fastaArray[0] + " " + fastaArray[1];
                    }
                    if (FASTA == "withoutMetaData") {
                        sequence = fastaArray[1];
                    }
                }
                if (goDomain != null) {
                    if (goDomain == "GO Term") {
                        String str = callGo(callNCBI(accessionRefSeq)[4]);
                        String geneProtein = getGeneProtein(str);
                        getComponent(str, accessionRefSeq, geneProtein);
                        getFunction(str, accessionRefSeq, geneProtein);
                        getProcess(str, accessionRefSeq, geneProtein);
                    }
                    if (goDomain == "Conserved Domain") {
                        String str = callCDD(accessionRefSeq);
                        getCDD(str, inputID);
                    }
                }
            }
            if (goDomain == null) {
                outputTextArea.append(inputID + "\t" + name + gene + aa + species + accession + sequence + "\n");
                outputTextArea.setCaretPosition(outputTextArea.getDocument().getLength());
            }
            //Progress bar
            progress++;
            int percentProgress = (progress * 100) / numberInputID;
            jProgressBar.setValue(percentProgress);

            endTime = System.currentTimeMillis();
            time = (endTime - startTime);
//        System.out.println(time);
            numberInputIDLeft = numberInputID - progress;
            sumTime = sumTime + time;
            averageTime = sumTime / progress;
            timeLeft = (numberInputIDLeft * averageTime);
            timeReport(timeLeft);
        }
        if (goDomain == "GO Term") {
            progressLabel.setText("Calculating GO Term Statistic...");
            //Statistic
            statistic(poolComponent, "component");
            statistic(poolFunction, "function");
            statistic(poolProcess, "process");
        }
        if (goDomain == "Conserved Domain") {
            progressLabel.setText("Calculating Conserved Domain Statistic...");
            //Statistic
            statistic(poolCDD, "CDD");
        }

        timeLabel.setText("");
        progressLabel.setForeground(Color.red);
        progressLabel.setText("Completed");

    }

//Call NCBI text
    private String[] callNCBI(String inputID) throws IOException {
        long time1;
        long time2;
        long diff;
        time1 = System.currentTimeMillis();
        String[] generalInformationArray = new String[5];
        boolean success = false;
        int j = 0;
        while (!success && j < 10) {
            j++;
            try {
                time2 = System.currentTimeMillis();
                diff = time2 - time1;
                time1 = time2;
                if (diff < 50) {
                    try {
                        Thread.sleep(50 - diff);
                    } catch (InterruptedException ex1) {
                        Logger.getLogger(ABE.class.getName()).log(Level.SEVERE, null, ex1);
                    }
                }
                URL ncbi = new URL("https://eutils.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi?db=protein&id=" + inputID + "&rettype=gp&retmode=text" + api_key); //Call NCBI protein
                try (BufferedReader in = new BufferedReader(
                        new InputStreamReader(
                                ncbi.openStream()))) {
                    String inputLine;
                    while ((inputLine = in.readLine()) != null) {
                        if (inputLine.startsWith("LOCUS")) { //aa number
                            String[] arrayLocus = inputLine.split(" ");
                            int index = 0;
                            for (String locus : arrayLocus) {
                                if (!locus.isEmpty()) {
                                    index++;
                                    if (index == 3) {
                                        generalInformationArray[0] = locus;
                                        break;
                                    }
                                }
                            }
                        } else if (inputLine.startsWith("DEFINITION")) { //DEFINITION
                            StringBuilder rawDefinition = new StringBuilder();
                            do {
                                if (inputLine.startsWith("ACCESSION")) {
                                    break;
                                }
                                rawDefinition.append(inputLine.trim()).append(" ");
                            } while ((inputLine = in.readLine()) != null);
                            String definition = rawDefinition.toString();
                            if (definition.endsWith("]. ")) {
                                generalInformationArray[1] = definition.substring(0, definition.lastIndexOf("[") - 1).replace("DEFINITION  ", "");
                            } else if (definition.endsWith(". ")) {
                                generalInformationArray[1] = definition.substring(0, definition.length() - 2).replace("DEFINITION  ", "");
                            } else {
                                generalInformationArray[1] = definition.replace("DEFINITION  ", "");
                            }
                        } else if (inputLine.startsWith("  ORGANISM")) { //species
                            generalInformationArray[2] = inputLine.replace("  ORGANISM  ", "");
                        } else if (inputLine.startsWith("                     /gene=")) { //gene name
                            generalInformationArray[3] = inputLine.replace("                     /gene=", "").replace("\"", "");
                        } else if (inputLine.startsWith("                     /db_xref=\"GeneID:")) { //GeneID
                            generalInformationArray[4] = inputLine.replace("                     /db_xref=\"GeneID:", "").replace("\"", "");
                        }
                    }
                }
                success = true;
            } catch (MalformedURLException e) {
            } catch (IOException e) {
                System.out.println("inputID = " + inputID + " success = false");
                success = false;
                try {
                    Thread.sleep(1000 / 10);
                } catch (InterruptedException ex) {
                    Logger.getLogger(ABE.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        System.out.println("generalInformationArray[4] = " + generalInformationArray[4]);
        return generalInformationArray;
    }

//Call RefSeq
    private String callRefSeq(String inputID, Object selectSpecies) throws IOException {
        long time1;
        long time2;
        long diff;
        time1 = System.currentTimeMillis();
        StringBuilder str = null;
        boolean success = false;
        int j = 0;
        while (!success && j < 10) {
            j++;
            str = new StringBuilder();
            try {
                time2 = System.currentTimeMillis();
                diff = time2 - time1;
                time1 = time2;
                if (diff < 50) {
                    try {
                        Thread.sleep(50 - diff);
                    } catch (InterruptedException ex1) {
                        Logger.getLogger(ABE.class.getName()).log(Level.SEVERE, null, ex1);
                    }
                }
                URL ncbi = new URL("https://eutils.ncbi.nlm.nih.gov/entrez/eutils/esearch.fcgi?db=protein&term=" + inputID + "[gene]+AND+" + selectSpecies + "[orgn]+AND+srcdb_refseq[prop]&idtype=acc" + api_key); //Call RefSeq
                try (BufferedReader in = new BufferedReader(
                        new InputStreamReader(
                                ncbi.openStream()))) {
                    String inputLine;
                    while ((inputLine = in.readLine()) != null) {
                        str.append(inputLine.trim()).append(" ");
                    }
                }
                success = true;
            } catch (MalformedURLException e) {
            } catch (IOException e) {
                System.out.println("inputID = " + inputID + " success = false");
                success = false;
                try {
                    Thread.sleep(1000 / 10);
                } catch (InterruptedException ex) {
                    Logger.getLogger(ABE.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        //countRefSeqID(str);
        String refSeqCheck;
        String finalRefSeqID = null;
        int startRefSeq = 0;
        int endRefSeq = 0;
        checkLoop:
        while (startRefSeq != -1) {
            startRefSeq = str.indexOf("<Id>", endRefSeq);
            if (startRefSeq != -1) {
                endRefSeq = str.indexOf("</Id>", startRefSeq + 4);
                if (endRefSeq != -1) {
                    refSeqCheck = str.substring(startRefSeq + 4, endRefSeq);
                    String geneCheck = callNCBI(refSeqCheck)[3];
                    System.out.println(inputID + "\t" + geneCheck);
                    if (inputID.toUpperCase().equals(geneCheck.toUpperCase())) {
                        finalRefSeqID = refSeqCheck;
                        break;
                    }
                }
            }
        }
        return finalRefSeqID;
    }

//Call Swiss-Prot
    private String callSwissProt(String inputID, Object selectSpecies) throws IOException {
        long time1;
        long time2;
        long diff;
        time1 = System.currentTimeMillis();
        StringBuilder str = null;
        boolean success = false;
        int j = 0;
        while (!success && j < 10) {
            j++;
            str = new StringBuilder();
            try {
                time2 = System.currentTimeMillis();
                diff = time2 - time1;
                time1 = time2;
                if (diff < 50) {
                    try {
                        Thread.sleep(50 - diff);
                    } catch (InterruptedException ex1) {
                        Logger.getLogger(ABE.class.getName()).log(Level.SEVERE, null, ex1);
                    }
                }
                URL ncbi = new URL("https://eutils.ncbi.nlm.nih.gov/entrez/eutils/esearch.fcgi?db=protein&term=" + inputID + "[gene]+AND+" + selectSpecies + "[orgn]+AND+srcdb_swiss-prot[prop]&idtype=acc" + api_key); //Call SwissProt
                try (BufferedReader in = new BufferedReader(
                        new InputStreamReader(
                                ncbi.openStream()))) {
                    String inputLine;
                    while ((inputLine = in.readLine()) != null) {
                        str.append(inputLine.trim()).append(" ");
                    }
                }
                success = true;
            } catch (MalformedURLException e) {
            } catch (IOException e) {
                System.out.println("inputID = " + inputID + " success = false");
                success = false;
                try {
                    Thread.sleep(1000 / 10);
                } catch (InterruptedException ex) {
                    Logger.getLogger(ABE.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        //countSwissProtID(str);
        String spCheck;
        String finalSp = null;
        int startSp = 0;
        int endSp = 0;
        checkLoop:
        while (startSp != -1) {
            startSp = str.indexOf("<Id>", endSp);
            if (startSp != -1) {
                endSp = str.indexOf("</Id>", startSp + 4);
                if (endSp != -1) {
                    spCheck = str.substring(startSp + 4, endSp);
                    String geneCheck = callNCBI(spCheck)[3];
                    System.out.println(inputID + "\t" + geneCheck);
                    if (inputID.toUpperCase().equals(geneCheck.toUpperCase())) {
                        finalSp = spCheck;
                        break;
                    }
                }
            }
        }
        System.out.println(finalSp);
        return finalSp;
    }

//Call FASTA
    private String[] callFASTA(String inputID) throws IOException {
        long time1;
        long time2;
        long diff;
        time1 = System.currentTimeMillis();
        String[] fastaArray = new String[2];
        boolean success = false;
        int j = 0;
        while (!success && j < 10) {
            j++;
            StringBuilder sequence = new StringBuilder();
            try {
                time2 = System.currentTimeMillis();
                diff = time2 - time1;
                time1 = time2;
                if (diff < 50) {
                    try {
                        Thread.sleep(50 - diff);
                    } catch (InterruptedException ex1) {
                        Logger.getLogger(ABE.class.getName()).log(Level.SEVERE, null, ex1);
                    }
                }
                URL ncbiFASTA = new URL("https://eutils.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi?db=protein&id=" + inputID + "&rettype=fasta&retmode=text" + api_key);
                try (BufferedReader in = new BufferedReader(
                        new InputStreamReader(
                                ncbiFASTA.openStream()))) {
                    String inputLine;
                    while ((inputLine = in.readLine()) != null) {
                        if (inputLine.startsWith(">")) { //MetaData
                            fastaArray[0] = inputLine;
                        } else {
                            sequence.append(inputLine);
                        }
                    }
                    if (!sequence.toString().isEmpty()) {
                        fastaArray[1] = sequence.toString();
                    }
                }
                success = true;
            } catch (MalformedURLException e) {
            } catch (IOException e) {
                System.out.println("inputID = " + inputID + " success = false");
                success = false;
                try {
                    Thread.sleep(1000 / 10);
                } catch (InterruptedException ex) {
                    Logger.getLogger(ABE.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        return fastaArray;
    }

//Call Go
    private String callGo(String inputID) throws IOException {
        long time1;
        long time2;
        long diff;
        time1 = System.currentTimeMillis();
        StringBuilder str = new StringBuilder();
        if (inputID != null) {
            boolean success = false;
            int i = 0;
            while (!success && i < 10) {
                i++;
                str = new StringBuilder();
                try {
                    time2 = System.currentTimeMillis();
                    diff = time2 - time1;
                    time1 = time2;
                    if (diff < 50) {
                        try {
                            Thread.sleep(50 - diff);
                        } catch (InterruptedException ex1) {
                            Logger.getLogger(ABE.class.getName()).log(Level.SEVERE, null, ex1);
                        }
                    }
//                    System.out.println("https://eutils.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi?db=gene&id=" + inputID + "&mode=text");
                    URL ncbi = new URL("https://eutils.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi?db=gene&id=" + inputID + "&mode=text" + api_key);
                    //Get lines containing "subsection go" and "amigo.geneontology.org"
                    try (BufferedReader in = new BufferedReader(new InputStreamReader(ncbi.openStream()))) {
                        //Get lines containing "subsection go" and "amigo.geneontology.org"
                        String inputLine;
                        while ((inputLine = in.readLine()) != null) {
                            str.append(inputLine);
                        }
                    }
                    success = true;
                } catch (MalformedURLException e) {
                } catch (IOException e) {
                    System.out.println("inputID = " + inputID + " success = false");
                    success = false;
                    try {
                        Thread.sleep(1000 / 10);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(ABE.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        }
        return str.toString();
    }

//Get Gene Symbol and Protein Name from Entrez Gene
    private String getGeneProtein(String str) {
        String gene = null;
        String protein = null;
        String geneProtein;
        int officialSymbol = str.indexOf("\"Official Symbol\"", 0);
        int interimSymbol = str.indexOf("\"Interim Symbol\"", 0);
        if (officialSymbol != -1) {
            int endGene = str.indexOf("\"        }", officialSymbol);
            int startGene = str.lastIndexOf("\"", endGene - 1) + 1;
            gene = str.substring(startGene, endGene);
        } else if (interimSymbol != -1) {
            int endGene = str.indexOf("\"        }", interimSymbol);
            int startGene = str.lastIndexOf("\"", endGene - 1) + 1;
            gene = str.substring(startGene, endGene);
        }
        int officialFullName = str.indexOf("\"Official Full Name\"", 0);
        int interimFullName = str.indexOf("\"Interim Full Name\"", 0);
        if (officialFullName != -1) {
            int endProtein = str.indexOf("\"        }", officialFullName);
            int startProtein = str.lastIndexOf("\"", endProtein - 1) + 1;
            protein = str.substring(startProtein, endProtein);
        } else if (interimFullName != -1) {
            int endProtein = str.indexOf("\"        }", interimFullName);
            int startProtein = str.lastIndexOf("\"", endProtein - 1) + 1;
            protein = str.substring(startProtein, endProtein);
        }
        geneProtein = "\t" + gene + "\t" + protein;
//        System.out.println(geneProtein);
        return geneProtein;
    }

//Get GO_component
    private void getComponent(String str, String inputReport, String geneProtein) {
        //Check exist GO_component
        int startComponent = str.indexOf("label \"Component\"", 0);
        if (startComponent != -1) {
            //If have GO_component
            int endComponent = str.indexOf("}  }", startComponent);
            String rawComponent = str.substring(startComponent, endComponent);
            //Create non-redundant array of GO terms
            String[] componentArray = createGoArray(rawComponent);
            //Get multiline output
            for (String component : componentArray) {
                outputTextArea.append(inputReport + geneProtein + "\tcomponent" + "\t" + component + "\n");
                outputTextArea.setCaretPosition(outputTextArea.getDocument().getLength());
                poolComponent.add(component);
            }
            //If do not have GO_component
        } else {
            poolComponent.add("not classified");
            outputTextArea.append(inputReport + geneProtein + "\tcomponent" + "\tnot classified" + "\n");
            outputTextArea.setCaretPosition(outputTextArea.getDocument().getLength());
        } //Close If do not have GO_component
    }

//Get GO_function
    private void getFunction(String str, String inputReport, String geneProtein) {
        //Check exist GO_function
        int startFunction = str.indexOf("label \"Function\"", 0);
        if (startFunction != -1) {
            //If have GO_function
            int endFunction = str.indexOf("}        }", startFunction);
            String rawFunction = str.substring(startFunction, endFunction);
//            System.out.println(rawFunction);
            //Create non-redundant array of GO terms
            String[] functionArray = createGoArray(rawFunction);
            //Get multiline output
            for (String function : functionArray) {
                outputTextArea.append(inputReport + geneProtein + "\tfunction" + "\t" + function + "\n");
                outputTextArea.setCaretPosition(outputTextArea.getDocument().getLength());
                poolFunction.add(function);
            }
            //If do not have GO_function
        } else {
            poolFunction.add("not classified");
            outputTextArea.append(inputReport + geneProtein + "\tfunction" + "\tnot classified" + "\n");
            outputTextArea.setCaretPosition(outputTextArea.getDocument().getLength());
        } //Close If do not have GO_function
    }

//Get GO_process
    private void getProcess(String str, String inputReport, String geneProtein) {
        //Check exist GO_process
        int startProcess = str.indexOf("label \"Process\"", 0);
        if (startProcess != -1) {
            //If have GO_process
            int endProcess = str.indexOf("}        }", startProcess);
            String rawProcess = str.substring(startProcess, endProcess);
            //Create non-redundant array of GO terms
            String[] processArray = createGoArray(rawProcess);
            //Get multiline output
            for (String process : processArray) {
                outputTextArea.append(inputReport + geneProtein + "\tprocess" + "\t" + process + "\n");
                outputTextArea.setCaretPosition(outputTextArea.getDocument().getLength());
                poolProcess.add(process);
            }
            //If do not have GO_process
        } else {
            poolProcess.add("not classified");
            outputTextArea.append(inputReport + geneProtein + "\tprocess" + "\tnot classified" + "\n");
            outputTextArea.setCaretPosition(outputTextArea.getDocument().getLength());
        } //Close If do not have GO_process
    }

//Create non-redundant array of GO terms
    private String[] createGoArray(String str) {
        LinkedHashSet<String> termSet = new LinkedHashSet<>();
        int startTerm = 0;
        int endTerm = 0;
        while (startTerm != -1) {
            startTerm = str.indexOf("anchor \"", endTerm);
            if (startTerm != -1) {
                endTerm = str.indexOf("\",", startTerm);
                termSet.add(str.substring(startTerm + 8, endTerm));
            }
        }
        String[] termArray = termSet.toArray(new String[0]);
//        System.out.println(termSet);
        return termArray;
    }

//Statistic
    private void statistic(ArrayList<String> list, String category) {
        //Print header
        if (category.equals("component")) {
            outputTextArea.append("\nStatistic: Component" + "\n");
            outputTextArea.setCaretPosition(outputTextArea.getDocument().getLength());
        }
        if (category.equals("function")) {
            outputTextArea.append("\nStatistic: Function" + "\n");
            outputTextArea.setCaretPosition(outputTextArea.getDocument().getLength());
        }
        if (category.equals("process")) {
            outputTextArea.append("\nStatistic: Process" + "\n");
            outputTextArea.setCaretPosition(outputTextArea.getDocument().getLength());
        }
        if (category.equals("CDD")) {
            outputTextArea.append("\nStatistic: Conserved domain" + "\n");
            outputTextArea.setCaretPosition(outputTextArea.getDocument().getLength());
        }
        //Count and sort
        TreeMap<String, Integer> m = new TreeMap<>();
        list.forEach((a) -> {
            Integer freq = m.get(a);
            m.put(a, (freq == null) ? 1 : freq + 1);
        });
        ArrayList<Map.Entry<String, Integer>> listMap = new ArrayList<>(m.entrySet());
        Collections.sort(listMap, (Map.Entry<String, Integer> o1, Map.Entry<String, Integer> o2) -> o2.getValue().compareTo(o1.getValue()));
        int totalCount = 0;
        //Print the sorted list
        totalCount = listMap.stream().map((entry) -> {
            int count = entry.getValue();
            outputTextArea.append(entry.getKey() + "\t" + count + "\n");
            return count;
        }).map((count) -> {
            outputTextArea.setCaretPosition(outputTextArea.getDocument().getLength());
            return count;
        }).map((count) -> count).reduce(totalCount, Integer::sum);
        //Print totalcount
        outputTextArea.append("Total = " + "\t" + totalCount + "\n");
        outputTextArea.setCaretPosition(outputTextArea.getDocument().getLength());
    }

    private void timeReport(long timeLeft) {
        long minutes;
        long seconds;
        String min;
        String sec;
        minutes = timeLeft / 60000;
        seconds = (timeLeft % 60000) / 1000;
        min = Long.toString(minutes);
        if (seconds < 10) {
            sec = 0 + Long.toString(seconds);
        } else {
            sec = Long.toString(seconds);
        }
        timeLabel.setForeground(Color.blue);
        timeLabel.setText(min + ":" + sec + " min remaining");
    }

//Call CDD
    private String callCDD(String inputID) throws IOException {
        long time1;
        long time2;
        long diff;
        time1 = System.currentTimeMillis();
        StringBuilder str = new StringBuilder();
        if (inputID != null) {
            boolean success = false;
            int i = 0;
            while (!success && i < 10) {
                i++;
                str = new StringBuilder();
                try {
                    time2 = System.currentTimeMillis();
                    diff = time2 - time1;
                    time1 = time2;
                    if (diff < 50) {
                        try {
                            Thread.sleep(50 - diff);
                        } catch (InterruptedException ex1) {
                            Logger.getLogger(ABE.class.getName()).log(Level.SEVERE, null, ex1);
                        }
                    }
                    URL ncbi = new URL("https://eutils.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi?db=protein&id=" + inputID + "&rettype=gp&retmode=text" + api_key); //Call NCBI protein
                    try (BufferedReader in = new BufferedReader(
                            new InputStreamReader(
                                    ncbi.openStream()))) {
                        String inputLine;
                        while ((inputLine = in.readLine()) != null) {
                            if (inputLine.startsWith("FEATURES")) {
                                do {
                                    if (!String.valueOf(inputLine.charAt(5)).equals(" ")) {
                                        if (inputLine.startsWith("     Region")) {
                                            str.append(inputLine.replace("Region", "<a>RegionSite</a>").trim()).append(" ");
                                        } else if (inputLine.startsWith("     Site")) {
                                            str.append(inputLine.replace("Site", "<a>RegionSite</a>").trim()).append(" ");
                                        } else {
                                            str.append("<a>").append(inputLine.trim()).append(" ");
                                            if (inputLine.startsWith("ORIGIN")) {
                                                break;
                                            }
                                        }
                                    } else {
                                        str.append(inputLine.trim()).append(" ");
                                    }
                                } while ((inputLine = in.readLine()) != null);
                            }
                        }
                    }
                    success = true;
                } catch (MalformedURLException e) {
                } catch (IOException e) {
                    System.out.println("inputID = " + inputID + " success = false");
                    success = false;
                    try {
                        Thread.sleep(1000 / 10);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(ABE.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        }
        return str.toString();
    }

//Get CDD
    private void getCDD(String str, String inputReport) {
        LinkedHashSet<String> cddSet = new LinkedHashSet<>();
        int startEachRegionSite = 0;
        int endEachRegionSite = 0;
        //Process each RegionSite
        while (startEachRegionSite != -1) {
            startEachRegionSite = str.indexOf("RegionSite</a>", endEachRegionSite);
            if (startEachRegionSite != -1) {
                endEachRegionSite = str.indexOf("<a>", startEachRegionSite);
                String regionSite = str.substring(startEachRegionSite, endEachRegionSite);
                boolean hasCDD = regionSite.contains("/db_xref=\"CDD:");
                if (hasCDD) {
                    String cddId = regionSite.substring(regionSite.indexOf("/db_xref=\"CDD:")).replace("/db_xref=\"CDD:", "").replace("\"", "").trim();
                    int startRegion = regionSite.indexOf("/region_name=");
                    int startSite = regionSite.indexOf("/site_type=");
                    String nameType;
                    if (startRegion != -1) {
                        nameType = regionSite.substring(startRegion, regionSite.indexOf("\"", startRegion + 14)).replace("/region_name=", "").replace("\"", "").trim();
                    } else {
                        nameType = regionSite.substring(startSite, regionSite.indexOf("\"", startSite + 12)).replace("/site_type=", "").replace("\"", "").trim();
                    }
                    int startNote = regionSite.indexOf("/note=");
                    String note;
                    if (startNote != -1) {
                        note = regionSite.substring(startNote, regionSite.indexOf("\"", startNote + 7)).replace("/note=", "").replace("\"", "").trim();
                    } else {
                        note = nameType;
                    }
                    cddSet.add(cddId + "\t" + nameType + "\t" + note);
                }
            }
        }
        if (cddSet != null) {
            cddSet.stream().map((strings) -> {
                outputTextArea.append(inputReport + "\t" + strings + "\n");
                return strings;
            }).map((strings) -> {
                outputTextArea.setCaretPosition(outputTextArea.getDocument().getLength());
                return strings;
            }).forEachOrdered((strings) -> {
                poolCDD.add(strings);
            });
        } else {
            outputTextArea.append(inputReport + "\tnull" + "\tnull" + "\tnull" + "\n");
            outputTextArea.setCaretPosition(outputTextArea.getDocument().getLength());
        }
    }
//Last edit 12/22/2008

    private boolean isInvalid(String key) {
        boolean isInvalid;
        try {
            URL eutils = new URL("https://www.ncbi.nlm.nih.gov/entrez/eutils/einfo.fcgi?db=pubmed&api_key=" + key);
            BufferedReader in = new BufferedReader(new InputStreamReader(eutils.openStream()));
            in.close();
            isInvalid = false;
        } catch (MalformedURLException ex) {
            Logger.getLogger(ABE.class.getName()).log(Level.SEVERE, null, ex);
            isInvalid = true;
        } catch (IOException ex) {
            Logger.getLogger(ABE.class.getName()).log(Level.SEVERE, null, ex);
            isInvalid = true;
        }
        return isInvalid;
    }
}
