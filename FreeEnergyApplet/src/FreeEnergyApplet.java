/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * FreeEnergyForm.java
 *
 * Created on Jul 15, 2011, 2:26:02 PM
 */
import java.awt.Color;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;
import java.io.*;
import java.net.URL;
import java.net.URLConnection;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author pisitkut
 */
public class FreeEnergyApplet extends javax.swing.JApplet {

    private double urineNaClConc;
    private double urineNaClMassFlow;
    private double urineUreaConc;
    private double urineUreaMassFlow;
    private boolean manuallyChanged;
    private String[] freeEnergyOutput;
    private int singleEffectInt;
    private final double osmCoeffUrea = 0.96;
    private final double osmCoeffNaCl = 1.86;

    /** Creates new form FreeEnergyForm */
    @Override
    public void init() {
        try {
            UIManager.setLookAndFeel(
                    UIManager.getCrossPlatformLookAndFeelClassName());
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(FreeEnergyApplet.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(FreeEnergyApplet.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(FreeEnergyApplet.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnsupportedLookAndFeelException ex) {
            Logger.getLogger(FreeEnergyApplet.class.getName()).log(Level.SEVERE, null, ex);
        }
        ToolTipManager.sharedInstance().setInitialDelay(0);
        ToolTipManager.sharedInstance().setDismissDelay(Integer.MAX_VALUE);
        initComponents();
        freeEnergyOutput = new String[24];
        freeEnergyOutput[0] = " DL";
        freeEnergyOutput[4] = " AL";
        freeEnergyOutput[8] = " DVR";
        freeEnergyOutput[12] = " AVR";
        freeEnergyOutput[16] = " CD";
        freeEnergyOutput[20] = " Urine";
        freeEnergyOutput[3] = "N/A";
        freeEnergyOutput[7] = "N/A";
        freeEnergyOutput[11] = "N/A";
        freeEnergyOutput[15] = "N/A";
        manuallyChanged = true;
        BufferedReader inputStream = null;
        try {
            // connect to the servlet
            URL url = new URL(getCodeBase(), "init.txt");
            URLConnection servletConnection = url.openConnection();
            // Don't used a cached version of URL connection.
            servletConnection.setUseCaches(false);
            servletConnection.setDefaultUseCaches(false);
            inputStream =
                    new BufferedReader(new InputStreamReader(servletConnection.getInputStream()));
            load(inputStream);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(FreeEnergyApplet.this,
                    "Invalid data file",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
        } finally {
            if (inputStream != null) {
                try {
                    inputStream.close();
                } catch (IOException ex) {
                    Logger.getLogger(FreeEnergyApplet.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        flowButtonGroup = new javax.swing.ButtonGroup();
        singleEffectButtonGroup = new javax.swing.ButtonGroup();
        buttonGroup1 = new javax.swing.ButtonGroup();
//        scrollPane = new javax.swing.JScrollPane();
        mainPanel = new javax.swing.JPanel();
        setMainPanel = new javax.swing.JPanel();
        setSingleEffectLabel = new javax.swing.JLabel();
        dlSingleEffectRadioButton = new javax.swing.JRadioButton();
        alSingleEffectRadioButton = new javax.swing.JRadioButton();
        dvrSingleEffectRadioButton = new javax.swing.JRadioButton();
        avrSingleEffectRadioButton = new javax.swing.JRadioButton();
        cdSingleEffectRadioButton = new javax.swing.JRadioButton();
        setOsmLabel = new javax.swing.JLabel();
        osmJunctionSpinner = new javax.swing.JSpinner();
        setNRSLabel = new javax.swing.JLabel();
        nrsSpinner = new javax.swing.JSpinner();
        gfrLabel = new javax.swing.JLabel();
        gfrSpinner = new javax.swing.JSpinner();
        plasmaNaClLabel = new javax.swing.JLabel();
        plasmaNaClSpinner = new javax.swing.JSpinner();
        plasmaUreaLabel = new javax.swing.JLabel();
        plasmaUreaSpinner = new javax.swing.JSpinner();
        percentLongLoopLabel = new javax.swing.JLabel();
        percentLongLoopSpinner = new javax.swing.JSpinner();
        waterTabbedPane = new javax.swing.JTabbedPane();
        flowPanel = new javax.swing.JPanel();
        flowTopPanel = new javax.swing.JPanel();
        dlFlowRadioButton = new javax.swing.JRadioButton();
        alFlowRadioButton = new javax.swing.JRadioButton();
        dvrFlowRadioButton = new javax.swing.JRadioButton();
        avrFlowRadioButton = new javax.swing.JRadioButton();
        cdFlowRadioButton = new javax.swing.JRadioButton();
        cdFlowSpinner = new javax.swing.JSpinner();
        avrFlowSpinner = new javax.swing.JSpinner();
        dvrFlowSpinner = new javax.swing.JSpinner();
        alFlowSpinner = new javax.swing.JSpinner();
        dlFlowSpinner = new javax.swing.JSpinner();
        urineFlowRadioButton = new javax.swing.JRadioButton();
        urineFlowSpinner = new javax.swing.JSpinner();
        waterLabel = new javax.swing.JLabel();
        tfpPanel = new javax.swing.JPanel();
        tfpTopPanel = new javax.swing.JPanel();
        dlTfpRadioButton = new javax.swing.JRadioButton();
        alTfpRadioButton = new javax.swing.JRadioButton();
        dvrTfpRadioButton = new javax.swing.JRadioButton();
        avrTfpRadioButton = new javax.swing.JRadioButton();
        cdTfpRadioButton = new javax.swing.JRadioButton();
        cdTfpSpinner = new javax.swing.JSpinner();
        avrTfpSpinner = new javax.swing.JSpinner();
        dvrTfpSpinner = new javax.swing.JSpinner();
        alTfpSpinner = new javax.swing.JSpinner();
        dlTfpSpinner = new javax.swing.JSpinner();
        urineTfpRadioButton = new javax.swing.JRadioButton();
        urineTfpSpinner = new javax.swing.JSpinner();
        waterLabel1 = new javax.swing.JLabel();
        saltTabbedPane = new javax.swing.JTabbedPane();
        saltConcPanel = new javax.swing.JPanel();
        saltConcTopPanel = new javax.swing.JPanel();
        dlNaClLabel = new javax.swing.JLabel();
        dlNaClSpinner = new javax.swing.JSpinner();
        alNaClLabel = new javax.swing.JLabel();
        alNaClSpinner = new javax.swing.JSpinner();
        dvrNaClLabel = new javax.swing.JLabel();
        dvrNaClSpinner = new javax.swing.JSpinner();
        avrNaClLabel = new javax.swing.JLabel();
        avrNaClSpinner = new javax.swing.JSpinner();
        cdNaClLabel = new javax.swing.JLabel();
        cdNaClSpinner = new javax.swing.JSpinner();
        saltConcLabel = new javax.swing.JLabel();
        saltConcBottomPanel = new javax.swing.JPanel();
        urineNaClLabel = new javax.swing.JLabel();
        urineNaClTextField = new javax.swing.JTextField();
        warningUrineNaClLabel = new javax.swing.JLabel();
        saltMassFlowPanel = new javax.swing.JPanel();
        saltMassFlowTopPanel = new javax.swing.JPanel();
        dlNaClLabel1 = new javax.swing.JLabel();
        dlNaClSpinner1 = new javax.swing.JSpinner();
        alNaClLabel1 = new javax.swing.JLabel();
        alNaClSpinner1 = new javax.swing.JSpinner();
        dvrNaClLabel1 = new javax.swing.JLabel();
        dvrNaClSpinner1 = new javax.swing.JSpinner();
        avrNaClLabel1 = new javax.swing.JLabel();
        avrNaClSpinner1 = new javax.swing.JSpinner();
        cdNaClLabel1 = new javax.swing.JLabel();
        cdNaClSpinner1 = new javax.swing.JSpinner();
        saltMassFlowLabel = new javax.swing.JLabel();
        saltMassFlowBottomPanel = new javax.swing.JPanel();
        urineNaClLabel1 = new javax.swing.JLabel();
        urineNaClTextField1 = new javax.swing.JTextField();
        warningUrineNaClLabel1 = new javax.swing.JLabel();
        frNaClPanel = new javax.swing.JPanel();
        frNaClLabel = new javax.swing.JLabel();
        frNaClTopPanel = new javax.swing.JPanel();
        dlNaClLabel2 = new javax.swing.JLabel();
        dlNaClSpinner2 = new javax.swing.JSpinner();
        alNaClLabel2 = new javax.swing.JLabel();
        alNaClSpinner2 = new javax.swing.JSpinner();
        dvrNaClLabel2 = new javax.swing.JLabel();
        dvrNaClSpinner2 = new javax.swing.JSpinner();
        avrNaClLabel2 = new javax.swing.JLabel();
        avrNaClSpinner2 = new javax.swing.JSpinner();
        cdNaClLabel2 = new javax.swing.JLabel();
        cdNaClSpinner2 = new javax.swing.JSpinner();
        frNaClBottomPanel = new javax.swing.JPanel();
        urineNaClLabel2 = new javax.swing.JLabel();
        urineNaClTextField2 = new javax.swing.JTextField();
        warningUrineNaClLabel2 = new javax.swing.JLabel();
        ureaTabbedPane = new javax.swing.JTabbedPane();
        ureaConcPanel = new javax.swing.JPanel();
        ureaConcTopPanel = new javax.swing.JPanel();
        dlUreaLabel = new javax.swing.JLabel();
        dlUreaSpinner = new javax.swing.JSpinner();
        alUreaLabel = new javax.swing.JLabel();
        alUreaSpinner = new javax.swing.JSpinner();
        dvrUreaLabel = new javax.swing.JLabel();
        dvrUreaSpinner = new javax.swing.JSpinner();
        avrUreaLabel = new javax.swing.JLabel();
        avrUreaSpinner = new javax.swing.JSpinner();
        cdUreaLabel = new javax.swing.JLabel();
        cdUreaSpinner = new javax.swing.JSpinner();
        ureaConcLabel = new javax.swing.JLabel();
        ureaConcBottomPanel = new javax.swing.JPanel();
        urineUreaTextField = new javax.swing.JTextField();
        urineUreaLabel = new javax.swing.JLabel();
        warningUrineUreaLabel = new javax.swing.JLabel();
        ureaMassFlowPanel = new javax.swing.JPanel();
        ureaMassFlowTopPanel = new javax.swing.JPanel();
        dlUreaLabel1 = new javax.swing.JLabel();
        dlUreaSpinner1 = new javax.swing.JSpinner();
        alUreaLabel1 = new javax.swing.JLabel();
        alUreaSpinner1 = new javax.swing.JSpinner();
        dvrUreaLabel1 = new javax.swing.JLabel();
        dvrUreaSpinner1 = new javax.swing.JSpinner();
        avrUreaLabel1 = new javax.swing.JLabel();
        avrUreaSpinner1 = new javax.swing.JSpinner();
        cdUreaLabel1 = new javax.swing.JLabel();
        cdUreaSpinner1 = new javax.swing.JSpinner();
        ureaMassFlowLabel = new javax.swing.JLabel();
        ureaMassFlowBottomPanel = new javax.swing.JPanel();
        urineUreaTextField1 = new javax.swing.JTextField();
        urineUreaLabel1 = new javax.swing.JLabel();
        warningUrineUreaLabel1 = new javax.swing.JLabel();
        frUreaPanel = new javax.swing.JPanel();
        frUreaTopPanel = new javax.swing.JPanel();
        dlUreaLabel2 = new javax.swing.JLabel();
        dlUreaSpinner2 = new javax.swing.JSpinner();
        alUreaLabel2 = new javax.swing.JLabel();
        alUreaSpinner2 = new javax.swing.JSpinner();
        dvrUreaLabel2 = new javax.swing.JLabel();
        dvrUreaSpinner2 = new javax.swing.JSpinner();
        avrUreaLabel2 = new javax.swing.JLabel();
        avrUreaSpinner2 = new javax.swing.JSpinner();
        cdUreaLabel2 = new javax.swing.JLabel();
        cdUreaSpinner2 = new javax.swing.JSpinner();
        frUreaLabel = new javax.swing.JLabel();
        frUreaBottomPanel = new javax.swing.JPanel();
        urineUreaTextField2 = new javax.swing.JTextField();
        urineUreaLabel2 = new javax.swing.JLabel();
        warningUrineUreaLabel2 = new javax.swing.JLabel();
        finalUOsmLabel = new javax.swing.JLabel();
        finalUOsmValue = new javax.swing.JLabel();
        finalUOsmUnit = new javax.swing.JLabel();
        freeEnergyLabel = new javax.swing.JLabel();
        freeEnergyValue = new javax.swing.JLabel();
        freeEnergyUnit = new javax.swing.JLabel();
        energyInputLabel = new javax.swing.JLabel();
        componentsLabel = new javax.swing.JLabel();
        freeEnergyScrollPane = new javax.swing.JScrollPane();
        freeEnergyTextArea = new javax.swing.JTextArea();
        siteLabel = new javax.swing.JLabel();
        saltLabel = new javax.swing.JLabel();
        ureaLabel = new javax.swing.JLabel();
        nrsLabel = new javax.swing.JLabel();
        copyButton = new javax.swing.JButton();
        model = new javax.swing.JLabel();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        loadMenuItem = new javax.swing.JMenuItem();
        saveMenuItem = new javax.swing.JMenuItem();

//        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
//        setTitle("Inner Medulla Free Energy Calculator");

        mainPanel.setPreferredSize(new java.awt.Dimension(1000, 780));

        setMainPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Main parameters"));

        setSingleEffectLabel.setForeground(new java.awt.Color(255, 0, 0));
        setSingleEffectLabel.setText("Site of single effect");
        setSingleEffectLabel.setToolTipText("Flow stream in which osmolality can differ from osmolality at OM-IM junction");

        singleEffectButtonGroup.add(dlSingleEffectRadioButton);
        dlSingleEffectRadioButton.setSelected(true);
        dlSingleEffectRadioButton.setText("DL");
        dlSingleEffectRadioButton.setToolTipText("Choose site for single effect");
        dlSingleEffectRadioButton.addActionListener(new java.awt.event.ActionListener() {

            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dlSingleEffectRadioButtonActionPerformed(evt);
            }
        });

        singleEffectButtonGroup.add(alSingleEffectRadioButton);
        alSingleEffectRadioButton.setText("AL");
        alSingleEffectRadioButton.setToolTipText("Choose site for single effect");
        alSingleEffectRadioButton.addActionListener(new java.awt.event.ActionListener() {

            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                alSingleEffectRadioButtonActionPerformed(evt);
            }
        });

        singleEffectButtonGroup.add(dvrSingleEffectRadioButton);
        dvrSingleEffectRadioButton.setText("DVR");
        dvrSingleEffectRadioButton.setToolTipText("Choose site for single effect");
        dvrSingleEffectRadioButton.addActionListener(new java.awt.event.ActionListener() {

            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dvrSingleEffectRadioButtonActionPerformed(evt);
            }
        });

        singleEffectButtonGroup.add(avrSingleEffectRadioButton);
        avrSingleEffectRadioButton.setText("AVR");
        avrSingleEffectRadioButton.setToolTipText("Choose site for single effect");
        avrSingleEffectRadioButton.addActionListener(new java.awt.event.ActionListener() {

            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                avrSingleEffectRadioButtonActionPerformed(evt);
            }
        });

        singleEffectButtonGroup.add(cdSingleEffectRadioButton);
        cdSingleEffectRadioButton.setText("CD");
        cdSingleEffectRadioButton.setToolTipText("Choose site for single effect");
        cdSingleEffectRadioButton.addActionListener(new java.awt.event.ActionListener() {

            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cdSingleEffectRadioButtonActionPerformed(evt);
            }
        });

        setOsmLabel.setText("Osmolality at OM-IM junction (mOsm)");
        setOsmLabel.setToolTipText("Osmolality at junction of outer and inner medulla");

        osmJunctionSpinner.setModel(new javax.swing.SpinnerNumberModel(Double.valueOf(1200.0d), Double.valueOf(280.001d), null, Double.valueOf(1.0d)));
        osmJunctionSpinner.setToolTipText("A change made here will cause Na and Urea values to be automatically readjusted");
        osmJunctionSpinner.addChangeListener(new javax.swing.event.ChangeListener() {

            @Override
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                osmJunctionSpinnerStateChanged(evt);
            }
        });

        setNRSLabel.setText("Non-Reabsorbable Solute (NRS) for CD (mOsm)");
        setNRSLabel.setToolTipText("Osmolality of solutes in collecting duct other than urea and NaCl");

        nrsSpinner.setModel(new javax.swing.SpinnerNumberModel(280.0d, 0.0d, 1199.999d, 1.0d));
        nrsSpinner.setToolTipText("A change made here will cause Na and Urea values of CD to be automatically readjusted");
        nrsSpinner.addChangeListener(new javax.swing.event.ChangeListener() {

            @Override
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                nrsSpinnerStateChanged(evt);
            }
        });

        gfrLabel.setText("Glomerular filtration rate (µl/min) ");

        gfrSpinner.setModel(new javax.swing.SpinnerNumberModel(Double.valueOf(1000.0d), Double.valueOf(0.0d), null, Double.valueOf(1.0d)));
        gfrSpinner.setModel(new javax.swing.SpinnerNumberModel(Double.valueOf(1000.0d), Double.valueOf(0.001d), null, Double.valueOf(1.0d)));
        gfrSpinner.addChangeListener(new javax.swing.event.ChangeListener() {

            @Override
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                gfrSpinnerStateChanged(evt);
            }
        });

        plasmaNaClLabel.setText("Plasma Na (mM)");

        plasmaNaClSpinner.setModel(new javax.swing.SpinnerNumberModel(Double.valueOf(140.0d), Double.valueOf(0.0d), null, Double.valueOf(1.0d)));
        plasmaNaClSpinner.setModel(new javax.swing.SpinnerNumberModel(Double.valueOf(140.0d), Double.valueOf(0.001d), null, Double.valueOf(1.0d)));
        plasmaNaClSpinner.addChangeListener(new javax.swing.event.ChangeListener() {

            @Override
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                plasmaNaClSpinnerStateChanged(evt);
            }
        });

        plasmaUreaLabel.setText("Plasma Urea (mM)");

        plasmaUreaSpinner.setModel(new javax.swing.SpinnerNumberModel(Double.valueOf(5.0d), Double.valueOf(0.0d), null, Double.valueOf(1.0d)));
        plasmaUreaSpinner.setModel(new javax.swing.SpinnerNumberModel(Double.valueOf(5.0d), Double.valueOf(0.001d), null, Double.valueOf(1.0d)));
        plasmaUreaSpinner.addChangeListener(new javax.swing.event.ChangeListener() {

            @Override
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                plasmaUreaSpinnerStateChanged(evt);
            }
        });

        percentLongLoopLabel.setText("% of nephrons with long loops");
        percentLongLoopLabel.setToolTipText("Only long looped nephrons pass through the inner medulla");

        plasmaUreaSpinner.setModel(new javax.swing.SpinnerNumberModel(Double.valueOf(5.0d), Double.valueOf(0.0d), null, Double.valueOf(1.0d)));
        percentLongLoopSpinner.setModel(new javax.swing.SpinnerNumberModel(Double.valueOf(30.0d), Double.valueOf(0.001d), null, Double.valueOf(1.0d)));
        percentLongLoopSpinner.addChangeListener(new javax.swing.event.ChangeListener() {

            @Override
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                percentLongLoopSpinnerStateChanged(evt);
            }
        });

        javax.swing.GroupLayout setMainPanelLayout = new javax.swing.GroupLayout(setMainPanel);
        setMainPanel.setLayout(setMainPanelLayout);
        setMainPanelLayout.setHorizontalGroup(
                setMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(setMainPanelLayout.createSequentialGroup().addContainerGap().addGroup(setMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(setMainPanelLayout.createSequentialGroup().addGroup(setMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(percentLongLoopLabel).addComponent(plasmaUreaLabel).addComponent(plasmaNaClLabel).addComponent(gfrLabel).addComponent(setNRSLabel).addComponent(setOsmLabel)).addGap(57, 57, 57).addGroup(setMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(osmJunctionSpinner, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 102, Short.MAX_VALUE).addComponent(nrsSpinner, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 102, Short.MAX_VALUE).addComponent(gfrSpinner, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 102, Short.MAX_VALUE).addComponent(plasmaNaClSpinner, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 102, Short.MAX_VALUE).addComponent(plasmaUreaSpinner, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 102, Short.MAX_VALUE).addComponent(percentLongLoopSpinner, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 102, Short.MAX_VALUE))).addGroup(setMainPanelLayout.createSequentialGroup().addComponent(setSingleEffectLabel).addGap(18, 18, 18).addComponent(dlSingleEffectRadioButton).addGap(18, 18, 18).addComponent(alSingleEffectRadioButton).addGap(18, 18, 18).addComponent(dvrSingleEffectRadioButton).addGap(18, 18, 18).addComponent(avrSingleEffectRadioButton).addGap(18, 18, 18).addComponent(cdSingleEffectRadioButton))).addContainerGap()));

        setMainPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[]{gfrSpinner, nrsSpinner, osmJunctionSpinner, percentLongLoopSpinner, plasmaNaClSpinner, plasmaUreaSpinner});

        setMainPanelLayout.setVerticalGroup(
                setMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(setMainPanelLayout.createSequentialGroup().addContainerGap().addGroup(setMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(dlSingleEffectRadioButton).addComponent(alSingleEffectRadioButton).addComponent(dvrSingleEffectRadioButton).addComponent(avrSingleEffectRadioButton).addComponent(cdSingleEffectRadioButton).addComponent(setSingleEffectLabel)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED).addGroup(setMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(setOsmLabel).addComponent(osmJunctionSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addGroup(setMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(setNRSLabel).addComponent(nrsSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addGroup(setMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(gfrLabel).addComponent(gfrSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addGroup(setMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(plasmaNaClLabel).addComponent(plasmaNaClSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addGroup(setMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(plasmaUreaLabel).addComponent(plasmaUreaSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addGroup(setMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(percentLongLoopLabel).addComponent(percentLongLoopSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)).addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)));

        waterTabbedPane.setBackground(new java.awt.Color(204, 204, 204));
        waterTabbedPane.setPreferredSize(new java.awt.Dimension(597, 230));

        flowPanel.setBackground(new java.awt.Color(255, 255, 255));
        flowPanel.setPreferredSize(new java.awt.Dimension(595, 235));

        flowTopPanel.setBackground(new java.awt.Color(255, 255, 255));
        flowTopPanel.setPreferredSize(new java.awt.Dimension(572, 54));

        dlFlowRadioButton.setBackground(new java.awt.Color(255, 255, 255));
        flowButtonGroup.add(dlFlowRadioButton);
        dlFlowRadioButton.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        dlFlowRadioButton.setText("DL (µl/min)");
        dlFlowRadioButton.setToolTipText("Stream selected by radio button is fixed by values of other streams and steady-state mass balance");
        dlFlowRadioButton.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        dlFlowRadioButton.addItemListener(new java.awt.event.ItemListener() {

            @Override
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                dlFlowRadioButtonItemStateChanged(evt);
            }
        });

        alFlowRadioButton.setBackground(new java.awt.Color(255, 255, 255));
        flowButtonGroup.add(alFlowRadioButton);
        alFlowRadioButton.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        alFlowRadioButton.setText("AL (µl/min)");
        alFlowRadioButton.setToolTipText("Stream selected by radio button is fixed by values of other streams and steady-state mass balance");
        alFlowRadioButton.addItemListener(new java.awt.event.ItemListener() {

            @Override
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                alFlowRadioButtonItemStateChanged(evt);
            }
        });

        dvrFlowRadioButton.setBackground(new java.awt.Color(255, 255, 255));
        flowButtonGroup.add(dvrFlowRadioButton);
        dvrFlowRadioButton.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        dvrFlowRadioButton.setText("DVR (µl/min)");
        dvrFlowRadioButton.setToolTipText("Stream selected by radio button is fixed by values of other streams and steady-state mass balance");
        dvrFlowRadioButton.addItemListener(new java.awt.event.ItemListener() {

            @Override
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                dvrFlowRadioButtonItemStateChanged(evt);
            }
        });

        avrFlowRadioButton.setBackground(new java.awt.Color(255, 255, 255));
        flowButtonGroup.add(avrFlowRadioButton);
        avrFlowRadioButton.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        avrFlowRadioButton.setText("AVR (µl/min)");
        avrFlowRadioButton.setToolTipText("Stream selected by radio button is fixed by values of other streams and steady-state mass balance");
        avrFlowRadioButton.addItemListener(new java.awt.event.ItemListener() {

            @Override
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                avrFlowRadioButtonItemStateChanged(evt);
            }
        });

        cdFlowRadioButton.setBackground(new java.awt.Color(255, 255, 255));
        flowButtonGroup.add(cdFlowRadioButton);
        cdFlowRadioButton.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        cdFlowRadioButton.setText("CD (µl/min)");
        cdFlowRadioButton.setToolTipText("Stream selected by radio button is fixed by values of other streams and steady-state mass balance");
        cdFlowRadioButton.addItemListener(new java.awt.event.ItemListener() {

            @Override
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cdFlowRadioButtonItemStateChanged(evt);
            }
        });

        cdFlowSpinner.setModel(new javax.swing.SpinnerNumberModel(Double.valueOf(20.0d), Double.valueOf(0.001d), null, Double.valueOf(1.0d)));
        cdFlowSpinner.addChangeListener(new javax.swing.event.ChangeListener() {

            @Override
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                cdFlowSpinnerStateChanged(evt);
            }
        });

        avrFlowSpinner.setModel(new javax.swing.SpinnerNumberModel(Double.valueOf(100.0d), Double.valueOf(0.001d), null, Double.valueOf(1.0d)));
        avrFlowSpinner.addChangeListener(new javax.swing.event.ChangeListener() {

            @Override
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                avrFlowSpinnerStateChanged(evt);
            }
        });

        dvrFlowSpinner.setModel(new javax.swing.SpinnerNumberModel(Double.valueOf(100.0d), Double.valueOf(0.001d), null, Double.valueOf(1.0d)));
        dvrFlowSpinner.addChangeListener(new javax.swing.event.ChangeListener() {

            @Override
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                dvrFlowSpinnerStateChanged(evt);
            }
        });

        alFlowSpinner.setModel(new javax.swing.SpinnerNumberModel(Double.valueOf(30.0d), Double.valueOf(0.001d), null, Double.valueOf(1.0d)));
        alFlowSpinner.addChangeListener(new javax.swing.event.ChangeListener() {

            @Override
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                alFlowSpinnerStateChanged(evt);
            }
        });

        dlFlowSpinner.setModel(new javax.swing.SpinnerNumberModel(Double.valueOf(30.0d), Double.valueOf(0.001d), null, Double.valueOf(1.0d)));
        dlFlowSpinner.addChangeListener(new javax.swing.event.ChangeListener() {

            @Override
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                dlFlowSpinnerStateChanged(evt);
            }
        });

        javax.swing.GroupLayout flowTopPanelLayout = new javax.swing.GroupLayout(flowTopPanel);
        flowTopPanel.setLayout(flowTopPanelLayout);
        flowTopPanelLayout.setHorizontalGroup(
                flowTopPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(flowTopPanelLayout.createSequentialGroup().addGroup(flowTopPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER).addComponent(dlFlowRadioButton).addComponent(dlFlowSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)).addGap(18, 18, 18).addGroup(flowTopPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER).addComponent(alFlowRadioButton).addComponent(alFlowSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)).addGap(18, 18, 18).addGroup(flowTopPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER).addComponent(dvrFlowRadioButton).addComponent(dvrFlowSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)).addGap(18, 18, 18).addGroup(flowTopPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER).addComponent(avrFlowRadioButton).addComponent(avrFlowSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)).addGap(18, 18, 18).addGroup(flowTopPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER).addComponent(cdFlowRadioButton).addComponent(cdFlowSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))));

        flowTopPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[]{alFlowSpinner, avrFlowSpinner, cdFlowSpinner, dvrFlowSpinner});

        flowTopPanelLayout.setVerticalGroup(
                flowTopPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(javax.swing.GroupLayout.Alignment.TRAILING, flowTopPanelLayout.createSequentialGroup().addContainerGap(9, Short.MAX_VALUE).addGroup(flowTopPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(flowTopPanelLayout.createSequentialGroup().addComponent(dlFlowRadioButton).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(dlFlowSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)).addGroup(flowTopPanelLayout.createSequentialGroup().addComponent(alFlowRadioButton).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(alFlowSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)).addGroup(flowTopPanelLayout.createSequentialGroup().addComponent(dvrFlowRadioButton).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(dvrFlowSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)).addGroup(flowTopPanelLayout.createSequentialGroup().addComponent(avrFlowRadioButton).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(avrFlowSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)).addGroup(flowTopPanelLayout.createSequentialGroup().addComponent(cdFlowRadioButton).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(cdFlowSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))));

        urineFlowRadioButton.setBackground(new java.awt.Color(255, 255, 255));
        flowButtonGroup.add(urineFlowRadioButton);
        urineFlowRadioButton.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        urineFlowRadioButton.setText("Urine (µl/min)");
        urineFlowRadioButton.setToolTipText("Stream selected by radio button is fixed by values of other streams and steady-state mass balance");
        urineFlowRadioButton.addItemListener(new java.awt.event.ItemListener() {

            @Override
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                urineFlowRadioButtonItemStateChanged(evt);
            }
        });

        urineFlowSpinner.setModel(new javax.swing.SpinnerNumberModel(Double.valueOf(20.0d), Double.valueOf(0.001d), null, Double.valueOf(1.0d)));
        urineFlowSpinner.addChangeListener(new javax.swing.event.ChangeListener() {

            @Override
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                urineFlowSpinnerStateChanged(evt);
            }
        });

        waterLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("water.png"))); // NOI18N

        javax.swing.GroupLayout flowPanelLayout = new javax.swing.GroupLayout(flowPanel);
        flowPanel.setLayout(flowPanelLayout);
        flowPanelLayout.setHorizontalGroup(
                flowPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(flowPanelLayout.createSequentialGroup().addContainerGap().addGroup(flowPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(flowPanelLayout.createSequentialGroup().addGap(236, 236, 236).addGroup(flowPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER).addComponent(urineFlowRadioButton).addComponent(urineFlowSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))).addComponent(waterLabel)).addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)).addGroup(flowPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(flowPanelLayout.createSequentialGroup().addContainerGap().addComponent(flowTopPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE).addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))));
        flowPanelLayout.setVerticalGroup(
                flowPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(flowPanelLayout.createSequentialGroup().addGap(58, 58, 58).addComponent(waterLabel).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE).addComponent(urineFlowRadioButton).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(urineFlowSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE).addGap(19, 19, 19)).addGroup(flowPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(flowPanelLayout.createSequentialGroup().addGap(0, 0, 0).addComponent(flowTopPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE).addContainerGap(160, Short.MAX_VALUE))));

        waterTabbedPane.addTab("Water flow", null, flowPanel, "Aggregate flow for all nephrons crossing boundary");

        tfpPanel.setBackground(new java.awt.Color(255, 255, 255));
        tfpPanel.setPreferredSize(new java.awt.Dimension(595, 235));

        tfpTopPanel.setBackground(new java.awt.Color(255, 255, 255));
        tfpTopPanel.setPreferredSize(new java.awt.Dimension(572, 54));

        dlTfpRadioButton.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup1.add(dlTfpRadioButton);
        dlTfpRadioButton.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        dlTfpRadioButton.setText("DL");
        dlTfpRadioButton.setToolTipText("Stream selected by radio button is fixed by values of other streams and steady-state mass balance");
        dlTfpRadioButton.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        dlTfpRadioButton.addItemListener(new java.awt.event.ItemListener() {

            @Override
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                dlTfpRadioButtonItemStateChanged(evt);
            }
        });

        alTfpRadioButton.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup1.add(alTfpRadioButton);
        alTfpRadioButton.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        alTfpRadioButton.setText("AL");
        alTfpRadioButton.setToolTipText("Stream selected by radio button is fixed by values of other streams and steady-state mass balance");
        alTfpRadioButton.addItemListener(new java.awt.event.ItemListener() {

            @Override
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                alTfpRadioButtonItemStateChanged(evt);
            }
        });

        dvrTfpRadioButton.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup1.add(dvrTfpRadioButton);
        dvrTfpRadioButton.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        dvrTfpRadioButton.setText("DVR");
        dvrTfpRadioButton.setToolTipText("Stream selected by radio button is fixed by values of other streams and steady-state mass balance");
        dvrTfpRadioButton.addItemListener(new java.awt.event.ItemListener() {

            @Override
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                dvrTfpRadioButtonItemStateChanged(evt);
            }
        });

        avrTfpRadioButton.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup1.add(avrTfpRadioButton);
        avrTfpRadioButton.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        avrTfpRadioButton.setText("AVR");
        avrTfpRadioButton.setToolTipText("Stream selected by radio button is fixed by values of other streams and steady-state mass balance");
        avrTfpRadioButton.addItemListener(new java.awt.event.ItemListener() {

            @Override
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                avrTfpRadioButtonItemStateChanged(evt);
            }
        });

        cdTfpRadioButton.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup1.add(cdTfpRadioButton);
        cdTfpRadioButton.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        cdTfpRadioButton.setText("CD");
        cdTfpRadioButton.setToolTipText("Stream selected by radio button is fixed by values of other streams and steady-state mass balance");
        cdTfpRadioButton.addItemListener(new java.awt.event.ItemListener() {

            @Override
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cdTfpRadioButtonItemStateChanged(evt);
            }
        });

        cdTfpSpinner.setModel(new javax.swing.SpinnerNumberModel(Double.valueOf(50.0d), Double.valueOf(0.001d), null, Double.valueOf(1.0d)));
        cdTfpSpinner.addChangeListener(new javax.swing.event.ChangeListener() {

            @Override
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                cdTfpSpinnerStateChanged(evt);
            }
        });

        avrTfpSpinner.setModel(new javax.swing.SpinnerNumberModel(Double.valueOf(10.0d), Double.valueOf(0.001d), null, Double.valueOf(1.0d)));
        avrTfpSpinner.addChangeListener(new javax.swing.event.ChangeListener() {

            @Override
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                avrTfpSpinnerStateChanged(evt);
            }
        });

        dvrTfpSpinner.setModel(new javax.swing.SpinnerNumberModel(Double.valueOf(10.0d), Double.valueOf(0.001d), null, Double.valueOf(1.0d)));
        dvrTfpSpinner.addChangeListener(new javax.swing.event.ChangeListener() {

            @Override
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                dvrTfpSpinnerStateChanged(evt);
            }
        });

        alTfpSpinner.setModel(new javax.swing.SpinnerNumberModel(Double.valueOf(10.0d), Double.valueOf(0.001d), null, Double.valueOf(1.0d)));
        alTfpSpinner.addChangeListener(new javax.swing.event.ChangeListener() {

            @Override
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                alTfpSpinnerStateChanged(evt);
            }
        });

        dlTfpSpinner.setModel(new javax.swing.SpinnerNumberModel(Double.valueOf(10.0d), Double.valueOf(0.001d), null, Double.valueOf(1.0d)));
        dlTfpSpinner.addChangeListener(new javax.swing.event.ChangeListener() {

            @Override
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                dlTfpSpinnerStateChanged(evt);
            }
        });

        javax.swing.GroupLayout tfpTopPanelLayout = new javax.swing.GroupLayout(tfpTopPanel);
        tfpTopPanel.setLayout(tfpTopPanelLayout);
        tfpTopPanelLayout.setHorizontalGroup(
                tfpTopPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(tfpTopPanelLayout.createSequentialGroup().addGroup(tfpTopPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER).addComponent(dlTfpRadioButton).addComponent(dlTfpSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)).addGap(18, 18, 18).addGroup(tfpTopPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER).addComponent(alTfpRadioButton).addComponent(alTfpSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)).addGap(18, 18, 18).addGroup(tfpTopPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER).addComponent(dvrTfpRadioButton).addComponent(dvrTfpSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)).addGap(18, 18, 18).addGroup(tfpTopPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER).addComponent(avrTfpRadioButton).addComponent(avrTfpSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)).addGap(18, 18, 18).addGroup(tfpTopPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER).addComponent(cdTfpRadioButton).addComponent(cdTfpSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)).addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)));
        tfpTopPanelLayout.setVerticalGroup(
                tfpTopPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tfpTopPanelLayout.createSequentialGroup().addContainerGap(9, Short.MAX_VALUE).addGroup(tfpTopPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(tfpTopPanelLayout.createSequentialGroup().addComponent(dlTfpRadioButton).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(dlTfpSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)).addGroup(tfpTopPanelLayout.createSequentialGroup().addComponent(alTfpRadioButton).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(alTfpSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)).addGroup(tfpTopPanelLayout.createSequentialGroup().addComponent(dvrTfpRadioButton).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(dvrTfpSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)).addGroup(tfpTopPanelLayout.createSequentialGroup().addComponent(avrTfpRadioButton).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(avrTfpSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)).addGroup(tfpTopPanelLayout.createSequentialGroup().addComponent(cdTfpRadioButton).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(cdTfpSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))));

        urineTfpRadioButton.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup1.add(urineTfpRadioButton);
        urineTfpRadioButton.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        urineTfpRadioButton.setText("Urine");
        urineTfpRadioButton.setToolTipText("Stream selected by radio button is fixed by values of other streams and steady-state mass balance");
        urineTfpRadioButton.addItemListener(new java.awt.event.ItemListener() {

            @Override
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                urineTfpRadioButtonItemStateChanged(evt);
            }
        });

        urineTfpSpinner.setModel(new javax.swing.SpinnerNumberModel(Double.valueOf(50.0d), Double.valueOf(0.001d), null, Double.valueOf(1.0d)));
        urineTfpSpinner.addChangeListener(new javax.swing.event.ChangeListener() {

            @Override
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                urineTfpSpinnerStateChanged(evt);
            }
        });

        waterLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("water.png"))); // NOI18N

        javax.swing.GroupLayout tfpPanelLayout = new javax.swing.GroupLayout(tfpPanel);
        tfpPanel.setLayout(tfpPanelLayout);
        tfpPanelLayout.setHorizontalGroup(
                tfpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(tfpPanelLayout.createSequentialGroup().addContainerGap().addGroup(tfpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(tfpPanelLayout.createSequentialGroup().addGap(236, 236, 236).addGroup(tfpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER).addComponent(urineTfpRadioButton).addComponent(urineTfpSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))).addComponent(waterLabel1)).addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)).addGroup(tfpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(tfpPanelLayout.createSequentialGroup().addContainerGap().addComponent(tfpTopPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 572, javax.swing.GroupLayout.PREFERRED_SIZE).addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))));
        tfpPanelLayout.setVerticalGroup(
                tfpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(tfpPanelLayout.createSequentialGroup().addGap(58, 58, 58).addComponent(waterLabel1).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE).addComponent(urineTfpRadioButton).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(urineTfpSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE).addGap(19, 19, 19)).addGroup(tfpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(tfpPanelLayout.createSequentialGroup().addGap(0, 0, 0).addComponent(tfpTopPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE).addContainerGap(160, Short.MAX_VALUE))));

        waterTabbedPane.addTab("TF/P inulin", null, tfpPanel, "Click here to convert flows to TF/P inulin ratios such as would be measured in micropuncture studies");

        saltTabbedPane.setBackground(new java.awt.Color(204, 204, 204));
        saltTabbedPane.setMaximumSize(new java.awt.Dimension(597, 255));
        saltTabbedPane.setPreferredSize(new java.awt.Dimension(597, 230));

        saltConcPanel.setBackground(new java.awt.Color(255, 255, 255));

        saltConcTopPanel.setBackground(new java.awt.Color(255, 255, 255));
        saltConcTopPanel.setPreferredSize(new java.awt.Dimension(572, 54));

        dlNaClLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        dlNaClLabel.setText("DL (mM)");

        dlNaClSpinner.setModel(new javax.swing.SpinnerNumberModel(Double.valueOf(100.0d), Double.valueOf(0.0d), null, Double.valueOf(1.0d)));
        dlNaClSpinner.addChangeListener(new javax.swing.event.ChangeListener() {

            @Override
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                dlNaClSpinnerStateChanged(evt);
            }
        });

        alNaClLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        alNaClLabel.setText("AL (mM)");

        alNaClSpinner.setModel(new javax.swing.SpinnerNumberModel(Double.valueOf(100.0d), Double.valueOf(0.0d), null, Double.valueOf(1.0d)));
        alNaClSpinner.addChangeListener(new javax.swing.event.ChangeListener() {

            @Override
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                alNaClSpinnerStateChanged(evt);
            }
        });

        dvrNaClLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        dvrNaClLabel.setText("DVR (mM)");

        dvrNaClSpinner.setModel(new javax.swing.SpinnerNumberModel(Double.valueOf(100.0d), Double.valueOf(0.0d), null, Double.valueOf(1.0d)));
        dvrNaClSpinner.addChangeListener(new javax.swing.event.ChangeListener() {

            @Override
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                dvrNaClSpinnerStateChanged(evt);
            }
        });

        avrNaClLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        avrNaClLabel.setText("AVR (mM)");

        avrNaClSpinner.setModel(new javax.swing.SpinnerNumberModel(Double.valueOf(100.0d), Double.valueOf(0.0d), null, Double.valueOf(1.0d)));
        avrNaClSpinner.addChangeListener(new javax.swing.event.ChangeListener() {

            @Override
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                avrNaClSpinnerStateChanged(evt);
            }
        });

        cdNaClLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        cdNaClLabel.setText("CD (mM)");

        cdNaClSpinner.setModel(new javax.swing.SpinnerNumberModel(Double.valueOf(100.0d), Double.valueOf(0.0d), null, Double.valueOf(1.0d)));
        cdNaClSpinner.addChangeListener(new javax.swing.event.ChangeListener() {

            @Override
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                cdNaClSpinnerStateChanged(evt);
            }
        });

        javax.swing.GroupLayout saltConcTopPanelLayout = new javax.swing.GroupLayout(saltConcTopPanel);
        saltConcTopPanel.setLayout(saltConcTopPanelLayout);
        saltConcTopPanelLayout.setHorizontalGroup(
                saltConcTopPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(saltConcTopPanelLayout.createSequentialGroup().addGroup(saltConcTopPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER).addComponent(dlNaClLabel).addComponent(dlNaClSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)).addGap(18, 18, 18).addGroup(saltConcTopPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER).addComponent(alNaClLabel).addComponent(alNaClSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)).addGap(18, 18, 18).addGroup(saltConcTopPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER).addComponent(dvrNaClLabel).addComponent(dvrNaClSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)).addGap(18, 18, 18).addGroup(saltConcTopPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER).addComponent(avrNaClLabel).addComponent(avrNaClSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)).addGap(18, 18, 18).addGroup(saltConcTopPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER).addComponent(cdNaClLabel).addComponent(cdNaClSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))));
        saltConcTopPanelLayout.setVerticalGroup(
                saltConcTopPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(saltConcTopPanelLayout.createSequentialGroup().addContainerGap(14, Short.MAX_VALUE).addGroup(saltConcTopPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(saltConcTopPanelLayout.createSequentialGroup().addComponent(dlNaClLabel).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(dlNaClSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)).addGroup(saltConcTopPanelLayout.createSequentialGroup().addComponent(alNaClLabel).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(alNaClSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)).addGroup(saltConcTopPanelLayout.createSequentialGroup().addComponent(dvrNaClLabel).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(dvrNaClSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)).addGroup(saltConcTopPanelLayout.createSequentialGroup().addComponent(avrNaClLabel).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(avrNaClSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)).addGroup(saltConcTopPanelLayout.createSequentialGroup().addComponent(cdNaClLabel).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(cdNaClSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))));

        saltConcLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("salt.png"))); // NOI18N

        saltConcBottomPanel.setBackground(new java.awt.Color(255, 255, 255));
        saltConcBottomPanel.setPreferredSize(new java.awt.Dimension(572, 49));

        urineNaClLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        urineNaClLabel.setText("Urine (mM)");

        urineNaClTextField.setEditable(false);
        urineNaClTextField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        urineNaClTextField.setText("100");

        warningUrineNaClLabel.setFont(new java.awt.Font("Tahoma", 1, 18));
        warningUrineNaClLabel.setForeground(new java.awt.Color(255, 0, 0));

        javax.swing.GroupLayout saltConcBottomPanelLayout = new javax.swing.GroupLayout(saltConcBottomPanel);
        saltConcBottomPanel.setLayout(saltConcBottomPanelLayout);
        saltConcBottomPanelLayout.setHorizontalGroup(
                saltConcBottomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(saltConcBottomPanelLayout.createSequentialGroup().addGap(236, 236, 236).addGroup(saltConcBottomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER).addComponent(urineNaClTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(urineNaClLabel)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED).addComponent(warningUrineNaClLabel).addGap(226, 226, 226)));
        saltConcBottomPanelLayout.setVerticalGroup(
                saltConcBottomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(saltConcBottomPanelLayout.createSequentialGroup().addComponent(urineNaClLabel).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addGroup(saltConcBottomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(urineNaClTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(warningUrineNaClLabel)).addContainerGap()));

        javax.swing.GroupLayout saltConcPanelLayout = new javax.swing.GroupLayout(saltConcPanel);
        saltConcPanel.setLayout(saltConcPanelLayout);
        saltConcPanelLayout.setHorizontalGroup(
                saltConcPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(saltConcPanelLayout.createSequentialGroup().addContainerGap().addGroup(saltConcPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false).addComponent(saltConcTopPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 573, Short.MAX_VALUE).addComponent(saltConcLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE).addComponent(saltConcBottomPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 573, Short.MAX_VALUE)).addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)));
        saltConcPanelLayout.setVerticalGroup(
                saltConcPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(saltConcPanelLayout.createSequentialGroup().addComponent(saltConcTopPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(saltConcLabel).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(saltConcBottomPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 51, Short.MAX_VALUE).addContainerGap()));

        saltTabbedPane.addTab("Na concentration", null, saltConcPanel, "Mean value for all nephrons crossing boundary");

        saltMassFlowPanel.setBackground(new java.awt.Color(255, 255, 255));

        saltMassFlowTopPanel.setBackground(new java.awt.Color(255, 255, 255));
        saltMassFlowTopPanel.setPreferredSize(new java.awt.Dimension(572, 49));

        dlNaClLabel1.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        dlNaClLabel1.setText("DL (nmol/min)");

        dlNaClSpinner1.setModel(new javax.swing.SpinnerNumberModel(Double.valueOf(100.0d), Double.valueOf(0.0d), null, Double.valueOf(1.0d)));
        dlNaClSpinner1.addChangeListener(new javax.swing.event.ChangeListener() {

            @Override
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                dlNaClSpinner1StateChanged(evt);
            }
        });

        alNaClLabel1.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        alNaClLabel1.setText("AL (nmol/min)");

        alNaClSpinner1.setModel(new javax.swing.SpinnerNumberModel(Double.valueOf(100.0d), Double.valueOf(0.0d), null, Double.valueOf(1.0d)));
        alNaClSpinner1.addChangeListener(new javax.swing.event.ChangeListener() {

            @Override
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                alNaClSpinner1StateChanged(evt);
            }
        });

        dvrNaClLabel1.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        dvrNaClLabel1.setText("DVR (nmol/min)");

        dvrNaClSpinner1.setModel(new javax.swing.SpinnerNumberModel(Double.valueOf(100.0d), Double.valueOf(0.0d), null, Double.valueOf(1.0d)));
        dvrNaClSpinner1.addChangeListener(new javax.swing.event.ChangeListener() {

            @Override
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                dvrNaClSpinner1StateChanged(evt);
            }
        });

        avrNaClLabel1.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        avrNaClLabel1.setText("AVR (nmol/min)");

        avrNaClSpinner1.setModel(new javax.swing.SpinnerNumberModel(Double.valueOf(100.0d), Double.valueOf(0.0d), null, Double.valueOf(1.0d)));
        avrNaClSpinner1.addChangeListener(new javax.swing.event.ChangeListener() {

            @Override
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                avrNaClSpinner1StateChanged(evt);
            }
        });

        cdNaClLabel1.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        cdNaClLabel1.setText("CD (nmol/min)");

        cdNaClSpinner1.setModel(new javax.swing.SpinnerNumberModel(Double.valueOf(100.0d), Double.valueOf(0.0d), null, Double.valueOf(1.0d)));
        cdNaClSpinner1.addChangeListener(new javax.swing.event.ChangeListener() {

            @Override
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                cdNaClSpinner1StateChanged(evt);
            }
        });

        javax.swing.GroupLayout saltMassFlowTopPanelLayout = new javax.swing.GroupLayout(saltMassFlowTopPanel);
        saltMassFlowTopPanel.setLayout(saltMassFlowTopPanelLayout);
        saltMassFlowTopPanelLayout.setHorizontalGroup(
                saltMassFlowTopPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(saltMassFlowTopPanelLayout.createSequentialGroup().addGroup(saltMassFlowTopPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER).addComponent(dlNaClLabel1).addComponent(dlNaClSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)).addGap(18, 18, 18).addGroup(saltMassFlowTopPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER).addComponent(alNaClLabel1).addComponent(alNaClSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)).addGap(18, 18, 18).addGroup(saltMassFlowTopPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER).addComponent(dvrNaClLabel1).addComponent(dvrNaClSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)).addGap(18, 18, 18).addGroup(saltMassFlowTopPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER).addComponent(avrNaClLabel1).addComponent(avrNaClSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)).addGap(18, 18, 18).addGroup(saltMassFlowTopPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER).addComponent(cdNaClLabel1).addComponent(cdNaClSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))));
        saltMassFlowTopPanelLayout.setVerticalGroup(
                saltMassFlowTopPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(saltMassFlowTopPanelLayout.createSequentialGroup().addContainerGap(14, Short.MAX_VALUE).addGroup(saltMassFlowTopPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(saltMassFlowTopPanelLayout.createSequentialGroup().addComponent(dlNaClLabel1).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(dlNaClSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)).addGroup(saltMassFlowTopPanelLayout.createSequentialGroup().addComponent(alNaClLabel1).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(alNaClSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)).addGroup(saltMassFlowTopPanelLayout.createSequentialGroup().addComponent(dvrNaClLabel1).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(dvrNaClSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)).addGroup(saltMassFlowTopPanelLayout.createSequentialGroup().addComponent(avrNaClLabel1).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(avrNaClSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)).addGroup(saltMassFlowTopPanelLayout.createSequentialGroup().addComponent(cdNaClLabel1).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(cdNaClSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))));

        saltMassFlowLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("salt.png"))); // NOI18N

        saltMassFlowBottomPanel.setBackground(new java.awt.Color(255, 255, 255));
        saltMassFlowBottomPanel.setPreferredSize(new java.awt.Dimension(572, 49));

        urineNaClLabel1.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        urineNaClLabel1.setText("Urine (nmol/min)");

        urineNaClTextField1.setEditable(false);
        urineNaClTextField1.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        urineNaClTextField1.setText("100");

        warningUrineNaClLabel1.setFont(new java.awt.Font("Tahoma", 1, 18));
        warningUrineNaClLabel1.setForeground(new java.awt.Color(255, 0, 0));

        javax.swing.GroupLayout saltMassFlowBottomPanelLayout = new javax.swing.GroupLayout(saltMassFlowBottomPanel);
        saltMassFlowBottomPanel.setLayout(saltMassFlowBottomPanelLayout);
        saltMassFlowBottomPanelLayout.setHorizontalGroup(
                saltMassFlowBottomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(saltMassFlowBottomPanelLayout.createSequentialGroup().addGap(236, 236, 236).addGroup(saltMassFlowBottomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER).addComponent(urineNaClTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(urineNaClLabel1)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED).addComponent(warningUrineNaClLabel1).addContainerGap(227, Short.MAX_VALUE)));
        saltMassFlowBottomPanelLayout.setVerticalGroup(
                saltMassFlowBottomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(saltMassFlowBottomPanelLayout.createSequentialGroup().addComponent(urineNaClLabel1).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE).addGroup(saltMassFlowBottomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(urineNaClTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(warningUrineNaClLabel1)).addContainerGap()));

        javax.swing.GroupLayout saltMassFlowPanelLayout = new javax.swing.GroupLayout(saltMassFlowPanel);
        saltMassFlowPanel.setLayout(saltMassFlowPanelLayout);
        saltMassFlowPanelLayout.setHorizontalGroup(
                saltMassFlowPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(saltMassFlowPanelLayout.createSequentialGroup().addContainerGap().addGroup(saltMassFlowPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(saltMassFlowTopPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE).addGroup(saltMassFlowPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false).addComponent(saltMassFlowBottomPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 573, Short.MAX_VALUE).addComponent(saltMassFlowLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))).addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)));
        saltMassFlowPanelLayout.setVerticalGroup(
                saltMassFlowPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(saltMassFlowPanelLayout.createSequentialGroup().addComponent(saltMassFlowTopPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(saltMassFlowLabel).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE).addComponent(saltMassFlowBottomPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE).addContainerGap()));

        saltTabbedPane.addTab("Na mass flow", null, saltMassFlowPanel, "Na concentration X water flow");

        frNaClPanel.setBackground(new java.awt.Color(255, 255, 255));

        frNaClLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("salt.png"))); // NOI18N

        frNaClTopPanel.setBackground(new java.awt.Color(255, 255, 255));
        frNaClTopPanel.setPreferredSize(new java.awt.Dimension(572, 49));

        dlNaClLabel2.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        dlNaClLabel2.setText("DL");

        dlNaClSpinner2.setModel(new javax.swing.SpinnerNumberModel(Double.valueOf(100.0d), Double.valueOf(0.0d), null, Double.valueOf(1.0d)));
        dlNaClSpinner2.addChangeListener(new javax.swing.event.ChangeListener() {

            @Override
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                dlNaClSpinner2StateChanged(evt);
            }
        });

        alNaClLabel2.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        alNaClLabel2.setText("AL");

        alNaClSpinner2.setModel(new javax.swing.SpinnerNumberModel(Double.valueOf(100.0d), Double.valueOf(0.0d), null, Double.valueOf(1.0d)));
        alNaClSpinner2.addChangeListener(new javax.swing.event.ChangeListener() {

            @Override
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                alNaClSpinner2StateChanged(evt);
            }
        });

        dvrNaClLabel2.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        dvrNaClLabel2.setText("DVR");

        dvrNaClSpinner2.setModel(new javax.swing.SpinnerNumberModel(Double.valueOf(100.0d), Double.valueOf(0.0d), null, Double.valueOf(1.0d)));
        dvrNaClSpinner2.addChangeListener(new javax.swing.event.ChangeListener() {

            @Override
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                dvrNaClSpinner2StateChanged(evt);
            }
        });

        avrNaClLabel2.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        avrNaClLabel2.setText("AVR");

        avrNaClSpinner2.setModel(new javax.swing.SpinnerNumberModel(Double.valueOf(100.0d), Double.valueOf(0.0d), null, Double.valueOf(1.0d)));
        avrNaClSpinner2.addChangeListener(new javax.swing.event.ChangeListener() {

            @Override
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                avrNaClSpinner2StateChanged(evt);
            }
        });

        cdNaClLabel2.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        cdNaClLabel2.setText("CD");

        cdNaClSpinner2.setModel(new javax.swing.SpinnerNumberModel(Double.valueOf(100.0d), Double.valueOf(0.0d), null, Double.valueOf(1.0d)));
        cdNaClSpinner2.addChangeListener(new javax.swing.event.ChangeListener() {

            @Override
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                cdNaClSpinner2StateChanged(evt);
            }
        });

        javax.swing.GroupLayout frNaClTopPanelLayout = new javax.swing.GroupLayout(frNaClTopPanel);
        frNaClTopPanel.setLayout(frNaClTopPanelLayout);
        frNaClTopPanelLayout.setHorizontalGroup(
                frNaClTopPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(frNaClTopPanelLayout.createSequentialGroup().addGroup(frNaClTopPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER).addComponent(dlNaClLabel2).addComponent(dlNaClSpinner2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)).addGap(18, 18, 18).addGroup(frNaClTopPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER).addComponent(alNaClLabel2).addComponent(alNaClSpinner2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)).addGap(18, 18, 18).addGroup(frNaClTopPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER).addComponent(dvrNaClLabel2).addComponent(dvrNaClSpinner2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)).addGap(18, 18, 18).addGroup(frNaClTopPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER).addComponent(avrNaClLabel2).addComponent(avrNaClSpinner2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)).addGap(18, 18, 18).addGroup(frNaClTopPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER).addComponent(cdNaClLabel2).addComponent(cdNaClSpinner2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))));
        frNaClTopPanelLayout.setVerticalGroup(
                frNaClTopPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(frNaClTopPanelLayout.createSequentialGroup().addContainerGap(14, Short.MAX_VALUE).addGroup(frNaClTopPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(frNaClTopPanelLayout.createSequentialGroup().addComponent(dlNaClLabel2).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(dlNaClSpinner2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)).addGroup(frNaClTopPanelLayout.createSequentialGroup().addComponent(alNaClLabel2).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(alNaClSpinner2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)).addGroup(frNaClTopPanelLayout.createSequentialGroup().addComponent(dvrNaClLabel2).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(dvrNaClSpinner2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)).addGroup(frNaClTopPanelLayout.createSequentialGroup().addComponent(avrNaClLabel2).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(avrNaClSpinner2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)).addGroup(frNaClTopPanelLayout.createSequentialGroup().addComponent(cdNaClLabel2).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(cdNaClSpinner2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))));

        frNaClBottomPanel.setBackground(new java.awt.Color(255, 255, 255));
        frNaClBottomPanel.setPreferredSize(new java.awt.Dimension(572, 49));

        urineNaClLabel2.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        urineNaClLabel2.setText("Urine");

        urineNaClTextField2.setEditable(false);
        urineNaClTextField2.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        urineNaClTextField2.setText("100");

        warningUrineNaClLabel2.setFont(new java.awt.Font("Tahoma", 1, 18));
        warningUrineNaClLabel2.setForeground(new java.awt.Color(255, 0, 0));

        javax.swing.GroupLayout frNaClBottomPanelLayout = new javax.swing.GroupLayout(frNaClBottomPanel);
        frNaClBottomPanel.setLayout(frNaClBottomPanelLayout);
        frNaClBottomPanelLayout.setHorizontalGroup(
                frNaClBottomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(frNaClBottomPanelLayout.createSequentialGroup().addGap(236, 236, 236).addGroup(frNaClBottomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER).addComponent(urineNaClTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(urineNaClLabel2)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED).addComponent(warningUrineNaClLabel2).addContainerGap(227, Short.MAX_VALUE)));
        frNaClBottomPanelLayout.setVerticalGroup(
                frNaClBottomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(frNaClBottomPanelLayout.createSequentialGroup().addComponent(urineNaClLabel2).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE).addGroup(frNaClBottomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(urineNaClTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(warningUrineNaClLabel2)).addContainerGap()));

        javax.swing.GroupLayout frNaClPanelLayout = new javax.swing.GroupLayout(frNaClPanel);
        frNaClPanel.setLayout(frNaClPanelLayout);
        frNaClPanelLayout.setHorizontalGroup(
                frNaClPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(frNaClPanelLayout.createSequentialGroup().addContainerGap().addGroup(frNaClPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(frNaClTopPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE).addGroup(frNaClPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false).addComponent(frNaClBottomPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 573, Short.MAX_VALUE).addComponent(frNaClLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))).addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)));
        frNaClPanelLayout.setVerticalGroup(
                frNaClPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(frNaClPanelLayout.createSequentialGroup().addComponent(frNaClTopPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(frNaClLabel).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE).addComponent(frNaClBottomPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE).addContainerGap()));

        saltTabbedPane.addTab("% Na delivery", null, frNaClPanel, "Click here to get Na delivery as fraction of filtered load as would be measured in micropuncture studies");

        ureaTabbedPane.setBackground(new java.awt.Color(204, 204, 204));
        ureaTabbedPane.setPreferredSize(new java.awt.Dimension(597, 230));

        ureaConcPanel.setBackground(new java.awt.Color(255, 255, 255));

        ureaConcTopPanel.setBackground(new java.awt.Color(255, 255, 255));
        ureaConcTopPanel.setPreferredSize(new java.awt.Dimension(572, 54));

        dlUreaLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        dlUreaLabel.setText("DL (mM)");

        dlUreaSpinner.setModel(new javax.swing.SpinnerNumberModel(Double.valueOf(100.0d), Double.valueOf(0.0d), null, Double.valueOf(1.0d)));
        dlUreaSpinner.addChangeListener(new javax.swing.event.ChangeListener() {

            @Override
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                dlUreaSpinnerStateChanged(evt);
            }
        });

        alUreaLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        alUreaLabel.setText("AL (mM)");

        alUreaSpinner.setModel(new javax.swing.SpinnerNumberModel(Double.valueOf(100.0d), Double.valueOf(0.0d), null, Double.valueOf(1.0d)));
        alUreaSpinner.addChangeListener(new javax.swing.event.ChangeListener() {

            @Override
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                alUreaSpinnerStateChanged(evt);
            }
        });

        dvrUreaLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        dvrUreaLabel.setText("DVR (mM)");

        dvrUreaSpinner.setModel(new javax.swing.SpinnerNumberModel(Double.valueOf(100.0d), Double.valueOf(0.0d), null, Double.valueOf(1.0d)));
        dvrUreaSpinner.addChangeListener(new javax.swing.event.ChangeListener() {

            @Override
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                dvrUreaSpinnerStateChanged(evt);
            }
        });

        avrUreaLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        avrUreaLabel.setText("AVR (mM)");

        avrUreaSpinner.setModel(new javax.swing.SpinnerNumberModel(Double.valueOf(100.0d), Double.valueOf(0.0d), null, Double.valueOf(1.0d)));
        avrUreaSpinner.addChangeListener(new javax.swing.event.ChangeListener() {

            @Override
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                avrUreaSpinnerStateChanged(evt);
            }
        });

        cdUreaLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        cdUreaLabel.setText("CD (mM)");

        cdUreaSpinner.setModel(new javax.swing.SpinnerNumberModel(Double.valueOf(100.0d), Double.valueOf(0.0d), null, Double.valueOf(1.0d)));
        cdUreaSpinner.addChangeListener(new javax.swing.event.ChangeListener() {

            @Override
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                cdUreaSpinnerStateChanged(evt);
            }
        });

        javax.swing.GroupLayout ureaConcTopPanelLayout = new javax.swing.GroupLayout(ureaConcTopPanel);
        ureaConcTopPanel.setLayout(ureaConcTopPanelLayout);
        ureaConcTopPanelLayout.setHorizontalGroup(
                ureaConcTopPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ureaConcTopPanelLayout.createSequentialGroup().addGroup(ureaConcTopPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER).addComponent(dlUreaLabel).addComponent(dlUreaSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)).addGap(18, 18, 18).addGroup(ureaConcTopPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER).addComponent(alUreaLabel).addComponent(alUreaSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)).addGap(18, 18, 18).addGroup(ureaConcTopPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER).addComponent(dvrUreaLabel).addComponent(dvrUreaSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)).addGap(18, 18, 18).addGroup(ureaConcTopPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER).addComponent(avrUreaLabel).addComponent(avrUreaSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)).addGap(18, 18, 18).addGroup(ureaConcTopPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER).addComponent(cdUreaLabel).addComponent(cdUreaSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))));

        ureaConcTopPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[]{alUreaSpinner, avrUreaSpinner, cdUreaSpinner, dlUreaSpinner, dvrUreaSpinner});

        ureaConcTopPanelLayout.setVerticalGroup(
                ureaConcTopPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(ureaConcTopPanelLayout.createSequentialGroup().addContainerGap(14, Short.MAX_VALUE).addGroup(ureaConcTopPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(ureaConcTopPanelLayout.createSequentialGroup().addComponent(dlUreaLabel).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(dlUreaSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)).addGroup(ureaConcTopPanelLayout.createSequentialGroup().addComponent(alUreaLabel).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(alUreaSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)).addGroup(ureaConcTopPanelLayout.createSequentialGroup().addComponent(dvrUreaLabel).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(dvrUreaSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)).addGroup(ureaConcTopPanelLayout.createSequentialGroup().addComponent(avrUreaLabel).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(avrUreaSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)).addGroup(ureaConcTopPanelLayout.createSequentialGroup().addComponent(cdUreaLabel).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(cdUreaSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))));

        ureaConcLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("urea.png"))); // NOI18N

        ureaConcBottomPanel.setBackground(new java.awt.Color(255, 255, 255));
        ureaConcBottomPanel.setPreferredSize(new java.awt.Dimension(572, 49));

        urineUreaTextField.setEditable(false);
        urineUreaTextField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        urineUreaTextField.setText("100");

        urineUreaLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        urineUreaLabel.setText("Urine (mM)");

        warningUrineUreaLabel.setFont(new java.awt.Font("Tahoma", 1, 18));
        warningUrineUreaLabel.setForeground(new java.awt.Color(255, 0, 0));

        javax.swing.GroupLayout ureaConcBottomPanelLayout = new javax.swing.GroupLayout(ureaConcBottomPanel);
        ureaConcBottomPanel.setLayout(ureaConcBottomPanelLayout);
        ureaConcBottomPanelLayout.setHorizontalGroup(
                ureaConcBottomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(ureaConcBottomPanelLayout.createSequentialGroup().addGap(236, 236, 236).addGroup(ureaConcBottomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER).addComponent(urineUreaTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(urineUreaLabel)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED).addComponent(warningUrineUreaLabel).addGap(226, 226, 226)));
        ureaConcBottomPanelLayout.setVerticalGroup(
                ureaConcBottomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(ureaConcBottomPanelLayout.createSequentialGroup().addComponent(urineUreaLabel).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addGroup(ureaConcBottomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(urineUreaTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(warningUrineUreaLabel)).addContainerGap()));

        javax.swing.GroupLayout ureaConcPanelLayout = new javax.swing.GroupLayout(ureaConcPanel);
        ureaConcPanel.setLayout(ureaConcPanelLayout);
        ureaConcPanelLayout.setHorizontalGroup(
                ureaConcPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(ureaConcPanelLayout.createSequentialGroup().addContainerGap().addGroup(ureaConcPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(ureaConcTopPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(ureaConcLabel).addComponent(ureaConcBottomPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 572, javax.swing.GroupLayout.PREFERRED_SIZE)).addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)));
        ureaConcPanelLayout.setVerticalGroup(
                ureaConcPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(ureaConcPanelLayout.createSequentialGroup().addComponent(ureaConcTopPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(ureaConcLabel).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(ureaConcBottomPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE).addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)));

        ureaTabbedPane.addTab("Urea concentration", null, ureaConcPanel, "Mean value for all nephrons crossing boundary");

        ureaMassFlowPanel.setBackground(new java.awt.Color(255, 255, 255));

        ureaMassFlowTopPanel.setBackground(new java.awt.Color(255, 255, 255));
        ureaMassFlowTopPanel.setPreferredSize(new java.awt.Dimension(572, 54));

        dlUreaLabel1.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        dlUreaLabel1.setText("DL (nmol/min)");

        dlUreaSpinner1.setModel(new javax.swing.SpinnerNumberModel(Double.valueOf(100.0d), Double.valueOf(0.0d), null, Double.valueOf(1.0d)));
        dlUreaSpinner1.addChangeListener(new javax.swing.event.ChangeListener() {

            @Override
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                dlUreaSpinner1StateChanged(evt);
            }
        });

        alUreaLabel1.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        alUreaLabel1.setText("AL (nmol/min)");

        alUreaSpinner1.setModel(new javax.swing.SpinnerNumberModel(Double.valueOf(100.0d), Double.valueOf(0.0d), null, Double.valueOf(1.0d)));
        alUreaSpinner1.addChangeListener(new javax.swing.event.ChangeListener() {

            @Override
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                alUreaSpinner1StateChanged(evt);
            }
        });

        dvrUreaLabel1.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        dvrUreaLabel1.setText("DVR (nmol/min)");

        dvrUreaSpinner1.setModel(new javax.swing.SpinnerNumberModel(Double.valueOf(100.0d), Double.valueOf(0.0d), null, Double.valueOf(1.0d)));
        dvrUreaSpinner1.addChangeListener(new javax.swing.event.ChangeListener() {

            @Override
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                dvrUreaSpinner1StateChanged(evt);
            }
        });

        avrUreaLabel1.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        avrUreaLabel1.setText("AVR (nmol/min)");

        avrUreaSpinner1.setModel(new javax.swing.SpinnerNumberModel(Double.valueOf(100.0d), Double.valueOf(0.0d), null, Double.valueOf(1.0d)));
        avrUreaSpinner1.addChangeListener(new javax.swing.event.ChangeListener() {

            @Override
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                avrUreaSpinner1StateChanged(evt);
            }
        });

        cdUreaLabel1.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        cdUreaLabel1.setText("CD (nmol/min)");

        cdUreaSpinner1.setModel(new javax.swing.SpinnerNumberModel(Double.valueOf(100.0d), Double.valueOf(0.0d), null, Double.valueOf(1.0d)));
        cdUreaSpinner1.addChangeListener(new javax.swing.event.ChangeListener() {

            @Override
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                cdUreaSpinner1StateChanged(evt);
            }
        });

        javax.swing.GroupLayout ureaMassFlowTopPanelLayout = new javax.swing.GroupLayout(ureaMassFlowTopPanel);
        ureaMassFlowTopPanel.setLayout(ureaMassFlowTopPanelLayout);
        ureaMassFlowTopPanelLayout.setHorizontalGroup(
                ureaMassFlowTopPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ureaMassFlowTopPanelLayout.createSequentialGroup().addGroup(ureaMassFlowTopPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER).addComponent(dlUreaLabel1).addComponent(dlUreaSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)).addGap(18, 18, 18).addGroup(ureaMassFlowTopPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER).addComponent(alUreaLabel1).addComponent(alUreaSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)).addGap(18, 18, 18).addGroup(ureaMassFlowTopPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER).addComponent(dvrUreaLabel1).addComponent(dvrUreaSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)).addGap(18, 18, 18).addGroup(ureaMassFlowTopPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER).addComponent(avrUreaLabel1).addComponent(avrUreaSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)).addGap(18, 18, 18).addGroup(ureaMassFlowTopPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER).addComponent(cdUreaLabel1).addComponent(cdUreaSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))));
        ureaMassFlowTopPanelLayout.setVerticalGroup(
                ureaMassFlowTopPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(ureaMassFlowTopPanelLayout.createSequentialGroup().addContainerGap(14, Short.MAX_VALUE).addGroup(ureaMassFlowTopPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(ureaMassFlowTopPanelLayout.createSequentialGroup().addComponent(dlUreaLabel1).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(dlUreaSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)).addGroup(ureaMassFlowTopPanelLayout.createSequentialGroup().addComponent(alUreaLabel1).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(alUreaSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)).addGroup(ureaMassFlowTopPanelLayout.createSequentialGroup().addComponent(dvrUreaLabel1).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(dvrUreaSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)).addGroup(ureaMassFlowTopPanelLayout.createSequentialGroup().addComponent(avrUreaLabel1).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(avrUreaSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)).addGroup(ureaMassFlowTopPanelLayout.createSequentialGroup().addComponent(cdUreaLabel1).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(cdUreaSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))));

        ureaMassFlowLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("urea.png"))); // NOI18N

        ureaMassFlowBottomPanel.setBackground(new java.awt.Color(255, 255, 255));
        ureaMassFlowBottomPanel.setPreferredSize(new java.awt.Dimension(572, 49));

        urineUreaTextField1.setEditable(false);
        urineUreaTextField1.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        urineUreaTextField1.setText("100");

        urineUreaLabel1.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        urineUreaLabel1.setText("Urine (nmol/min)");

        warningUrineUreaLabel1.setFont(new java.awt.Font("Tahoma", 1, 18));
        warningUrineUreaLabel1.setForeground(new java.awt.Color(255, 0, 0));

        javax.swing.GroupLayout ureaMassFlowBottomPanelLayout = new javax.swing.GroupLayout(ureaMassFlowBottomPanel);
        ureaMassFlowBottomPanel.setLayout(ureaMassFlowBottomPanelLayout);
        ureaMassFlowBottomPanelLayout.setHorizontalGroup(
                ureaMassFlowBottomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(ureaMassFlowBottomPanelLayout.createSequentialGroup().addGap(236, 236, 236).addGroup(ureaMassFlowBottomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER).addComponent(urineUreaTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(urineUreaLabel1)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED).addComponent(warningUrineUreaLabel1).addContainerGap(226, Short.MAX_VALUE)));
        ureaMassFlowBottomPanelLayout.setVerticalGroup(
                ureaMassFlowBottomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(ureaMassFlowBottomPanelLayout.createSequentialGroup().addComponent(urineUreaLabel1).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE).addGroup(ureaMassFlowBottomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(urineUreaTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(warningUrineUreaLabel1)).addContainerGap()));

        javax.swing.GroupLayout ureaMassFlowPanelLayout = new javax.swing.GroupLayout(ureaMassFlowPanel);
        ureaMassFlowPanel.setLayout(ureaMassFlowPanelLayout);
        ureaMassFlowPanelLayout.setHorizontalGroup(
                ureaMassFlowPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(ureaMassFlowPanelLayout.createSequentialGroup().addContainerGap().addGroup(ureaMassFlowPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(ureaMassFlowTopPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(ureaMassFlowLabel).addComponent(ureaMassFlowBottomPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)).addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)));
        ureaMassFlowPanelLayout.setVerticalGroup(
                ureaMassFlowPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(ureaMassFlowPanelLayout.createSequentialGroup().addComponent(ureaMassFlowTopPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(ureaMassFlowLabel).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE).addComponent(ureaMassFlowBottomPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE).addContainerGap()));

        ureaTabbedPane.addTab("Urea mass flow", null, ureaMassFlowPanel, "Urea concentration X water flow");

        frUreaPanel.setBackground(new java.awt.Color(255, 255, 255));
        frUreaPanel.setPreferredSize(new java.awt.Dimension(572, 54));

        frUreaTopPanel.setBackground(new java.awt.Color(255, 255, 255));
        frUreaTopPanel.setPreferredSize(new java.awt.Dimension(572, 54));

        dlUreaLabel2.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        dlUreaLabel2.setText("DL");

        dlUreaSpinner2.setModel(new javax.swing.SpinnerNumberModel(Double.valueOf(100.0d), Double.valueOf(0.0d), null, Double.valueOf(1.0d)));
        dlUreaSpinner2.addChangeListener(new javax.swing.event.ChangeListener() {

            @Override
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                dlUreaSpinner2StateChanged(evt);
            }
        });

        alUreaLabel2.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        alUreaLabel2.setText("AL");

        alUreaSpinner2.setModel(new javax.swing.SpinnerNumberModel(Double.valueOf(100.0d), Double.valueOf(0.0d), null, Double.valueOf(1.0d)));
        alUreaSpinner2.addChangeListener(new javax.swing.event.ChangeListener() {

            @Override
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                alUreaSpinner2StateChanged(evt);
            }
        });

        dvrUreaLabel2.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        dvrUreaLabel2.setText("DVR");

        dvrUreaSpinner2.setModel(new javax.swing.SpinnerNumberModel(Double.valueOf(100.0d), Double.valueOf(0.0d), null, Double.valueOf(1.0d)));
        dvrUreaSpinner2.addChangeListener(new javax.swing.event.ChangeListener() {

            @Override
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                dvrUreaSpinner2StateChanged(evt);
            }
        });

        avrUreaLabel2.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        avrUreaLabel2.setText("AVR");

        avrUreaSpinner2.setModel(new javax.swing.SpinnerNumberModel(Double.valueOf(100.0d), Double.valueOf(0.0d), null, Double.valueOf(1.0d)));
        avrUreaSpinner2.addChangeListener(new javax.swing.event.ChangeListener() {

            @Override
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                avrUreaSpinner2StateChanged(evt);
            }
        });

        cdUreaLabel2.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        cdUreaLabel2.setText("CD");

        cdUreaSpinner2.setModel(new javax.swing.SpinnerNumberModel(Double.valueOf(100.0d), Double.valueOf(0.0d), null, Double.valueOf(1.0d)));
        cdUreaSpinner2.addChangeListener(new javax.swing.event.ChangeListener() {

            @Override
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                cdUreaSpinner2StateChanged(evt);
            }
        });

        javax.swing.GroupLayout frUreaTopPanelLayout = new javax.swing.GroupLayout(frUreaTopPanel);
        frUreaTopPanel.setLayout(frUreaTopPanelLayout);
        frUreaTopPanelLayout.setHorizontalGroup(
                frUreaTopPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(javax.swing.GroupLayout.Alignment.TRAILING, frUreaTopPanelLayout.createSequentialGroup().addGroup(frUreaTopPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER).addComponent(dlUreaLabel2).addComponent(dlUreaSpinner2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)).addGap(18, 18, 18).addGroup(frUreaTopPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER).addComponent(alUreaLabel2).addComponent(alUreaSpinner2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)).addGap(18, 18, 18).addGroup(frUreaTopPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER).addComponent(dvrUreaLabel2).addComponent(dvrUreaSpinner2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)).addGap(18, 18, 18).addGroup(frUreaTopPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER).addComponent(avrUreaLabel2).addComponent(avrUreaSpinner2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)).addGap(18, 18, 18).addGroup(frUreaTopPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER).addComponent(cdUreaLabel2).addComponent(cdUreaSpinner2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))));
        frUreaTopPanelLayout.setVerticalGroup(
                frUreaTopPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(frUreaTopPanelLayout.createSequentialGroup().addContainerGap(14, Short.MAX_VALUE).addGroup(frUreaTopPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(frUreaTopPanelLayout.createSequentialGroup().addComponent(dlUreaLabel2).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(dlUreaSpinner2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)).addGroup(frUreaTopPanelLayout.createSequentialGroup().addComponent(alUreaLabel2).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(alUreaSpinner2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)).addGroup(frUreaTopPanelLayout.createSequentialGroup().addComponent(dvrUreaLabel2).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(dvrUreaSpinner2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)).addGroup(frUreaTopPanelLayout.createSequentialGroup().addComponent(avrUreaLabel2).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(avrUreaSpinner2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)).addGroup(frUreaTopPanelLayout.createSequentialGroup().addComponent(cdUreaLabel2).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(cdUreaSpinner2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))));

        frUreaLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("urea.png"))); // NOI18N

        frUreaBottomPanel.setBackground(new java.awt.Color(255, 255, 255));
        frUreaBottomPanel.setPreferredSize(new java.awt.Dimension(572, 49));

        urineUreaTextField2.setEditable(false);
        urineUreaTextField2.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        urineUreaTextField2.setText("100");

        urineUreaLabel2.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        urineUreaLabel2.setText("Urine");

        warningUrineUreaLabel2.setFont(new java.awt.Font("Tahoma", 1, 18));
        warningUrineUreaLabel2.setForeground(new java.awt.Color(255, 0, 0));

        javax.swing.GroupLayout frUreaBottomPanelLayout = new javax.swing.GroupLayout(frUreaBottomPanel);
        frUreaBottomPanel.setLayout(frUreaBottomPanelLayout);
        frUreaBottomPanelLayout.setHorizontalGroup(
                frUreaBottomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(frUreaBottomPanelLayout.createSequentialGroup().addGap(236, 236, 236).addGroup(frUreaBottomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER).addComponent(urineUreaTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(urineUreaLabel2)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED).addComponent(warningUrineUreaLabel2).addContainerGap(226, Short.MAX_VALUE)));
        frUreaBottomPanelLayout.setVerticalGroup(
                frUreaBottomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(frUreaBottomPanelLayout.createSequentialGroup().addComponent(urineUreaLabel2).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE).addGroup(frUreaBottomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(urineUreaTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(warningUrineUreaLabel2)).addContainerGap()));

        javax.swing.GroupLayout frUreaPanelLayout = new javax.swing.GroupLayout(frUreaPanel);
        frUreaPanel.setLayout(frUreaPanelLayout);
        frUreaPanelLayout.setHorizontalGroup(
                frUreaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(frUreaPanelLayout.createSequentialGroup().addContainerGap().addGroup(frUreaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(frUreaTopPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(frUreaLabel).addComponent(frUreaBottomPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)).addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)));
        frUreaPanelLayout.setVerticalGroup(
                frUreaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(frUreaPanelLayout.createSequentialGroup().addComponent(frUreaTopPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(frUreaLabel).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE).addComponent(frUreaBottomPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE).addContainerGap()));

        ureaTabbedPane.addTab("% Urea delivery", null, frUreaPanel, "Click here to get urea delivery as fraction of filtered load as would be measured in micropuncture studies");

        finalUOsmLabel.setFont(new java.awt.Font("Tahoma", 0, 30)); // NOI18N
        finalUOsmLabel.setText("Final urine osmolality");
        finalUOsmLabel.setToolTipText("Because of mass balance requirements, final urinary osmolality will change only if concentrations at single-effect site are changed");

        finalUOsmValue.setFont(new java.awt.Font("Tahoma", 0, 30));
        finalUOsmValue.setText("900.0");

        finalUOsmUnit.setFont(new java.awt.Font("Tahoma", 0, 30));
        finalUOsmUnit.setText("mOsm");

        freeEnergyLabel.setFont(new java.awt.Font("Tahoma", 0, 30)); // NOI18N
        freeEnergyLabel.setText("Net free-energy flow");
        freeEnergyLabel.setToolTipText("<html>Rate at which free-energy outflow from medulla exceeds free-energy inflow<br>Stephenson, JL; Proc Natl Acad Sci U S A. 1974 May; 71(5): 1618–1622");

        freeEnergyValue.setFont(new java.awt.Font("Tahoma", 0, 30));
        freeEnergyValue.setText("0");

        freeEnergyUnit.setFont(new java.awt.Font("Tahoma", 0, 30));
        freeEnergyUnit.setText("mJ/min");

        energyInputLabel.setFont(new java.awt.Font("Tahoma", 0, 30));
        energyInputLabel.setText("energy input");

        componentsLabel.setText("Components of free energy calculation:");
        componentsLabel.setToolTipText("Reference concentrations assumed to be 1 mM");

        freeEnergyTextArea.setColumns(20);
        freeEnergyTextArea.setRows(5);
        freeEnergyTextArea.setTabSize(7);
        freeEnergyTextArea.setPreferredSize(new java.awt.Dimension(162, 100));
        freeEnergyScrollPane.setViewportView(freeEnergyTextArea);

        siteLabel.setText("Site");

        saltLabel.setText("NaCl");

        ureaLabel.setText("Urea");

        nrsLabel.setText("NRS");

        copyButton.setText("Copy");
        copyButton.addActionListener(new java.awt.event.ActionListener() {

            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyButtonActionPerformed(evt);
            }
        });

        model.setFont(new java.awt.Font("Tahoma", 0, 30)); // NOI18N

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
                mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup().addContainerGap().addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(waterTabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(saltTabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 597, javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(ureaTabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING).addComponent(setMainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE).addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false).addGroup(mainPanelLayout.createSequentialGroup().addComponent(finalUOsmValue).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED).addComponent(finalUOsmUnit)).addGroup(mainPanelLayout.createSequentialGroup().addComponent(freeEnergyValue).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(freeEnergyUnit)).addComponent(freeEnergyLabel).addComponent(componentsLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE).addComponent(copyButton).addGroup(mainPanelLayout.createSequentialGroup().addComponent(siteLabel).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE).addComponent(saltLabel).addGap(51, 51, 51).addComponent(ureaLabel).addGap(50, 50, 50).addComponent(nrsLabel).addGap(26, 26, 26)).addComponent(finalUOsmLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE).addComponent(freeEnergyScrollPane)).addGroup(mainPanelLayout.createSequentialGroup().addComponent(model).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(energyInputLabel))).addGap(84, 84, 84)));

        mainPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[]{saltTabbedPane, ureaTabbedPane, waterTabbedPane});

        mainPanelLayout.setVerticalGroup(
                mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(mainPanelLayout.createSequentialGroup().addContainerGap().addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(setMainPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(waterTabbedPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(mainPanelLayout.createSequentialGroup().addComponent(saltTabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(ureaTabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)).addGroup(mainPanelLayout.createSequentialGroup().addComponent(finalUOsmLabel).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED).addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(finalUOsmUnit).addComponent(finalUOsmValue)).addGap(18, 18, 18).addComponent(freeEnergyLabel).addGap(18, 18, 18).addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(freeEnergyUnit).addComponent(freeEnergyValue)).addGap(18, 18, 18).addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(energyInputLabel).addComponent(model)).addGap(29, 29, 29).addComponent(componentsLabel).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(ureaLabel).addComponent(nrsLabel).addComponent(saltLabel).addComponent(siteLabel)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(freeEnergyScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(copyButton))).addContainerGap(187, Short.MAX_VALUE)));

        mainPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[]{saltTabbedPane, ureaTabbedPane});

//        scrollPane.setViewportView(mainPanel);

        fileMenu.setText("File");

        loadMenuItem.setText("Load data");
        loadMenuItem.addActionListener(new java.awt.event.ActionListener() {

            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(loadMenuItem);

        saveMenuItem.setText("Save data");
        saveMenuItem.addActionListener(new java.awt.event.ActionListener() {

            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveMenuItem);

        menuBar.add(fileMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 1140, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(mainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(22, Short.MAX_VALUE))
        );

//        pack();
    }// </editor-fold>

    private void dlSingleEffectRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {
        if (manuallyChanged) {
            JOptionPane.showMessageDialog(setMainPanel,
                    getMessage("DL"),
                    "Single effect warning",
                    JOptionPane.WARNING_MESSAGE);
            updatePreviousSingleEffectValues();
            highlightSingleEffectSite();
            singleEffectInt = 0;
        }
    }

    private void alSingleEffectRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {
        if (manuallyChanged) {
            JOptionPane.showMessageDialog(setMainPanel,
                    getMessage("AL"),
                    "Single effect warning",
                    JOptionPane.WARNING_MESSAGE);
            updatePreviousSingleEffectValues();
            highlightSingleEffectSite();
            singleEffectInt = 1;
        }
    }

    private void dvrSingleEffectRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {
        if (manuallyChanged) {
            JOptionPane.showMessageDialog(setMainPanel,
                    getMessage("DVR"),
                    "Single effect warning",
                    JOptionPane.WARNING_MESSAGE);
            updatePreviousSingleEffectValues();
            highlightSingleEffectSite();
            singleEffectInt = 2;
        }
    }

    private void avrSingleEffectRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {
        if (manuallyChanged) {
            JOptionPane.showMessageDialog(setMainPanel,
                    getMessage("AVR"),
                    "Single effect warning",
                    JOptionPane.WARNING_MESSAGE);
            updatePreviousSingleEffectValues();
            highlightSingleEffectSite();
            singleEffectInt = 3;
        }
    }

    private void cdSingleEffectRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {
        if (manuallyChanged) {
            JOptionPane.showMessageDialog(setMainPanel,
                    getMessage("CD"),
                    "Single effect warning",
                    JOptionPane.WARNING_MESSAGE);
            updatePreviousSingleEffectValues();
            highlightSingleEffectSite();
            singleEffectInt = 4;
        }
    }

    private void osmJunctionSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {
        if (manuallyChanged) {
            updateOsmJunctionValues();
        }
    }

    private void nrsSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {
        if (manuallyChanged) {
            updateNrsValues();
        }
    }

    private void cdNaClSpinner1StateChanged(javax.swing.event.ChangeEvent evt) {
        if (manuallyChanged) {
            cdNaClSpinner.setValue((Double) cdNaClSpinner1.getValue() / (Double) cdFlowSpinner.getValue());
        }
    }

    private void avrNaClSpinner1StateChanged(javax.swing.event.ChangeEvent evt) {
        if (manuallyChanged) {
            avrNaClSpinner.setValue((Double) avrNaClSpinner1.getValue() / (Double) avrFlowSpinner.getValue());
        }
    }

    private void dvrNaClSpinner1StateChanged(javax.swing.event.ChangeEvent evt) {
        if (manuallyChanged) {
            dvrNaClSpinner.setValue((Double) dvrNaClSpinner1.getValue() / (Double) dvrFlowSpinner.getValue());
        }
    }

    private void alNaClSpinner1StateChanged(javax.swing.event.ChangeEvent evt) {
        if (manuallyChanged) {
            alNaClSpinner.setValue((Double) alNaClSpinner1.getValue() / (Double) alFlowSpinner.getValue());
        }
    }

    private void dlNaClSpinner1StateChanged(javax.swing.event.ChangeEvent evt) {
        if (manuallyChanged) {
            dlNaClSpinner.setValue((Double) dlNaClSpinner1.getValue() / (Double) dlFlowSpinner.getValue());
        }
    }

    private void cdNaClSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {
        if (manuallyChanged) {
            manuallyChanged = false;
            updateCdNaClMassFlow();
            updateCdNaClFr();
            manuallyChanged = true;
            if (cdSingleEffectRadioButton.isSelected()) {
                updateUrineNaCl();
            } else {
                updateUrea();
                manuallyChanged = false;
                updateCdUreaMassFlow();
                updateCdUreaFr();
                manuallyChanged = true;
                updateUrineNaCl();
                updateUrineUrea();
            }
            updateFinalUOsm();
            updateFreeEnergy();
        }
    }

    private void avrNaClSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {
        if (manuallyChanged) {
            manuallyChanged = false;
            updateAvrNaClMassFlow();
            updateAvrNaClFr();
            manuallyChanged = true;
            if (avrSingleEffectRadioButton.isSelected()) {
                updateUrineNaCl();
            } else {
                updateUrea();
                manuallyChanged = false;
                updateAvrUreaMassFlow();
                updateAvrUreaFr();
                manuallyChanged = true;
                updateUrineNaCl();
                updateUrineUrea();
            }
            updateFinalUOsm();
            updateFreeEnergy();
        }
    }

    private void dvrNaClSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {
        if (manuallyChanged) {
            manuallyChanged = false;
            updateDvrNaClMassFlow();
            updateDvrNaClFr();
            manuallyChanged = true;
            if (dvrSingleEffectRadioButton.isSelected()) {
                updateUrineNaCl();
            } else {
                updateUrea();
                manuallyChanged = false;
                updateDvrUreaMassFlow();
                updateDvrUreaFr();
                manuallyChanged = true;
                updateUrineNaCl();
                updateUrineUrea();
            }
            updateFinalUOsm();
            updateFreeEnergy();
        }
    }

    private void alNaClSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {
        if (manuallyChanged) {
            manuallyChanged = false;
            updateAlNaClMassFlow();
            updateAlNaClFr();
            manuallyChanged = true;
            if (alSingleEffectRadioButton.isSelected()) {
                updateUrineNaCl();
            } else {
                updateUrea();
                manuallyChanged = false;
                updateAlUreaMassFlow();
                updateAlUreaFr();
                manuallyChanged = true;
                updateUrineNaCl();
                updateUrineUrea();
            }
            updateFinalUOsm();
            updateFreeEnergy();
        }
    }

    private void dlNaClSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {
        if (manuallyChanged) {
            manuallyChanged = false;
            updateDlNaClMassFlow();
            updateDlNaClFr();
            manuallyChanged = true;
            if (dlSingleEffectRadioButton.isSelected()) {
                updateUrineNaCl();
            } else {
                updateUrea();
                manuallyChanged = false;
                updateDlUreaMassFlow();
                updateDlUreaFr();
                manuallyChanged = true;
                updateUrineNaCl();
                updateUrineUrea();
            }
            updateFinalUOsm();
            updateFreeEnergy();
        }
    }

    private void urineFlowSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {
        if (manuallyChanged) {
            updateFlow();
            updateFinalUOsm();
            updateFreeEnergy();
        }
    }

    private void dlFlowSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {
        if (manuallyChanged) {
            updateFlow();
            updateFinalUOsm();
            updateFreeEnergy();
        }
    }

    private void alFlowSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {
        if (manuallyChanged) {
            updateFlow();
            updateFinalUOsm();
            updateFreeEnergy();
        }
    }

    private void dvrFlowSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {
        if (manuallyChanged) {
            updateFlow();
            updateFinalUOsm();
            updateFreeEnergy();
        }
    }

    private void avrFlowSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {
        if (manuallyChanged) {
            updateFlow();
            updateFinalUOsm();
            updateFreeEnergy();
        }
    }

    private void cdFlowSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {
        if (manuallyChanged) {
            updateFlow();
            updateFinalUOsm();
            updateFreeEnergy();
        }
    }

    private void urineFlowRadioButtonItemStateChanged(java.awt.event.ItemEvent evt) {
        setSpinnerEditable(urineFlowSpinner, urineFlowRadioButton.isSelected());
        if (urineFlowRadioButton.isSelected()) {
            urineTfpRadioButton.setSelected(true);
        }
    }

    private void cdFlowRadioButtonItemStateChanged(java.awt.event.ItemEvent evt) {
        setSpinnerEditable(cdFlowSpinner, cdFlowRadioButton.isSelected());
        if (cdFlowRadioButton.isSelected()) {
            cdTfpRadioButton.setSelected(true);
        }
    }

    private void avrFlowRadioButtonItemStateChanged(java.awt.event.ItemEvent evt) {
        setSpinnerEditable(avrFlowSpinner, avrFlowRadioButton.isSelected());
        if (avrFlowRadioButton.isSelected()) {
            avrTfpRadioButton.setSelected(true);
        }
    }

    private void dvrFlowRadioButtonItemStateChanged(java.awt.event.ItemEvent evt) {
        setSpinnerEditable(dvrFlowSpinner, dvrFlowRadioButton.isSelected());
        if (dvrFlowRadioButton.isSelected()) {
            dvrTfpRadioButton.setSelected(true);
        }
    }

    private void alFlowRadioButtonItemStateChanged(java.awt.event.ItemEvent evt) {
        setSpinnerEditable(alFlowSpinner, alFlowRadioButton.isSelected());
        if (alFlowRadioButton.isSelected()) {
            alTfpRadioButton.setSelected(true);
        }
    }

    private void dlFlowRadioButtonItemStateChanged(java.awt.event.ItemEvent evt) {
        setSpinnerEditable(dlFlowSpinner, dlFlowRadioButton.isSelected());
        if (dlFlowRadioButton.isSelected()) {
            dlTfpRadioButton.setSelected(true);
        }
    }

    private void dlTfpRadioButtonItemStateChanged(java.awt.event.ItemEvent evt) {
        setSpinnerEditable(dlTfpSpinner, dlTfpRadioButton.isSelected());
        if (dlTfpRadioButton.isSelected()) {
            dlFlowRadioButton.setSelected(true);
        }
    }

    private void alTfpRadioButtonItemStateChanged(java.awt.event.ItemEvent evt) {
        setSpinnerEditable(alTfpSpinner, alTfpRadioButton.isSelected());
        if (alTfpRadioButton.isSelected()) {
            alFlowRadioButton.setSelected(true);
        }
    }

    private void dvrTfpRadioButtonItemStateChanged(java.awt.event.ItemEvent evt) {
        setSpinnerEditable(dvrTfpSpinner, dvrTfpRadioButton.isSelected());
        if (dvrTfpRadioButton.isSelected()) {
            dvrFlowRadioButton.setSelected(true);
        }
    }

    private void avrTfpRadioButtonItemStateChanged(java.awt.event.ItemEvent evt) {
        setSpinnerEditable(avrTfpSpinner, avrTfpRadioButton.isSelected());
        if (avrTfpRadioButton.isSelected()) {
            avrFlowRadioButton.setSelected(true);
        }
    }

    private void cdTfpRadioButtonItemStateChanged(java.awt.event.ItemEvent evt) {
        setSpinnerEditable(cdTfpSpinner, cdTfpRadioButton.isSelected());
        if (cdTfpRadioButton.isSelected()) {
            cdFlowRadioButton.setSelected(true);
        }
    }

    private void urineTfpRadioButtonItemStateChanged(java.awt.event.ItemEvent evt) {
        setSpinnerEditable(urineTfpSpinner, urineTfpRadioButton.isSelected());
        if (urineTfpRadioButton.isSelected()) {
            urineFlowRadioButton.setSelected(true);
        }
    }

    private void cdTfpSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {
        if (manuallyChanged) {
            cdFlowSpinner.setValue((Double) gfrSpinner.getValue() / (Double) cdTfpSpinner.getValue());
        }
    }

    private void avrTfpSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {
        if (manuallyChanged) {
            avrFlowSpinner.setValue((Double) gfrSpinner.getValue() / (Double) avrTfpSpinner.getValue());
        }
    }

    private void dvrTfpSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {
        if (manuallyChanged) {
            dvrFlowSpinner.setValue((Double) gfrSpinner.getValue() / (Double) dvrTfpSpinner.getValue());
        }
    }

    private void alTfpSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {
        if (manuallyChanged) {
            alFlowSpinner.setValue((Double) gfrSpinner.getValue() * (Double) percentLongLoopSpinner.getValue() / ((Double) alTfpSpinner.getValue() * 100));
        }
    }

    private void dlTfpSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {
        if (manuallyChanged) {
            dlFlowSpinner.setValue((Double) gfrSpinner.getValue() * (Double) percentLongLoopSpinner.getValue() / ((Double) dlTfpSpinner.getValue() * 100));
        }
    }

    private void urineTfpSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {
        if (manuallyChanged) {
            urineFlowSpinner.setValue((Double) gfrSpinner.getValue() / (Double) urineTfpSpinner.getValue());
        }
    }

    private void dlNaClSpinner2StateChanged(javax.swing.event.ChangeEvent evt) {
        if (manuallyChanged) {
            dlNaClSpinner.setValue(((Double) dlNaClSpinner2.getValue() / 100 * (Double) gfrSpinner.getValue() * (Double) plasmaNaClSpinner.getValue()) / (Double) dlFlowSpinner.getValue());
        }
    }

    private void alNaClSpinner2StateChanged(javax.swing.event.ChangeEvent evt) {
        if (manuallyChanged) {
            alNaClSpinner.setValue(((Double) alNaClSpinner2.getValue() / 100 * (Double) gfrSpinner.getValue() * (Double) plasmaNaClSpinner.getValue()) / (Double) alFlowSpinner.getValue());
        }
    }

    private void dvrNaClSpinner2StateChanged(javax.swing.event.ChangeEvent evt) {
        if (manuallyChanged) {
            dvrNaClSpinner.setValue(((Double) dvrNaClSpinner2.getValue() / 100 * (Double) gfrSpinner.getValue() * (Double) plasmaNaClSpinner.getValue()) / (Double) dvrFlowSpinner.getValue());
        }
    }

    private void avrNaClSpinner2StateChanged(javax.swing.event.ChangeEvent evt) {
        if (manuallyChanged) {
            avrNaClSpinner.setValue(((Double) avrNaClSpinner2.getValue() / 100 * (Double) gfrSpinner.getValue() * (Double) plasmaNaClSpinner.getValue()) / (Double) avrFlowSpinner.getValue());
        }
    }

    private void cdNaClSpinner2StateChanged(javax.swing.event.ChangeEvent evt) {
        if (manuallyChanged) {
            cdNaClSpinner.setValue(((Double) cdNaClSpinner2.getValue() / 100 * (Double) gfrSpinner.getValue() * (Double) plasmaNaClSpinner.getValue()) / (Double) cdFlowSpinner.getValue());
        }
    }

    private void cdUreaSpinner1StateChanged(javax.swing.event.ChangeEvent evt) {
        if (manuallyChanged) {
            cdUreaSpinner.setValue((Double) cdUreaSpinner1.getValue() / (Double) cdFlowSpinner.getValue());
        }
    }

    private void avrUreaSpinner1StateChanged(javax.swing.event.ChangeEvent evt) {
        if (manuallyChanged) {
            avrUreaSpinner.setValue((Double) avrUreaSpinner1.getValue() / (Double) avrFlowSpinner.getValue());
        }
    }

    private void dvrUreaSpinner1StateChanged(javax.swing.event.ChangeEvent evt) {
        if (manuallyChanged) {
            dvrUreaSpinner.setValue((Double) dvrUreaSpinner1.getValue() / (Double) dvrFlowSpinner.getValue());
        }
    }

    private void alUreaSpinner1StateChanged(javax.swing.event.ChangeEvent evt) {
        if (manuallyChanged) {
            alUreaSpinner.setValue((Double) alUreaSpinner1.getValue() / (Double) alFlowSpinner.getValue());
        }
    }

    private void dlUreaSpinner1StateChanged(javax.swing.event.ChangeEvent evt) {
        if (manuallyChanged) {
            dlUreaSpinner.setValue((Double) dlUreaSpinner1.getValue() / (Double) dlFlowSpinner.getValue());
        }
    }

    private void cdUreaSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {
        if (manuallyChanged) {
            manuallyChanged = false;
            updateCdUreaMassFlow();
            updateCdUreaFr();
            manuallyChanged = true;
            if (cdSingleEffectRadioButton.isSelected()) {
                updateUrineUrea();
            } else {
                updateNaCl();
                manuallyChanged = false;
                updateCdNaClMassFlow();
                updateCdNaClFr();
                manuallyChanged = true;
                updateUrineNaCl();
                updateUrineUrea();
            }
            updateFinalUOsm();
            updateFreeEnergy();
        }
    }

    private void avrUreaSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {
        if (manuallyChanged) {
            manuallyChanged = false;
            updateAvrUreaMassFlow();
            updateAvrUreaFr();
            manuallyChanged = true;
            if (avrSingleEffectRadioButton.isSelected()) {
                updateUrineUrea();
            } else {
                updateNaCl();
                manuallyChanged = false;
                updateAvrNaClMassFlow();
                updateAvrNaClFr();
                manuallyChanged = true;
                updateUrineNaCl();
                updateUrineUrea();
            }
            updateFinalUOsm();
            updateFreeEnergy();
        }
    }

    private void dvrUreaSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {
        if (manuallyChanged) {
            manuallyChanged = false;
            updateDvrUreaMassFlow();
            updateDvrUreaFr();
            manuallyChanged = true;
            if (dvrSingleEffectRadioButton.isSelected()) {
                updateUrineUrea();
            } else {
                updateNaCl();
                manuallyChanged = false;
                updateDvrNaClMassFlow();
                updateDvrNaClFr();
                manuallyChanged = true;
                updateUrineNaCl();
                updateUrineUrea();
            }
            updateFinalUOsm();
            updateFreeEnergy();
        }
    }

    private void alUreaSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {
        if (manuallyChanged) {
            manuallyChanged = false;
            updateAlUreaMassFlow();
            updateAlUreaFr();
            manuallyChanged = true;
            if (alSingleEffectRadioButton.isSelected()) {
                updateUrineUrea();
            } else {
                updateNaCl();
                manuallyChanged = false;
                updateAlNaClMassFlow();
                updateAlNaClFr();
                manuallyChanged = true;
                updateUrineNaCl();
                updateUrineUrea();
            }
            updateFinalUOsm();
            updateFreeEnergy();
        }
    }

    private void dlUreaSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {
        if (manuallyChanged) {
            manuallyChanged = false;
            updateDlUreaMassFlow();
            updateDlUreaFr();
            manuallyChanged = true;
            if (dlSingleEffectRadioButton.isSelected()) {
                updateUrineUrea();
            } else {
                updateNaCl();
                manuallyChanged = false;
                updateDlNaClMassFlow();
                updateDlNaClFr();
                manuallyChanged = true;
                updateUrineNaCl();
                updateUrineUrea();
            }
            updateFinalUOsm();
            updateFreeEnergy();
        }
    }

    private void dlUreaSpinner2StateChanged(javax.swing.event.ChangeEvent evt) {
        if (manuallyChanged) {
            dlUreaSpinner.setValue(((Double) dlUreaSpinner2.getValue() / 100 * (Double) gfrSpinner.getValue() * (Double) plasmaUreaSpinner.getValue()) / (Double) dlFlowSpinner.getValue());
        }
    }

    private void alUreaSpinner2StateChanged(javax.swing.event.ChangeEvent evt) {
        if (manuallyChanged) {
            alUreaSpinner.setValue(((Double) alUreaSpinner2.getValue() / 100 * (Double) gfrSpinner.getValue() * (Double) plasmaUreaSpinner.getValue()) / (Double) alFlowSpinner.getValue());
        }
    }

    private void dvrUreaSpinner2StateChanged(javax.swing.event.ChangeEvent evt) {
        if (manuallyChanged) {
            dvrUreaSpinner.setValue(((Double) dvrUreaSpinner2.getValue() / 100 * (Double) gfrSpinner.getValue() * (Double) plasmaUreaSpinner.getValue()) / (Double) dvrFlowSpinner.getValue());
        }
    }

    private void avrUreaSpinner2StateChanged(javax.swing.event.ChangeEvent evt) {
        if (manuallyChanged) {
            avrUreaSpinner.setValue(((Double) avrUreaSpinner2.getValue() / 100 * (Double) gfrSpinner.getValue() * (Double) plasmaUreaSpinner.getValue()) / (Double) avrFlowSpinner.getValue());
        }
    }

    private void cdUreaSpinner2StateChanged(javax.swing.event.ChangeEvent evt) {
        if (manuallyChanged) {
            cdUreaSpinner.setValue(((Double) cdUreaSpinner2.getValue() / 100 * (Double) gfrSpinner.getValue() * (Double) plasmaUreaSpinner.getValue()) / (Double) cdFlowSpinner.getValue());
        }
    }

    private void plasmaNaClSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {
        if (manuallyChanged) {
            manuallyChanged = false;
            updateFrNaCl();
            manuallyChanged = true;
            updateUrineNaCl();
        }
    }

    private void plasmaUreaSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {
        if (manuallyChanged) {
            manuallyChanged = false;
            updateFrUrea();
            manuallyChanged = true;
            updateUrineUrea();
        }
    }

    private void gfrSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {
        if (manuallyChanged) {
            manuallyChanged = false;
            updateTfp();
            updateFrNaCl();
            updateFrUrea();
            manuallyChanged = true;
            updateUrineNaCl();
            updateUrineUrea();
        }
    }

    private void copyButtonActionPerformed(java.awt.event.ActionEvent evt) {
        freeEnergyTextArea.requestFocusInWindow();
        freeEnergyTextArea.selectAll();
        Clipboard cb =
                Toolkit.getDefaultToolkit().
                getSystemClipboard();
        String header = "Site\tNaCl\tUrea\tNRS\n";
        String s = header + freeEnergyTextArea.getText();
        StringSelection contents =
                new StringSelection(s);
        cb.setContents(contents, null);
    }

    private void percentLongLoopSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {
        if (manuallyChanged) {
            manuallyChanged = false;
            updateTfp();
            manuallyChanged = true;
        }
    }

    private void loadMenuItemActionPerformed(java.awt.event.ActionEvent evt) {
        JFileChooser fc = new JFileChooser();
        fc.setMultiSelectionEnabled(true);
        int returnVal = fc.showDialog(FreeEnergyApplet.this, "Select");
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            BufferedReader inputStream = null;
            try {
                inputStream =
                        new BufferedReader(new FileReader(file));
                load(inputStream);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(FreeEnergyApplet.this,
                        "Invalid data file",
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
            } finally {
                if (inputStream != null) {
                    try {
                        inputStream.close();
                    } catch (IOException ex) {
                        Logger.getLogger(FreeEnergyApplet.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        }
    }

    private void saveMenuItemActionPerformed(java.awt.event.ActionEvent evt) {
        JFileChooser chooser = new JFileChooser();
        chooser.setAcceptAllFileFilterUsed(false);
        FileNameExtensionFilter txtFilter = new FileNameExtensionFilter("Text File (.txt)", "txt");
        chooser.addChoosableFileFilter(txtFilter);
        int returnVal = chooser.showSaveDialog(FreeEnergyApplet.this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            PrintWriter output = null;
            try {
                output = new PrintWriter(new BufferedWriter(new FileWriter(chooser.getSelectedFile() + ".txt", false)));
                output.println("Site of single effect\t" + getSingleEffectSite());
                output.println("Osmolality at OM-IM junction (mOsm)\t" + osmJunctionSpinner.getValue());
                output.println("Non-Reabsorbable Solute (NRS) for CD (mOsm)\t" + nrsSpinner.getValue());
                output.println("Glomerular filtration rate (µl/min)\t" + gfrSpinner.getValue());
                output.println("Plasma Na (mM)\t" + plasmaNaClSpinner.getValue());
                output.println("Plasma Urea (mM)\t" + plasmaUreaSpinner.getValue());
                output.println("% of nephrons with long loops\t" + percentLongLoopSpinner.getValue());
                boolean[] bsFlow = getFlowRadioButtonStates();
                String flow = null;
                if (bsFlow[0]) {
                    flow = "DL";
                } else if (bsFlow[1]) {
                    flow = "AL";
                } else if (bsFlow[2]) {
                    flow = "DVR";
                } else if (bsFlow[3]) {
                    flow = "AVR";
                } else if (bsFlow[4]) {
                    flow = "CD";
                } else if (bsFlow[5]) {
                    flow = "Urine";
                }
                output.println("Site to calculate volume in mass balance\t" + flow);
                double[] dsFlow = getFlowSpinnerValues();
                output.println("Water flow: DL (µl/min)\t" + dsFlow[0]);
                output.println("Water flow: AL (µl/min)\t" + (-1 * dsFlow[1]));
                output.println("Water flow: DVR (µl/min)\t" + dsFlow[2]);
                output.println("Water flow: AVR (µl/min)\t" + (-1 * dsFlow[3]));
                output.println("Water flow: CD (µl/min)\t" + dsFlow[4]);
                output.println("Water flow: Urine (µl/min)\t" + (-1 * dsFlow[5]));
                output.println("TF/P inulin: DL\t" + dlTfpSpinner.getValue());
                output.println("TF/P inulin: AL\t" + alTfpSpinner.getValue());
                output.println("TF/P inulin: DVR\t" + dvrTfpSpinner.getValue());
                output.println("TF/P inulin: AVR\t" + avrTfpSpinner.getValue());
                output.println("TF/P inulin: CD\t" + cdTfpSpinner.getValue());
                output.println("TF/P inulin: Urine\t" + urineTfpSpinner.getValue());
                double[] dsNaCl = getNaClSpinnerValues();
                output.println("Na concentration: DL (mM)\t" + dsNaCl[0]);
                output.println("Na concentration: AL (mM)\t" + dsNaCl[1]);
                output.println("Na concentration: DVR (mM)\t" + dsNaCl[2]);
                output.println("Na concentration: AVR (mM)\t" + dsNaCl[3]);
                output.println("Na concentration: CD (mM)\t" + dsNaCl[4]);
                output.println("Na concentration: Urine (mM)\t" + dsNaCl[5]);
                output.println("Na mass flow: DL (nmol/min)\t" + dlNaClSpinner1.getValue());
                output.println("Na mass flow: AL (nmol/min)\t" + alNaClSpinner1.getValue());
                output.println("Na mass flow: DVR (nmol/min)\t" + dvrNaClSpinner1.getValue());
                output.println("Na mass flow: AVR (nmol/min)\t" + avrNaClSpinner1.getValue());
                output.println("Na mass flow: CD (nmol/min)\t" + cdNaClSpinner1.getValue());
                output.println("Na mass flow: Urine (nmol/min)\t" + urineNaClMassFlow);
                output.println("% Na delivery: DL\t" + dlNaClSpinner2.getValue());
                output.println("% Na delivery: AL\t" + alNaClSpinner2.getValue());
                output.println("% Na delivery: DVR\t" + dvrNaClSpinner2.getValue());
                output.println("% Na delivery: AVR\t" + avrNaClSpinner2.getValue());
                output.println("% Na delivery: CD\t" + cdNaClSpinner2.getValue());
                output.println("% Na delivery: Urine\t" + urineNaClTextField2.getText());
                double[] dsUrea = getUreaSpinnerValues();
                output.println("Urea concentration: DL (mM)\t" + dsUrea[0]);
                output.println("Urea concentration: AL (mM)\t" + dsUrea[1]);
                output.println("Urea concentration: DVR (mM)\t" + dsUrea[2]);
                output.println("Urea concentration: AVR (mM)\t" + dsUrea[3]);
                output.println("Urea concentration: CD (mM)\t" + dsUrea[4]);
                output.println("Urea concentration: Urine (mM)\t" + dsUrea[5]);
                output.println("Urea mass flow: DL (nmol/min)\t" + dlUreaSpinner1.getValue());
                output.println("Urea mass flow: AL (nmol/min)\t" + alUreaSpinner1.getValue());
                output.println("Urea mass flow: DVR (nmol/min)\t" + dvrUreaSpinner1.getValue());
                output.println("Urea mass flow: AVR (nmol/min)\t" + avrUreaSpinner1.getValue());
                output.println("Urea mass flow: CD (nmol/min)\t" + cdUreaSpinner1.getValue());
                output.println("Urea mass flow: Urine (nmol/min)\t" + urineUreaMassFlow);
                output.println("% Urea delivery: DL\t" + dlUreaSpinner2.getValue());
                output.println("% Urea delivery: AL\t" + alUreaSpinner2.getValue());
                output.println("% Urea delivery: DVR\t" + dvrUreaSpinner2.getValue());
                output.println("% Urea delivery: AVR\t" + avrUreaSpinner2.getValue());
                output.println("% Urea delivery: CD\t" + cdUreaSpinner2.getValue());
                output.println("% Urea delivery: Urine\t" + urineUreaTextField2.getText());
                output.println("Final urine osmolality (mOsm)\t" + finalUOsmValue.getText());
                output.println("Net free-energy flow (mJ/min)\t" + freeEnergyValue.getText());
            } catch (Exception e) {
            } finally {
                if (output != null) {
                    output.close();
                }
            }
        }
    }
    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        java.awt.EventQueue.invokeLater(new Runnable() {
//
//            @Override
//            public void run() {
//                new FreeEnergyForm().setVisible(true);
//            }
//        });
//    }
    // Variables declaration - do not modify
    private javax.swing.JRadioButton alFlowRadioButton;
    private javax.swing.JSpinner alFlowSpinner;
    private javax.swing.JLabel alNaClLabel;
    private javax.swing.JLabel alNaClLabel1;
    private javax.swing.JLabel alNaClLabel2;
    private javax.swing.JSpinner alNaClSpinner;
    private javax.swing.JSpinner alNaClSpinner1;
    private javax.swing.JSpinner alNaClSpinner2;
    private javax.swing.JRadioButton alSingleEffectRadioButton;
    private javax.swing.JRadioButton alTfpRadioButton;
    private javax.swing.JSpinner alTfpSpinner;
    private javax.swing.JLabel alUreaLabel;
    private javax.swing.JLabel alUreaLabel1;
    private javax.swing.JLabel alUreaLabel2;
    private javax.swing.JSpinner alUreaSpinner;
    private javax.swing.JSpinner alUreaSpinner1;
    private javax.swing.JSpinner alUreaSpinner2;
    private javax.swing.JRadioButton avrFlowRadioButton;
    private javax.swing.JSpinner avrFlowSpinner;
    private javax.swing.JLabel avrNaClLabel;
    private javax.swing.JLabel avrNaClLabel1;
    private javax.swing.JLabel avrNaClLabel2;
    private javax.swing.JSpinner avrNaClSpinner;
    private javax.swing.JSpinner avrNaClSpinner1;
    private javax.swing.JSpinner avrNaClSpinner2;
    private javax.swing.JRadioButton avrSingleEffectRadioButton;
    private javax.swing.JRadioButton avrTfpRadioButton;
    private javax.swing.JSpinner avrTfpSpinner;
    private javax.swing.JLabel avrUreaLabel;
    private javax.swing.JLabel avrUreaLabel1;
    private javax.swing.JLabel avrUreaLabel2;
    private javax.swing.JSpinner avrUreaSpinner;
    private javax.swing.JSpinner avrUreaSpinner1;
    private javax.swing.JSpinner avrUreaSpinner2;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JRadioButton cdFlowRadioButton;
    private javax.swing.JSpinner cdFlowSpinner;
    private javax.swing.JLabel cdNaClLabel;
    private javax.swing.JLabel cdNaClLabel1;
    private javax.swing.JLabel cdNaClLabel2;
    private javax.swing.JSpinner cdNaClSpinner;
    private javax.swing.JSpinner cdNaClSpinner1;
    private javax.swing.JSpinner cdNaClSpinner2;
    private javax.swing.JRadioButton cdSingleEffectRadioButton;
    private javax.swing.JRadioButton cdTfpRadioButton;
    private javax.swing.JSpinner cdTfpSpinner;
    private javax.swing.JLabel cdUreaLabel;
    private javax.swing.JLabel cdUreaLabel1;
    private javax.swing.JLabel cdUreaLabel2;
    private javax.swing.JSpinner cdUreaSpinner;
    private javax.swing.JSpinner cdUreaSpinner1;
    private javax.swing.JSpinner cdUreaSpinner2;
    private javax.swing.JLabel componentsLabel;
    private javax.swing.JButton copyButton;
    private javax.swing.JRadioButton dlFlowRadioButton;
    private javax.swing.JSpinner dlFlowSpinner;
    private javax.swing.JLabel dlNaClLabel;
    private javax.swing.JLabel dlNaClLabel1;
    private javax.swing.JLabel dlNaClLabel2;
    private javax.swing.JSpinner dlNaClSpinner;
    private javax.swing.JSpinner dlNaClSpinner1;
    private javax.swing.JSpinner dlNaClSpinner2;
    private javax.swing.JRadioButton dlSingleEffectRadioButton;
    private javax.swing.JRadioButton dlTfpRadioButton;
    private javax.swing.JSpinner dlTfpSpinner;
    private javax.swing.JLabel dlUreaLabel;
    private javax.swing.JLabel dlUreaLabel1;
    private javax.swing.JLabel dlUreaLabel2;
    private javax.swing.JSpinner dlUreaSpinner;
    private javax.swing.JSpinner dlUreaSpinner1;
    private javax.swing.JSpinner dlUreaSpinner2;
    private javax.swing.JRadioButton dvrFlowRadioButton;
    private javax.swing.JSpinner dvrFlowSpinner;
    private javax.swing.JLabel dvrNaClLabel;
    private javax.swing.JLabel dvrNaClLabel1;
    private javax.swing.JLabel dvrNaClLabel2;
    private javax.swing.JSpinner dvrNaClSpinner;
    private javax.swing.JSpinner dvrNaClSpinner1;
    private javax.swing.JSpinner dvrNaClSpinner2;
    private javax.swing.JRadioButton dvrSingleEffectRadioButton;
    private javax.swing.JRadioButton dvrTfpRadioButton;
    private javax.swing.JSpinner dvrTfpSpinner;
    private javax.swing.JLabel dvrUreaLabel;
    private javax.swing.JLabel dvrUreaLabel1;
    private javax.swing.JLabel dvrUreaLabel2;
    private javax.swing.JSpinner dvrUreaSpinner;
    private javax.swing.JSpinner dvrUreaSpinner1;
    private javax.swing.JSpinner dvrUreaSpinner2;
    private javax.swing.JLabel energyInputLabel;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JLabel finalUOsmLabel;
    private javax.swing.JLabel finalUOsmUnit;
    private javax.swing.JLabel finalUOsmValue;
    private javax.swing.ButtonGroup flowButtonGroup;
    private javax.swing.JPanel flowPanel;
    private javax.swing.JPanel flowTopPanel;
    private javax.swing.JPanel frNaClBottomPanel;
    private javax.swing.JLabel frNaClLabel;
    private javax.swing.JPanel frNaClPanel;
    private javax.swing.JPanel frNaClTopPanel;
    private javax.swing.JPanel frUreaBottomPanel;
    private javax.swing.JLabel frUreaLabel;
    private javax.swing.JPanel frUreaPanel;
    private javax.swing.JPanel frUreaTopPanel;
    private javax.swing.JLabel freeEnergyLabel;
    private javax.swing.JScrollPane freeEnergyScrollPane;
    private javax.swing.JTextArea freeEnergyTextArea;
    private javax.swing.JLabel freeEnergyUnit;
    private javax.swing.JLabel freeEnergyValue;
    private javax.swing.JLabel gfrLabel;
    private javax.swing.JSpinner gfrSpinner;
    private javax.swing.JMenuItem loadMenuItem;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JLabel model;
    private javax.swing.JLabel nrsLabel;
    private javax.swing.JSpinner nrsSpinner;
    private javax.swing.JSpinner osmJunctionSpinner;
    private javax.swing.JLabel percentLongLoopLabel;
    private javax.swing.JSpinner percentLongLoopSpinner;
    private javax.swing.JLabel plasmaNaClLabel;
    private javax.swing.JSpinner plasmaNaClSpinner;
    private javax.swing.JLabel plasmaUreaLabel;
    private javax.swing.JSpinner plasmaUreaSpinner;
    private javax.swing.JPanel saltConcBottomPanel;
    private javax.swing.JLabel saltConcLabel;
    private javax.swing.JPanel saltConcPanel;
    private javax.swing.JPanel saltConcTopPanel;
    private javax.swing.JLabel saltLabel;
    private javax.swing.JPanel saltMassFlowBottomPanel;
    private javax.swing.JLabel saltMassFlowLabel;
    private javax.swing.JPanel saltMassFlowPanel;
    private javax.swing.JPanel saltMassFlowTopPanel;
    private javax.swing.JTabbedPane saltTabbedPane;
    private javax.swing.JMenuItem saveMenuItem;
    private javax.swing.JScrollPane scrollPane;
    private javax.swing.JPanel setMainPanel;
    private javax.swing.JLabel setNRSLabel;
    private javax.swing.JLabel setOsmLabel;
    private javax.swing.JLabel setSingleEffectLabel;
    private javax.swing.ButtonGroup singleEffectButtonGroup;
    private javax.swing.JLabel siteLabel;
    private javax.swing.JPanel tfpPanel;
    private javax.swing.JPanel tfpTopPanel;
    private javax.swing.JPanel ureaConcBottomPanel;
    private javax.swing.JLabel ureaConcLabel;
    private javax.swing.JPanel ureaConcPanel;
    private javax.swing.JPanel ureaConcTopPanel;
    private javax.swing.JLabel ureaLabel;
    private javax.swing.JPanel ureaMassFlowBottomPanel;
    private javax.swing.JLabel ureaMassFlowLabel;
    private javax.swing.JPanel ureaMassFlowPanel;
    private javax.swing.JPanel ureaMassFlowTopPanel;
    private javax.swing.JTabbedPane ureaTabbedPane;
    private javax.swing.JRadioButton urineFlowRadioButton;
    private javax.swing.JSpinner urineFlowSpinner;
    private javax.swing.JLabel urineNaClLabel;
    private javax.swing.JLabel urineNaClLabel1;
    private javax.swing.JLabel urineNaClLabel2;
    private javax.swing.JTextField urineNaClTextField;
    private javax.swing.JTextField urineNaClTextField1;
    private javax.swing.JTextField urineNaClTextField2;
    private javax.swing.JRadioButton urineTfpRadioButton;
    private javax.swing.JSpinner urineTfpSpinner;
    private javax.swing.JLabel urineUreaLabel;
    private javax.swing.JLabel urineUreaLabel1;
    private javax.swing.JLabel urineUreaLabel2;
    private javax.swing.JTextField urineUreaTextField;
    private javax.swing.JTextField urineUreaTextField1;
    private javax.swing.JTextField urineUreaTextField2;
    private javax.swing.JLabel warningUrineNaClLabel;
    private javax.swing.JLabel warningUrineNaClLabel1;
    private javax.swing.JLabel warningUrineNaClLabel2;
    private javax.swing.JLabel warningUrineUreaLabel;
    private javax.swing.JLabel warningUrineUreaLabel1;
    private javax.swing.JLabel warningUrineUreaLabel2;
    private javax.swing.JLabel waterLabel;
    private javax.swing.JLabel waterLabel1;
    private javax.swing.JTabbedPane waterTabbedPane;
    // End of variables declaration

    private double[] getFlowSpinnerValues() {
        double[] ds = new double[6];
        ds[0] = (Double) dlFlowSpinner.getValue();
        ds[1] = -1 * (Double) alFlowSpinner.getValue();
        ds[2] = (Double) dvrFlowSpinner.getValue();
        ds[3] = -1 * (Double) avrFlowSpinner.getValue();
        ds[4] = (Double) cdFlowSpinner.getValue();
        ds[5] = -1 * (Double) urineFlowSpinner.getValue();
        return ds;
    }

    private double[] getNaClSpinnerValues() {
        double[] ds = new double[6];
        ds[0] = (Double) dlNaClSpinner.getValue();
        ds[1] = (Double) alNaClSpinner.getValue();
        ds[2] = (Double) dvrNaClSpinner.getValue();
        ds[3] = (Double) avrNaClSpinner.getValue();
        ds[4] = (Double) cdNaClSpinner.getValue();
        ds[5] = urineNaClConc;
        return ds;
    }

    private double[] getUreaSpinnerValues() {
        double[] ds = new double[6];
        ds[0] = (Double) dlUreaSpinner.getValue();
        ds[1] = (Double) alUreaSpinner.getValue();
        ds[2] = (Double) dvrUreaSpinner.getValue();
        ds[3] = (Double) avrUreaSpinner.getValue();
        ds[4] = (Double) cdUreaSpinner.getValue();
        ds[5] = urineUreaConc;
        return ds;
    }

    private boolean[] getFlowRadioButtonStates() {
        boolean[] bs = new boolean[6];
        bs[0] = dlFlowRadioButton.isSelected();
        bs[1] = alFlowRadioButton.isSelected();
        bs[2] = dvrFlowRadioButton.isSelected();
        bs[3] = avrFlowRadioButton.isSelected();
        bs[4] = cdFlowRadioButton.isSelected();
        bs[5] = urineFlowRadioButton.isSelected();
        return bs;
    }

    private boolean[] getSingleEffectRadioButtonStates() {
        boolean[] bs = new boolean[5];
        bs[0] = dlSingleEffectRadioButton.isSelected();
        bs[1] = alSingleEffectRadioButton.isSelected();
        bs[2] = dvrSingleEffectRadioButton.isSelected();
        bs[3] = avrSingleEffectRadioButton.isSelected();
        bs[4] = cdSingleEffectRadioButton.isSelected();
        return bs;
    }

    private void updateFlow() {
        //update flowPanel
        boolean[] bsFlow = getFlowRadioButtonStates();
        int flowSelectedIndex = 0;
        for (int i = 0; i < bsFlow.length; i++) {
            if (bsFlow[i]) {
                flowSelectedIndex = i;
                break;
            }
        }
        double[] dsFlow = getFlowSpinnerValues();
        double selectedFlow = 0;
        for (int i = 0; i < dsFlow.length; i++) {
            if (i != flowSelectedIndex) {
                selectedFlow += dsFlow[i];
            }
        }
        manuallyChanged = false;
        if (dlFlowRadioButton.isSelected()) {
            dlFlowSpinner.setValue(selectedFlow * -1);
        } else if (alFlowRadioButton.isSelected()) {
            alFlowSpinner.setValue(selectedFlow);
        } else if (dvrFlowRadioButton.isSelected()) {
            dvrFlowSpinner.setValue(selectedFlow * -1);
        } else if (avrFlowRadioButton.isSelected()) {
            avrFlowSpinner.setValue(selectedFlow);
        } else if (cdFlowRadioButton.isSelected()) {
            cdFlowSpinner.setValue(selectedFlow * -1);
        } else {
            urineFlowSpinner.setValue(selectedFlow);
        }
        updateTfp();
        updateNaClMassFlow();
        updateUreaMassFlow();
        updateFrNaCl();
        updateFrUrea();
        manuallyChanged = true;
        updateUrineNaCl();
        updateUrineUrea();
    }

    private void setSpinnerEditable(JSpinner jSpinner, boolean b) {
        JFormattedTextField field = ((JSpinner.DefaultEditor) jSpinner.getEditor()).getTextField();
        field.setEditable(!b);
        field.setForeground((!b) ? Color.black : Color.blue);
    }

    private void updateNaCl() {
        double[] dsNaCl = getNaClSpinnerValues();
        double[] dsUrea = getUreaSpinnerValues();
        double osmJunction = (Double) osmJunctionSpinner.getValue();
        double nrs = (Double) nrsSpinner.getValue();
        manuallyChanged = false;
        dlNaClSpinner.setValue((dlSingleEffectRadioButton.isSelected()) ? dsNaCl[0] : (osmJunction - (dsUrea[0] * osmCoeffUrea)) / osmCoeffNaCl);
        alNaClSpinner.setValue((alSingleEffectRadioButton.isSelected()) ? dsNaCl[1] : (osmJunction - (dsUrea[1] * osmCoeffUrea)) / osmCoeffNaCl);
        dvrNaClSpinner.setValue((dvrSingleEffectRadioButton.isSelected()) ? dsNaCl[2] : (osmJunction - (dsUrea[2] * osmCoeffUrea)) / osmCoeffNaCl);
        avrNaClSpinner.setValue((avrSingleEffectRadioButton.isSelected()) ? dsNaCl[3] : (osmJunction - (dsUrea[3] * osmCoeffUrea)) / osmCoeffNaCl);
        cdNaClSpinner.setValue((cdSingleEffectRadioButton.isSelected()) ? dsNaCl[4] : (osmJunction - (dsUrea[4] * osmCoeffUrea) - nrs) / osmCoeffNaCl);
        manuallyChanged = true;
//        System.out.println("NaCl updated");
    }

    private void updateUrea() {
        double[] dsNaCl = getNaClSpinnerValues();
        double[] dsUrea = getUreaSpinnerValues();
        double osmJunction = (Double) osmJunctionSpinner.getValue();
        double nrs = (Double) nrsSpinner.getValue();
        manuallyChanged = false;
        dlUreaSpinner.setValue((dlSingleEffectRadioButton.isSelected()) ? dsUrea[0] : (osmJunction - (dsNaCl[0] * osmCoeffNaCl)) / osmCoeffUrea);
        alUreaSpinner.setValue((alSingleEffectRadioButton.isSelected()) ? dsUrea[1] : (osmJunction - (dsNaCl[1] * osmCoeffNaCl)) / osmCoeffUrea);
        dvrUreaSpinner.setValue((dvrSingleEffectRadioButton.isSelected()) ? dsUrea[2] : (osmJunction - (dsNaCl[2] * osmCoeffNaCl)) / osmCoeffUrea);
        avrUreaSpinner.setValue((avrSingleEffectRadioButton.isSelected()) ? dsUrea[3] : (osmJunction - (dsNaCl[3] * osmCoeffNaCl)) / osmCoeffUrea);
        cdUreaSpinner.setValue((cdSingleEffectRadioButton.isSelected()) ? dsUrea[4] : (osmJunction - (dsNaCl[4] * osmCoeffNaCl) - nrs) / osmCoeffUrea);
        manuallyChanged = true;
//        System.out.println("Urea updated");
    }

    private void updateFreeEnergy() {
        double[] dsFlow = getFlowSpinnerValues();
        double[] dsNaCl = getNaClSpinnerValues();
        double[] dsUrea = getUreaSpinnerValues();
        double freeEnergy;
        double freeEnergyUrea = 0;
        double freeEnergySalt = 0;
        double freeEnergyNRS;
        for (int i = 0; i < 6; i++) {
            freeEnergyUrea += ((dsFlow[i] * dsUrea[i] * 1E-9) * Math.log(dsUrea[i] / 1));
            freeEnergyOutput[(i * 4) + 2] = Double.toString(Math.round(8.31 * 310 * ((dsFlow[i] * dsUrea[i] * 1E-9) * Math.log(dsUrea[i] / 1)) * 1000000) / 1000.0);
        }
        for (int i = 0; i < 6; i++) {
            freeEnergySalt += ((dsFlow[i] * dsNaCl[i] * 1E-9) * Math.log(dsNaCl[i] / 1));
            freeEnergyOutput[(i * 4) + 1] = Double.toString(Math.round(2 * 8.31 * 310 * ((dsFlow[i] * dsNaCl[i] * 1E-9) * Math.log(dsNaCl[i] / 1)) * 1000000) / 1000.0);
        }
        double NRS = (Double) nrsSpinner.getValue();
        freeEnergyNRS = dsFlow[4] * NRS * 1E-9 * Math.log(-dsFlow[5] / dsFlow[4]);
        freeEnergy = 8.31 * 310 * (freeEnergyUrea + (2 * freeEnergySalt) + freeEnergyNRS);
        freeEnergyOutput[19] = Double.toString(Math.round(8.31 * 310 * dsFlow[4] * NRS * Math.log(NRS) * 1E-9 * 1000000) / 1000.0);
        freeEnergyOutput[23] = Double.toString(Math.round(8.31 * 310 * -dsFlow[4] * NRS * Math.log(NRS * (-dsFlow[4] / dsFlow[5])) * 1E-9 * 1000000) / 1000.0);
        Double roundedFreeEnergy = Math.round(freeEnergy * 1000000) / 1000.00;
        freeEnergyValue.setText(Double.toString(roundedFreeEnergy));
        if (roundedFreeEnergy > 0) {
            model.setForeground(new Color(0, 163, 61));
            model.setText("Does not require");
            energyInputLabel.setForeground(new Color(0, 163, 61));
        } else if (roundedFreeEnergy <= 0) {
            model.setForeground(Color.red);
            model.setText("Requires");
            energyInputLabel.setForeground(Color.red);
        }
        //Update freeEnergyTextArea
        freeEnergyTextArea.setText("");
        for (int i = 0; i < 24; i++) {
            freeEnergyTextArea.append(freeEnergyOutput[i] + (((i + 1) % 4 == 0) ? "\n" : "\t"));
        }
    }

    private void highlightSingleEffectSite() {
        boolean[] bsSingleEffect = getSingleEffectRadioButtonStates();
        ((JSpinner.DefaultEditor) dlNaClSpinner.getEditor()).getTextField().setForeground((bsSingleEffect[0]) ? Color.red : Color.black);
        ((JSpinner.DefaultEditor) alNaClSpinner.getEditor()).getTextField().setForeground((bsSingleEffect[1]) ? Color.red : Color.black);
        ((JSpinner.DefaultEditor) dvrNaClSpinner.getEditor()).getTextField().setForeground((bsSingleEffect[2]) ? Color.red : Color.black);
        ((JSpinner.DefaultEditor) avrNaClSpinner.getEditor()).getTextField().setForeground((bsSingleEffect[3]) ? Color.red : Color.black);
        ((JSpinner.DefaultEditor) cdNaClSpinner.getEditor()).getTextField().setForeground((bsSingleEffect[4]) ? Color.red : Color.black);
        ((JSpinner.DefaultEditor) dlUreaSpinner.getEditor()).getTextField().setForeground((bsSingleEffect[0]) ? Color.red : Color.black);
        ((JSpinner.DefaultEditor) alUreaSpinner.getEditor()).getTextField().setForeground((bsSingleEffect[1]) ? Color.red : Color.black);
        ((JSpinner.DefaultEditor) dvrUreaSpinner.getEditor()).getTextField().setForeground((bsSingleEffect[2]) ? Color.red : Color.black);
        ((JSpinner.DefaultEditor) avrUreaSpinner.getEditor()).getTextField().setForeground((bsSingleEffect[3]) ? Color.red : Color.black);
        ((JSpinner.DefaultEditor) cdUreaSpinner.getEditor()).getTextField().setForeground((bsSingleEffect[4]) ? Color.red : Color.black);
        ((JSpinner.DefaultEditor) dlNaClSpinner1.getEditor()).getTextField().setForeground((bsSingleEffect[0]) ? Color.red : Color.black);
        ((JSpinner.DefaultEditor) alNaClSpinner1.getEditor()).getTextField().setForeground((bsSingleEffect[1]) ? Color.red : Color.black);
        ((JSpinner.DefaultEditor) dvrNaClSpinner1.getEditor()).getTextField().setForeground((bsSingleEffect[2]) ? Color.red : Color.black);
        ((JSpinner.DefaultEditor) avrNaClSpinner1.getEditor()).getTextField().setForeground((bsSingleEffect[3]) ? Color.red : Color.black);
        ((JSpinner.DefaultEditor) cdNaClSpinner1.getEditor()).getTextField().setForeground((bsSingleEffect[4]) ? Color.red : Color.black);
        ((JSpinner.DefaultEditor) dlUreaSpinner1.getEditor()).getTextField().setForeground((bsSingleEffect[0]) ? Color.red : Color.black);
        ((JSpinner.DefaultEditor) alUreaSpinner1.getEditor()).getTextField().setForeground((bsSingleEffect[1]) ? Color.red : Color.black);
        ((JSpinner.DefaultEditor) dvrUreaSpinner1.getEditor()).getTextField().setForeground((bsSingleEffect[2]) ? Color.red : Color.black);
        ((JSpinner.DefaultEditor) avrUreaSpinner1.getEditor()).getTextField().setForeground((bsSingleEffect[3]) ? Color.red : Color.black);
        ((JSpinner.DefaultEditor) cdUreaSpinner1.getEditor()).getTextField().setForeground((bsSingleEffect[4]) ? Color.red : Color.black);
        ((JSpinner.DefaultEditor) dlNaClSpinner2.getEditor()).getTextField().setForeground((bsSingleEffect[0]) ? Color.red : Color.black);
        ((JSpinner.DefaultEditor) alNaClSpinner2.getEditor()).getTextField().setForeground((bsSingleEffect[1]) ? Color.red : Color.black);
        ((JSpinner.DefaultEditor) dvrNaClSpinner2.getEditor()).getTextField().setForeground((bsSingleEffect[2]) ? Color.red : Color.black);
        ((JSpinner.DefaultEditor) avrNaClSpinner2.getEditor()).getTextField().setForeground((bsSingleEffect[3]) ? Color.red : Color.black);
        ((JSpinner.DefaultEditor) cdNaClSpinner2.getEditor()).getTextField().setForeground((bsSingleEffect[4]) ? Color.red : Color.black);
        ((JSpinner.DefaultEditor) dlUreaSpinner2.getEditor()).getTextField().setForeground((bsSingleEffect[0]) ? Color.red : Color.black);
        ((JSpinner.DefaultEditor) alUreaSpinner2.getEditor()).getTextField().setForeground((bsSingleEffect[1]) ? Color.red : Color.black);
        ((JSpinner.DefaultEditor) dvrUreaSpinner2.getEditor()).getTextField().setForeground((bsSingleEffect[2]) ? Color.red : Color.black);
        ((JSpinner.DefaultEditor) avrUreaSpinner2.getEditor()).getTextField().setForeground((bsSingleEffect[3]) ? Color.red : Color.black);
        ((JSpinner.DefaultEditor) cdUreaSpinner2.getEditor()).getTextField().setForeground((bsSingleEffect[4]) ? Color.red : Color.black);
    }

    private void updateUrineNaCl() {
        double[] dsFlow = getFlowSpinnerValues();
        double[] dsNaCl = getNaClSpinnerValues();
        urineNaClMassFlow = 0;
        for (int i = 0; i < 5; i++) {
            urineNaClMassFlow += (dsNaCl[i] * dsFlow[i]);
        }
        urineNaClConc = urineNaClMassFlow / Math.abs(dsFlow[5]);
        double roundedUrineNaClConc = Math.round(urineNaClConc) / 1.0;
        urineNaClTextField.setText(Double.toString(roundedUrineNaClConc));
        urineNaClTextField1.setText(Double.toString(Math.round(urineNaClMassFlow) / 1.0));
        urineNaClTextField2.setText(Double.toString(Math.round(100 * (1000 * -urineNaClConc * dsFlow[5]) / ((Double) gfrSpinner.getValue() * (Double) plasmaNaClSpinner.getValue())) / 1000.0));
        if (roundedUrineNaClConc < 0) {
            warningUrineNaClLabel.setText("Illegal value!");
            warningUrineNaClLabel1.setText("Illegal value!");
            warningUrineNaClLabel2.setText("Illegal value!");
        } else {
            warningUrineNaClLabel.setText("");
            warningUrineNaClLabel1.setText("");
            warningUrineNaClLabel2.setText("");
        }
    }

    private void updateUrineUrea() {
        double[] dsFlow = getFlowSpinnerValues();
        double[] dsUrea = getUreaSpinnerValues();
        urineUreaMassFlow = 0;
        for (int i = 0; i < 5; i++) {
            urineUreaMassFlow += (dsUrea[i] * dsFlow[i]);
        }
        urineUreaConc = urineUreaMassFlow / Math.abs(dsFlow[5]);
        double roundedUrineUreaConc = Math.round(urineUreaConc) / 1.0;
        urineUreaTextField.setText(Double.toString(roundedUrineUreaConc));
        urineUreaTextField1.setText(Double.toString(Math.round(urineUreaMassFlow) / 1.0));
        urineUreaTextField2.setText(Double.toString(Math.round(100 * (1000 * -urineUreaConc * dsFlow[5]) / ((Double) gfrSpinner.getValue() * (Double) plasmaUreaSpinner.getValue())) / 1000.0));
        if (roundedUrineUreaConc < 0) {
            warningUrineUreaLabel.setText("Illegal value!");
            warningUrineUreaLabel1.setText("Illegal value!");
            warningUrineUreaLabel2.setText("Illegal value!");
        } else {
            warningUrineUreaLabel.setText("");
            warningUrineUreaLabel1.setText("");
            warningUrineUreaLabel2.setText("");
        }
    }

    private void updateFinalUOsm() {
        double[] dsFlow = getFlowSpinnerValues();
        double nrs = (Double) nrsSpinner.getValue();
        double finalUOsm = (urineNaClConc * osmCoeffNaCl) + (urineUreaConc * osmCoeffUrea) + Math.abs(nrs * dsFlow[4] / dsFlow[5]);
        finalUOsmValue.setText(Double.toString(Math.round(finalUOsm) / 1.0));
//        checkMassBalance();
    }

    private void checkMassBalance() {
        double[] dsFlow = getFlowSpinnerValues();
        double[] dsNaCl = getNaClSpinnerValues();
        double[] dsUrea = getUreaSpinnerValues();
        double flowBalance = 0;
        double saltBalance = 0;
        double ureaBalance = 0;
        for (int i = 0; i < 5; i++) {
            flowBalance += dsFlow[i];
            saltBalance += dsFlow[i] * dsNaCl[i];
            ureaBalance += dsFlow[i] * dsUrea[i];
        }
        flowBalance += dsFlow[5];
        saltBalance += dsFlow[5] * urineNaClConc;
        ureaBalance += dsFlow[5] * urineUreaConc;
        System.out.println(
                "flowBalance: " + flowBalance
                + " saltBalance: " + saltBalance
                + " ureaBalance: " + ureaBalance);
    }

    private void updateFrNaCl() {
        updateDlNaClFr();
        updateAlNaClFr();
        updateDvrNaClFr();
        updateAvrNaClFr();
        updateCdNaClFr();
    }

    private void updateFrUrea() {
        updateDlUreaFr();
        updateAlUreaFr();
        updateDvrUreaFr();
        updateAvrUreaFr();
        updateCdUreaFr();
    }

    private void updateNaClMassFlow() {
        updateDlNaClMassFlow();
        updateAlNaClMassFlow();
        updateDvrNaClMassFlow();
        updateAvrNaClMassFlow();
        updateCdNaClMassFlow();
    }

    private void updateUreaMassFlow() {
        updateDlUreaMassFlow();
        updateAlUreaMassFlow();
        updateDvrUreaMassFlow();
        updateAvrUreaMassFlow();
        updateCdUreaMassFlow();
    }

    private void updateTfp() {
        dlTfpSpinner.setValue((Double) gfrSpinner.getValue() * (Double) percentLongLoopSpinner.getValue() / ((Double) dlFlowSpinner.getValue() * 100));
        alTfpSpinner.setValue((Double) gfrSpinner.getValue() * (Double) percentLongLoopSpinner.getValue() / ((Double) alFlowSpinner.getValue() * 100));
        dvrTfpSpinner.setValue((Double) gfrSpinner.getValue() / (Double) dvrFlowSpinner.getValue());
        avrTfpSpinner.setValue((Double) gfrSpinner.getValue() / (Double) avrFlowSpinner.getValue());
        cdTfpSpinner.setValue((Double) gfrSpinner.getValue() / (Double) cdFlowSpinner.getValue());
        urineTfpSpinner.setValue((Double) gfrSpinner.getValue() / (Double) urineFlowSpinner.getValue());
    }

    private void updateDlNaClMassFlow() {
        dlNaClSpinner1.setValue((Double) dlNaClSpinner.getValue() * (Double) dlFlowSpinner.getValue());
    }

    private void updateDlNaClFr() {
        dlNaClSpinner2.setValue(((Double) dlNaClSpinner.getValue() * 100 * (Double) dlFlowSpinner.getValue()) / ((Double) gfrSpinner.getValue() * (Double) plasmaNaClSpinner.getValue()));
    }

    private void updateAlNaClMassFlow() {
        alNaClSpinner1.setValue((Double) alNaClSpinner.getValue() * (Double) alFlowSpinner.getValue());
    }

    private void updateAlNaClFr() {
        alNaClSpinner2.setValue(((Double) alNaClSpinner.getValue() * 100 * (Double) alFlowSpinner.getValue()) / ((Double) gfrSpinner.getValue() * (Double) plasmaNaClSpinner.getValue()));
    }

    private void updateDvrNaClMassFlow() {
        dvrNaClSpinner1.setValue((Double) dvrNaClSpinner.getValue() * (Double) dvrFlowSpinner.getValue());
    }

    private void updateDvrNaClFr() {
        dvrNaClSpinner2.setValue(((Double) dvrNaClSpinner.getValue() * 100 * (Double) dvrFlowSpinner.getValue()) / ((Double) gfrSpinner.getValue() * (Double) plasmaNaClSpinner.getValue()));
    }

    private void updateAvrNaClMassFlow() {
        avrNaClSpinner1.setValue((Double) avrNaClSpinner.getValue() * (Double) avrFlowSpinner.getValue());
    }

    private void updateAvrNaClFr() {
        avrNaClSpinner2.setValue(((Double) avrNaClSpinner.getValue() * 100 * (Double) avrFlowSpinner.getValue()) / ((Double) gfrSpinner.getValue() * (Double) plasmaNaClSpinner.getValue()));
    }

    private void updateCdNaClMassFlow() {
        cdNaClSpinner1.setValue((Double) cdNaClSpinner.getValue() * (Double) cdFlowSpinner.getValue());
    }

    private void updateCdNaClFr() {
        cdNaClSpinner2.setValue(((Double) cdNaClSpinner.getValue() * 100 * (Double) cdFlowSpinner.getValue()) / ((Double) gfrSpinner.getValue() * (Double) plasmaNaClSpinner.getValue()));
    }

    private void updateDlUreaMassFlow() {
        dlUreaSpinner1.setValue((Double) dlUreaSpinner.getValue() * (Double) dlFlowSpinner.getValue());
    }

    private void updateDlUreaFr() {
        dlUreaSpinner2.setValue(((Double) dlUreaSpinner.getValue() * 100 * (Double) dlFlowSpinner.getValue()) / ((Double) gfrSpinner.getValue() * (Double) plasmaUreaSpinner.getValue()));
    }

    private void updateAlUreaMassFlow() {
        alUreaSpinner1.setValue((Double) alUreaSpinner.getValue() * (Double) alFlowSpinner.getValue());
    }

    private void updateAlUreaFr() {
        alUreaSpinner2.setValue(((Double) alUreaSpinner.getValue() * 100 * (Double) alFlowSpinner.getValue()) / ((Double) gfrSpinner.getValue() * (Double) plasmaUreaSpinner.getValue()));
    }

    private void updateDvrUreaMassFlow() {
        dvrUreaSpinner1.setValue((Double) dvrUreaSpinner.getValue() * (Double) dvrFlowSpinner.getValue());
    }

    private void updateDvrUreaFr() {
        dvrUreaSpinner2.setValue(((Double) dvrUreaSpinner.getValue() * 100 * (Double) dvrFlowSpinner.getValue()) / ((Double) gfrSpinner.getValue() * (Double) plasmaUreaSpinner.getValue()));
    }

    private void updateAvrUreaMassFlow() {
        avrUreaSpinner1.setValue((Double) avrUreaSpinner.getValue() * (Double) avrFlowSpinner.getValue());
    }

    private void updateAvrUreaFr() {
        avrUreaSpinner2.setValue(((Double) avrUreaSpinner.getValue() * 100 * (Double) avrFlowSpinner.getValue()) / ((Double) gfrSpinner.getValue() * (Double) plasmaUreaSpinner.getValue()));
    }

    private void updateCdUreaMassFlow() {
        cdUreaSpinner1.setValue((Double) cdUreaSpinner.getValue() * (Double) cdFlowSpinner.getValue());
    }

    private void updateCdUreaFr() {
        cdUreaSpinner2.setValue(((Double) cdUreaSpinner.getValue() * 100 * (Double) cdFlowSpinner.getValue()) / ((Double) gfrSpinner.getValue() * (Double) plasmaUreaSpinner.getValue()));
    }

    private void load(BufferedReader inputStream) throws Exception {
        String line;
        String[][] data = new String[58][2];
        int i = 0;
        while ((line = inputStream.readLine()) != null) {
            String[] strings = line.split("\t");
            data[i][0] = strings[0];
            data[i][1] = strings[1];
            i++;
        }
        StringBuilder sb = new StringBuilder();
        double[] ds = new double[58];
        for (int j = 0; j < data.length; j++) {
//                    System.out.println(data[j][0] + "\t" + data[j][1]);
            sb.append(data[j][0]);
            if (j != 0 && j != 7) {
                ds[j] = Double.parseDouble(data[j][1]);
            } else {
                if (!data[j][1].equals("DL")
                        && !data[j][1].equals("AL")
                        && !data[j][1].equals("DVR")
                        && !data[j][1].equals("AVR")
                        && !data[j][1].equals("CD")
                        && !data[7][1].equals("Urine")) {
                    throw new Exception();
                }
            }
        }
        if (sb.toString().equals("Site of single effectOsmolality at OM-IM junction (mOsm)Non-Reabsorbable Solute (NRS) for CD (mOsm)Glomerular filtration rate (µl/min)Plasma Na (mM)Plasma Urea (mM)% of nephrons with long loopsSite to calculate volume in mass balanceWater flow: DL (µl/min)Water flow: AL (µl/min)Water flow: DVR (µl/min)Water flow: AVR (µl/min)Water flow: CD (µl/min)Water flow: Urine (µl/min)TF/P inulin: DLTF/P inulin: ALTF/P inulin: DVRTF/P inulin: AVRTF/P inulin: CDTF/P inulin: UrineNa concentration: DL (mM)Na concentration: AL (mM)Na concentration: DVR (mM)Na concentration: AVR (mM)Na concentration: CD (mM)Na concentration: Urine (mM)Na mass flow: DL (nmol/min)Na mass flow: AL (nmol/min)Na mass flow: DVR (nmol/min)Na mass flow: AVR (nmol/min)Na mass flow: CD (nmol/min)Na mass flow: Urine (nmol/min)% Na delivery: DL% Na delivery: AL% Na delivery: DVR% Na delivery: AVR% Na delivery: CD% Na delivery: UrineUrea concentration: DL (mM)Urea concentration: AL (mM)Urea concentration: DVR (mM)Urea concentration: AVR (mM)Urea concentration: CD (mM)Urea concentration: Urine (mM)Urea mass flow: DL (nmol/min)Urea mass flow: AL (nmol/min)Urea mass flow: DVR (nmol/min)Urea mass flow: AVR (nmol/min)Urea mass flow: CD (nmol/min)Urea mass flow: Urine (nmol/min)% Urea delivery: DL% Urea delivery: AL% Urea delivery: DVR% Urea delivery: AVR% Urea delivery: CD% Urea delivery: UrineFinal urine osmolality (mOsm)Net free-energy flow (mJ/min)")) {
            manuallyChanged = false;
            if (data[0][1].equals("DL")) {
                dlSingleEffectRadioButton.setSelected(true);
                singleEffectInt = 0;
            } else if (data[0][1].equals("AL")) {
                alSingleEffectRadioButton.setSelected(true);
                singleEffectInt = 1;
            } else if (data[0][1].equals("DVR")) {
                dvrSingleEffectRadioButton.setSelected(true);
                singleEffectInt = 2;
            } else if (data[0][1].equals("AVR")) {
                avrSingleEffectRadioButton.setSelected(true);
                singleEffectInt = 3;
            } else if (data[0][1].equals("CD")) {
                cdSingleEffectRadioButton.setSelected(true);
                singleEffectInt = 4;
            }
            highlightSingleEffectSite();
            osmJunctionSpinner.setValue(ds[1]);
            nrsSpinner.setValue(ds[2]);
            gfrSpinner.setValue(ds[3]);
            plasmaNaClSpinner.setValue(ds[4]);
            plasmaUreaSpinner.setValue(ds[5]);
            percentLongLoopSpinner.setValue(ds[6]);
            if (data[7][1].equals("DL")) {
                dlFlowRadioButton.setSelected(true);
            } else if (data[7][1].equals("AL")) {
                alFlowRadioButton.setSelected(true);
            } else if (data[7][1].equals("DVR")) {
                dvrFlowRadioButton.setSelected(true);
            } else if (data[7][1].equals("AVR")) {
                avrFlowRadioButton.setSelected(true);
            } else if (data[7][1].equals("CD")) {
                cdFlowRadioButton.setSelected(true);
            } else if (data[7][1].equals("Urine")) {
                urineFlowRadioButton.setSelected(true);
            }
            dlFlowSpinner.setValue(ds[8]);
            alFlowSpinner.setValue(ds[9]);
            dvrFlowSpinner.setValue(ds[10]);
            avrFlowSpinner.setValue(ds[11]);
            cdFlowSpinner.setValue(ds[12]);
            urineFlowSpinner.setValue(ds[13]);
            dlTfpSpinner.setValue(ds[14]);
            alTfpSpinner.setValue(ds[15]);
            dvrTfpSpinner.setValue(ds[16]);
            avrTfpSpinner.setValue(ds[17]);
            cdTfpSpinner.setValue(ds[18]);
            urineTfpSpinner.setValue(ds[19]);
            dlNaClSpinner.setValue(ds[20]);
            alNaClSpinner.setValue(ds[21]);
            dvrNaClSpinner.setValue(ds[22]);
            avrNaClSpinner.setValue(ds[23]);
            cdNaClSpinner.setValue(ds[24]);
//                    urineNaClConc = ds[25];
            dlNaClSpinner1.setValue(ds[26]);
            alNaClSpinner1.setValue(ds[27]);
            dvrNaClSpinner1.setValue(ds[28]);
            avrNaClSpinner1.setValue(ds[29]);
            cdNaClSpinner1.setValue(ds[30]);
//                    urineNaClMassFlow = ds[31];
            dlNaClSpinner2.setValue(ds[32]);
            alNaClSpinner2.setValue(ds[33]);
            dvrNaClSpinner2.setValue(ds[34]);
            avrNaClSpinner2.setValue(ds[35]);
            cdNaClSpinner2.setValue(ds[36]);
//                    urineNaClTextField2 = ds[37];
            dlUreaSpinner.setValue(ds[38]);
            alUreaSpinner.setValue(ds[39]);
            dvrUreaSpinner.setValue(ds[40]);
            avrUreaSpinner.setValue(ds[41]);
            cdUreaSpinner.setValue(ds[42]);
//                    urineUreaConc = ds[43];
            dlUreaSpinner1.setValue(ds[44]);
            alUreaSpinner1.setValue(ds[45]);
            dvrUreaSpinner1.setValue(ds[46]);
            avrUreaSpinner1.setValue(ds[47]);
            cdUreaSpinner1.setValue(ds[48]);
//                    urineUreaMassFlow = ds[49];
            dlUreaSpinner2.setValue(ds[50]);
            alUreaSpinner2.setValue(ds[51]);
            dvrUreaSpinner2.setValue(ds[52]);
            avrUreaSpinner2.setValue(ds[53]);
            cdUreaSpinner2.setValue(ds[54]);
//                    urineUreaTextField2 = ds[55];
            updateUrineNaCl();
            updateUrineUrea();
            updateFinalUOsm();
            updateFreeEnergy();
            manuallyChanged = true;
        } else {
            throw new Exception();
        }
    }

    private String getSingleEffectSite() {
        String singleEffect = null;
        switch (singleEffectInt) {
            case 0:
                singleEffect = "DL";
                break;
            case 1:
                singleEffect = "AL";
                break;
            case 2:
                singleEffect = "DVR";
                break;
            case 3:
                singleEffect = "AVR";
                break;
            case 4:
                singleEffect = "CD";
                break;
        }
        return singleEffect;
    }

    private Object getMessage(String string) {
        String message =
                "Site of single effect will be changed from \"" + getSingleEffectSite() + "\" to \"" + string + "\".\n"
                + "Na and Urea values of \"" + getSingleEffectSite() + "\" will be automatically readjusted\n"
                + "to match osmolality at OM-IM junction.";
        return message;
    }

    private void updatePreviousSingleEffectValues() {
        double osmJunction = (Double) osmJunctionSpinner.getValue();
        double nrs = (singleEffectInt != 4) ? 0 : (Double) nrsSpinner.getValue();
        double previousNaClOsm = getNaClSpinnerValues()[singleEffectInt] * osmCoeffNaCl;
        double previousUreaOsm = getUreaSpinnerValues()[singleEffectInt] * osmCoeffUrea;
        double previousOsm = previousNaClOsm + previousUreaOsm + nrs;
        double newNaCl = getNaClSpinnerValues()[singleEffectInt] * (osmJunction - nrs) / (previousOsm - nrs);
        switch (singleEffectInt) {
            case 0:
                dlNaClSpinner.setValue(newNaCl);
                break;
            case 1:
                alNaClSpinner.setValue(newNaCl);
                break;
            case 2:
                dvrNaClSpinner.setValue(newNaCl);
                break;
            case 3:
                avrNaClSpinner.setValue(newNaCl);
                break;
            case 4:
                cdNaClSpinner.setValue(newNaCl);
                break;
        }
    }

    private void updateOsmJunctionValues() {
        /**
         * Osm1 = Na1 + Urea1 + NRS
         * Osm2 = Na2 + Urea2 + NRS
         * Na1/Urea1 = Na2/Urea2
         * Na2 = Na1 * (Osm2 - NRS) / (Osm1 - NRS) 
         * Na2 = Na1 * (Osm2 - NRS) / (Na1 + Urea1)
         * Na2 = Na1 * (Na2 + Urea2) / (Na1 + Urea1)
         * Urea2 = Urea1 * (Osm2 - NRS) / (Osm1 - NRS) 
         * Urea2 = Urea1 * (Osm2 - NRS) / (Na1 + Urea1)
         * Urea2 = Urea1 * (Na2 + Urea2) / (Na1 + Urea1)
         */
        double osmJunction = (Double) osmJunctionSpinner.getValue();
        double nrs = (Double) nrsSpinner.getValue();
        double[] dsNaCl = getNaClSpinnerValues();
        double[] dsUrea = getUreaSpinnerValues();
        double previousDLOsm = (dsNaCl[0] * osmCoeffNaCl) + (dsUrea[0] * osmCoeffUrea);
        double previousALOsm = (dsNaCl[1] * osmCoeffNaCl) + (dsUrea[1] * osmCoeffUrea);
        double previousDVROsm = (dsNaCl[2] * osmCoeffNaCl) + (dsUrea[2] * osmCoeffUrea);
        double previousAVROsm = (dsNaCl[3] * osmCoeffNaCl) + (dsUrea[3] * osmCoeffUrea);
        double previousCDOsm = (dsNaCl[4] * osmCoeffNaCl) + (dsUrea[4] * osmCoeffUrea) + nrs;
        manuallyChanged = false;
        dlNaClSpinner.setValue((dlSingleEffectRadioButton.isSelected()) ? dsNaCl[0] : dsNaCl[0] * osmJunction / previousDLOsm);
        alNaClSpinner.setValue((alSingleEffectRadioButton.isSelected()) ? dsNaCl[1] : dsNaCl[1] * osmJunction / previousALOsm);
        dvrNaClSpinner.setValue((dvrSingleEffectRadioButton.isSelected()) ? dsNaCl[2] : dsNaCl[2] * osmJunction / previousDVROsm);
        avrNaClSpinner.setValue((avrSingleEffectRadioButton.isSelected()) ? dsNaCl[3] : dsNaCl[3] * osmJunction / previousAVROsm);
        cdNaClSpinner.setValue((cdSingleEffectRadioButton.isSelected()) ? dsNaCl[4] : dsNaCl[4] * (osmJunction - nrs) / (previousCDOsm - nrs));
        dlUreaSpinner.setValue((dlSingleEffectRadioButton.isSelected()) ? dsUrea[0] : dsUrea[0] * osmJunction / previousDLOsm);
        alUreaSpinner.setValue((alSingleEffectRadioButton.isSelected()) ? dsUrea[1] : dsUrea[1] * osmJunction / previousALOsm);
        dvrUreaSpinner.setValue((dvrSingleEffectRadioButton.isSelected()) ? dsUrea[2] : dsUrea[2] * osmJunction / previousDVROsm);
        avrUreaSpinner.setValue((avrSingleEffectRadioButton.isSelected()) ? dsUrea[3] : dsUrea[3] * osmJunction / previousAVROsm);
        cdUreaSpinner.setValue((cdSingleEffectRadioButton.isSelected()) ? dsUrea[4] : dsUrea[4] * (osmJunction - nrs) / (previousCDOsm - nrs));
        updateNaClMassFlow();
        updateUreaMassFlow();
        updateFrNaCl();
        updateFrUrea();
        manuallyChanged = true;
        updateUrineNaCl();
        updateUrineUrea();
        updateFinalUOsm();
        updateFreeEnergy();
        nrsSpinner.setModel(new SpinnerNumberModel(nrs, 0, osmJunction - 0.001, 1));
    }

    private void updateNrsValues() {
        /**
         * Osm = Na1 + Urea1 + NRS1
         * Osm = Na2 + Urea2 + NRS2
         * Na1/Urea1 = Na2/Urea2
         * Na2 = Na1 * (Osm - NRS2) / (Osm - NRS1) 
         * Na2 = Na1 * (Osm - NRS2) / (Na1 + Urea1)
         * Na2 = Na1 * (Na2 + Urea2) / (Na1 + Urea1)
         * Urea2 = Urea1 * (Osm - NRS2) / (Osm - NRS1) 
         * Urea2 = Urea1 * (Osm - NRS2) / (Na1 + Urea1)
         * Urea2 = Urea1 * (Na2 + Urea2) / (Na1 + Urea1)
         */
        double osmJunction = (Double) osmJunctionSpinner.getValue();
        double nrs = (Double) nrsSpinner.getValue();
        double[] dsNaCl = getNaClSpinnerValues();
        double[] dsUrea = getUreaSpinnerValues();
        manuallyChanged = false;
        cdNaClSpinner.setValue((cdSingleEffectRadioButton.isSelected()) ? dsNaCl[4] : dsNaCl[4] * (osmJunction - nrs) / ((dsNaCl[4] * osmCoeffNaCl) + (dsUrea[4] * osmCoeffUrea)));
        cdUreaSpinner.setValue((cdSingleEffectRadioButton.isSelected()) ? dsUrea[4] : dsUrea[4] * (osmJunction - nrs) / ((dsNaCl[4] * osmCoeffNaCl) + (dsUrea[4] * osmCoeffUrea)));
        updateNaClMassFlow();
        updateUreaMassFlow();
        updateFrNaCl();
        updateFrUrea();
        manuallyChanged = true;
        updateUrineNaCl();
        updateUrineUrea();
        updateFinalUOsm();
        updateFreeEnergy();
        osmJunctionSpinner.setModel(new SpinnerNumberModel(osmJunction, nrs + 0.001, null, 1));
    }
}
